{"version":3,"file":"material-sidenav.umd.min.js","sources":["../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/sidenav/index.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/style/apply-transform.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\r\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Renderer2,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {first} from 'rxjs/operator/first';\r\nimport {startWith} from 'rxjs/operator/startWith';\r\nimport {takeUntil} from 'rxjs/operator/takeUntil';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Throws an exception when two MdDrawer are matching the same position.\n * @param {?} position\n * @return {?}\n */\nexport function throwMdDuplicatedDrawerError(position: string) {\r\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\r\n}\n/**\n * Drawer toggle promise result.\r\\@deprecated\n */\nexport class MdDrawerToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\r\n}\n\nfunction MdDrawerToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerToggleResult.prototype.type;\n/** @type {?} */\nMdDrawerToggleResult.prototype.animationFinished;\n}\n\nexport class MdDrawerContent implements AfterContentInit {\n/**\n * Margins to be applied to the content. These are used to push / shrink the drawer content when a\rdrawer is open. We use margin rather than transform even for push mode because transform breaks\rfixed position elements inside of the transformed element.\n */\n_margins: {left: number, right: number} = {left: 0, right: 0};\n/**\n * @param {?} _changeDetectorRef\n * @param {?} _container\n */\nconstructor(\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _container: MdDrawerContainer) {\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._container._contentMargins.subscribe(margins => {\r\n      this._margins = margins;\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-drawer-content, mat-drawer-content',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    'class': 'mat-drawer-content',\r\n    '[style.marginLeft.px]': '_margins.left',\r\n    '[style.marginRight.px]': '_margins.right',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: MdDrawerContainer, decorators: [{ type: Inject, args: [forwardRef(() => MdDrawerContainer), ] }, ]},\n];\n}\n\nfunction MdDrawerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawerContent.ctorParameters;\n/**\n * Margins to be applied to the content. These are used to push / shrink the drawer content when a\rdrawer is open. We use margin rather than transform even for push mode because transform breaks\rfixed position elements inside of the transformed element.\n * @type {?}\n */\nMdDrawerContent.prototype._margins;\n/** @type {?} */\nMdDrawerContent.prototype._changeDetectorRef;\n/** @type {?} */\nMdDrawerContent.prototype._container;\n}\n\n/**\n * <md-drawer> component.\r\rThis component corresponds to a drawer that can be opened on the drawer container.\r\rPlease refer to README.md for examples on how to use it.\n */\nexport class MdDrawer implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\nprivate _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n */\nprivate _enableAnimations = false;\n/**\n * The side that the drawer is attached to.\n * @return {?}\n */\nget position() { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value) {\r\n    // Make sure we have a valid value.\r\n    value = value === 'end' ? 'end' : 'start';\r\n    if (value != this._position) {\r\n      this._position = value;\r\n      this.onAlignChanged.emit();\r\n      this.onPositionChanged.emit();\r\n    }\r\n  }\nprivate _position: 'start' | 'end' = 'start';\n/**\n * @deprecated\n * @return {?}\n */\nget align() { return this.position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) { this.position = value; }\n/**\n * Mode of the drawer; one of 'over', 'push' or 'side'.\n * @return {?}\n */\nget mode() { return this._mode; }\n/**\n * @param {?} value\n * @return {?}\n */\nset mode(value) {\r\n    this._mode = value;\r\n    this._modeChanged.next();\r\n  }\nprivate _mode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the drawer is opened.\n */\nprivate _opened: boolean = false;\n/**\n * Emits whenever the drawer has started animating.\n */\n_animationStarted = new EventEmitter<void>();\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n */\n_isAnimating = false;\n/**\n * Current state of the sidenav animation.\n */\n_animationState: 'open-instant' | 'open' | 'void' = 'void';\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\rcompatibility and should be removed next time we do drawer breaking changes.\r\\@deprecated\n */\nprivate _currentTogglePromise: Promise<MdDrawerToggleResult> | null;\n/**\n * Event emitted when the drawer is fully opened.\n */\nonOpen = new EventEmitter<MdDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer is fully closed.\n */\nonClose = new EventEmitter<MdDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer's position changes.\n */\nonPositionChanged = new EventEmitter<void>();\n/**\n * @deprecated\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * An observable that emits when the drawer mode changes. This is used by the drawer container to\rto know when to when the mode changes so it can adapt the margins on the content.\n */\n_modeChanged = new Subject();\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\r\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\r\n    return this.opened && this.mode !== 'side';\r\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _doc\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _doc: any) {\r\n    this.onOpen.subscribe(() => {\r\n      if (this._doc) {\r\n        this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\r\n      }\r\n\r\n      if (this.isFocusTrapEnabled && this._focusTrap) {\r\n        this._focusTrap.focusInitialElementWhenReady();\r\n      }\r\n    });\r\n\r\n    this.onClose.subscribe(() => this._restoreFocus());\r\n  }\n/**\n * If focus is currently inside the drawer, restores it to where it was before the drawer\ropened.\n * @return {?}\n */\nprivate _restoreFocus() {\r\n    let /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\r\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\r\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\r\n        this._elementFocusedBeforeDrawerWasOpened.focus();\r\n      } else {\r\n        this._elementRef.nativeElement.blur();\r\n      }\r\n    }\r\n\r\n    this._elementFocusedBeforeDrawerWasOpened = null;\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\r\n    this._enableAnimations = true;\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    if (this._focusTrap) {\r\n      this._focusTrap.destroy();\r\n    }\r\n  }\n/**\n * Whether the drawer is opened. We overload this because we trigger an event when it\rstarts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\r\n    this.toggle(coerceBooleanProperty(v));\r\n  }\n/**\n * Open the drawer.\n * @return {?}\n */\nopen(): Promise<MdDrawerToggleResult> {\r\n    return this.toggle(true);\r\n  }\n/**\n * Close the drawer.\n * @return {?}\n */\nclose(): Promise<MdDrawerToggleResult> {\r\n    return this.toggle(false);\r\n  }\n/**\n * Toggle this drawer.\r\\@param isOpen Whether the drawer should be open.\n * @param {?=} isOpen\n * @return {?}\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdDrawerToggleResult> {\r\n    if (!this._isAnimating) {\r\n      this._opened = isOpen;\r\n\r\n      if (isOpen) {\r\n        this._animationState = this._enableAnimations ? 'open' : 'open-instant';\r\n      } else {\r\n        this._animationState = 'void';\r\n      }\r\n\r\n      this._currentTogglePromise = new Promise(resolve => {\r\n        first.call(isOpen ? this.onOpen : this.onClose).subscribe(resolve);\r\n      });\r\n\r\n      if (this._focusTrap) {\r\n        this._focusTrap.enabled = this.isFocusTrapEnabled;\r\n      }\r\n    }\r\n\r\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\r\n    // It should be removed next time we do breaking changes in the drawer.\r\n    return /** @type {?} */(( this._currentTogglePromise));\r\n  }\n/**\n * Handles the keyboard events.\r\\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\r\n    if (event.keyCode === ESCAPE && !this.disableClose) {\r\n      this.close();\r\n      event.stopPropagation();\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_onAnimationStart() {\r\n    this._isAnimating = true;\r\n    this._animationStarted.emit();\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onAnimationEnd(event: AnimationEvent) {\r\n    const {fromState, toState} = event;\r\n\r\n    if (toState === 'open' && fromState === 'void') {\r\n      this.onOpen.emit(new MdDrawerToggleResult('open', true));\r\n    } else if (toState === 'void' && fromState === 'open') {\r\n      this.onClose.emit(new MdDrawerToggleResult('close', true));\r\n    }\r\n\r\n    // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\r\n    // the end if animations are disabled. Make this call async to ensure that it still fires\r\n    // at the appropriate time.\r\n    Promise.resolve().then(() => {\r\n      this._isAnimating = false;\r\n      this._currentTogglePromise = null;\r\n    });\r\n  }\n/**\n * @return {?}\n */\nget _width() {\r\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-drawer, mat-drawer',\r\n  template: '<ng-content></ng-content>',\r\n  animations: [\r\n    trigger('transform', [\r\n      state('open, open-instant', style({\r\n        transform: 'translate3d(0, 0, 0)',\r\n        visibility: 'visible',\r\n      })),\r\n      state('void', style({\r\n        visibility: 'hidden',\r\n      })),\r\n      transition('void => open-instant', animate('0ms')),\r\n      transition('void <=> open, open-instant => void',\r\n          animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\r\n    ])\r\n  ],\r\n  host: {\r\n    'class': 'mat-drawer',\r\n    '[@transform]': '_animationState',\r\n    '(@transform.start)': '_onAnimationStart()',\r\n    '(@transform.done)': '_onAnimationEnd($event)',\r\n    '(keydown)': 'handleKeydown($event)',\r\n    // must prevent the browser from aligning text based on value\r\n    '[attr.align]': 'null',\r\n    '[class.mat-drawer-end]': 'position === \"end\"',\r\n    '[class.mat-drawer-over]': 'mode === \"over\"',\r\n    '[class.mat-drawer-push]': 'mode === \"push\"',\r\n    '[class.mat-drawer-side]': 'mode === \"side\"',\r\n    'tabIndex': '-1',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input },],\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onPositionChanged': [{ type: Output, args: ['positionChanged', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdDrawer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawer.ctorParameters;\n/** @type {?} */\nMdDrawer.propDecorators;\n/** @type {?} */\nMdDrawer.prototype._focusTrap;\n/** @type {?} */\nMdDrawer.prototype._elementFocusedBeforeDrawerWasOpened;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n * @type {?}\n */\nMdDrawer.prototype._enableAnimations;\n/** @type {?} */\nMdDrawer.prototype._position;\n/** @type {?} */\nMdDrawer.prototype._mode;\n/** @type {?} */\nMdDrawer.prototype._disableClose;\n/**\n * Whether the drawer is opened.\n * @type {?}\n */\nMdDrawer.prototype._opened;\n/**\n * Emits whenever the drawer has started animating.\n * @type {?}\n */\nMdDrawer.prototype._animationStarted;\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n * @type {?}\n */\nMdDrawer.prototype._isAnimating;\n/**\n * Current state of the sidenav animation.\n * @type {?}\n */\nMdDrawer.prototype._animationState;\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\rcompatibility and should be removed next time we do drawer breaking changes.\r\\@deprecated\n * @type {?}\n */\nMdDrawer.prototype._currentTogglePromise;\n/**\n * Event emitted when the drawer is fully opened.\n * @type {?}\n */\nMdDrawer.prototype.onOpen;\n/**\n * Event emitted when the drawer is fully closed.\n * @type {?}\n */\nMdDrawer.prototype.onClose;\n/**\n * Event emitted when the drawer's position changes.\n * @type {?}\n */\nMdDrawer.prototype.onPositionChanged;\n/**\n * @deprecated\n * @type {?}\n */\nMdDrawer.prototype.onAlignChanged;\n/**\n * An observable that emits when the drawer mode changes. This is used by the drawer container to\rto know when to when the mode changes so it can adapt the margins on the content.\n * @type {?}\n */\nMdDrawer.prototype._modeChanged;\n/** @type {?} */\nMdDrawer.prototype._elementRef;\n/** @type {?} */\nMdDrawer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDrawer.prototype._doc;\n}\n\n/**\n * <md-drawer-container> component.\r\rThis is the parent component to one or two <md-drawer>s that validates the state internally\rand coordinates the backdrop and content styling.\n */\nexport class MdDrawerContainer implements AfterContentInit, OnDestroy {\r\n   _drawers: QueryList<MdDrawer>;\r\n\r\n   _content: MdDrawerContent;\n/**\n * The drawer child with the `start` position.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The drawer child with the `end` position.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the drawer backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The drawer at the start/end position, independent of direction.\n */\nprivate _start: MdDrawer | null;\nprivate _end: MdDrawer | null;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\rThey're used as aliases for the above to set the left/right style properly.\rIn LTR, _left == _start and _right == _end.\rIn RTL, _left == _end and _right == _start.\n */\nprivate _left: MdDrawer | null;\nprivate _right: MdDrawer | null;\n/**\n * Subscription to the Directionality change EventEmitter.\n */\nprivate _dirChangeSubscription = Subscription.EMPTY;\r\n\r\n  _contentMargins = new Subject<{left: number, right: number}>();\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\r\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\r\n    // properties to point to the proper start/end.\r\n    if (_dir != null) {\r\n      this._dirChangeSubscription = _dir.change.subscribe(() => this._validateDrawers());\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    startWith.call(this._drawers.changes, null).subscribe(() => {\r\n      this._validateDrawers();\r\n      this._drawers.forEach((drawer: MdDrawer) => {\r\n        this._watchDrawerToggle(drawer);\r\n        this._watchDrawerPosition(drawer);\r\n        this._watchDrawerMode(drawer);\r\n      });\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._dirChangeSubscription.unsubscribe();\r\n  }\n/**\n * Calls `open` of both start and end drawers\n * @return {?}\n */\nopen(): void {\r\n    this._drawers.forEach(drawer => drawer.open());\r\n  }\n/**\n * Calls `close` of both start and end drawers\n * @return {?}\n */\nclose(): void {\r\n    this._drawers.forEach(drawer => drawer.close());\r\n  }\n/**\n * Subscribes to drawer events in order to set a class on the main container element when the\rdrawer is open and the backdrop is visible. This ensures any overflow on the container element\ris properly hidden.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerToggle(drawer: MdDrawer): void {\r\n    takeUntil.call(drawer._animationStarted, this._drawers.changes).subscribe(() => {\r\n      // Set the transition class on the container so that the animations occur. This should not\r\n      // be set initially because animations should only be triggered via a change in state.\r\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-transition');\r\n      this._updateContentMargins();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    if (drawer.mode !== 'side') {\r\n      takeUntil.call(merge(drawer.onOpen, drawer.onClose), this._drawers.changes).subscribe(() =>\r\n          this._setContainerClass(drawer.opened));\r\n    }\r\n  }\n/**\n * Subscribes to drawer onPositionChanged event in order to re-validate drawers when the position\rchanges.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerPosition(drawer: MdDrawer): void {\r\n    if (!drawer) {\r\n      return;\r\n    }\r\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\r\n    // since both drawers may be swapping positions at the same time.\r\n    takeUntil.call(drawer.onPositionChanged, this._drawers.changes).subscribe(() => {\r\n      first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\r\n        this._validateDrawers();\r\n      });\r\n    });\r\n  }\n/**\n * Subscribes to changes in drawer mode so we can run change detection.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerMode(drawer: MdDrawer): void {\r\n    if (drawer) {\r\n      takeUntil.call(drawer._modeChanged, this._drawers.changes).subscribe(() => {\r\n        this._updateContentMargins();\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n  }\n/**\n * Toggles the 'mat-drawer-opened' class on the main 'md-drawer-container' element.\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setContainerClass(isAdd: boolean): void {\r\n    if (isAdd) {\r\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-opened');\r\n    } else {\r\n      this._renderer.removeClass(this._element.nativeElement, 'mat-drawer-opened');\r\n    }\r\n  }\n/**\n * Validate the state of the drawer children components.\n * @return {?}\n */\nprivate _validateDrawers() {\r\n    this._start = this._end = null;\r\n\r\n    // Ensure that we have at most one start and one end drawer.\r\n    this._drawers.forEach(drawer => {\r\n      if (drawer.position == 'end') {\r\n        if (this._end != null) {\r\n          throwMdDuplicatedDrawerError('end');\r\n        }\r\n        this._end = drawer;\r\n      } else {\r\n        if (this._start != null) {\r\n          throwMdDuplicatedDrawerError('start');\r\n        }\r\n        this._start = drawer;\r\n      }\r\n    });\r\n\r\n    this._right = this._left = null;\r\n\r\n    // Detect if we're LTR or RTL.\r\n    if (this._dir == null || this._dir.value == 'ltr') {\r\n      this._left = this._start;\r\n      this._right = this._end;\r\n    } else {\r\n      this._left = this._end;\r\n      this._right = this._start;\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\r\n    this.backdropClick.emit();\r\n    this._closeModalDrawer();\r\n  }\n/**\n * @return {?}\n */\n_closeModalDrawer() {\r\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\r\n    [this._start, this._end]\r\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\r\n      .forEach(drawer => /** @type {?} */(( drawer)).close());\r\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\r\n    return (this._isDrawerOpen(this._start) && /** @type {?} */(( this._start)).mode != 'side')\r\n        || (this._isDrawerOpen(this._end) && /** @type {?} */(( this._end)).mode != 'side');\r\n  }\n/**\n * @param {?} drawer\n * @return {?}\n */\nprivate _isDrawerOpen(drawer: MdDrawer | null): boolean {\r\n    return drawer != null && drawer.opened;\r\n  }\n/**\n * Recalculates and updates the inline styles for the content. Note that this should be used\rsparingly, because it causes a reflow.\n * @return {?}\n */\nprivate _updateContentMargins() {\r\n    // 1. For drawers in `over` mode, they don't affect the content.\r\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\r\n    //    left margin (for left drawer) or right margin (for right the drawer).\r\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\r\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\r\n    //    margin from the other side.\r\n\r\n    let /** @type {?} */ left = 0;\r\n    let /** @type {?} */ right = 0;\r\n\r\n    if (this._left && this._left.opened) {\r\n      if (this._left.mode == 'side') {\r\n        left += this._left._width;\r\n      } else if (this._left.mode == 'push') {\r\n        let /** @type {?} */ width = this._left._width;\r\n        left += width;\r\n        right -= width;\r\n      }\r\n    }\r\n\r\n    if (this._right && this._right.opened) {\r\n      if (this._right.mode == 'side') {\r\n        right += this._right._width;\r\n      } else if (this._right.mode == 'push') {\r\n        let /** @type {?} */ width = this._right._width;\r\n        right += width;\r\n        left -= width;\r\n      }\r\n    }\r\n\r\n    this._contentMargins.next({left, right});\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-drawer-container, mat-drawer-container',\r\n  templateUrl: 'drawer-container.html',\r\n  styleUrls: [\r\n    'drawer.css',\r\n    'drawer-transitions.css',\r\n  ],\r\n  host: {\r\n    'class': 'mat-drawer-container',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MdDrawer, ] },],\n'_content': [{ type: ContentChild, args: [MdDrawerContent, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdDrawerContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawerContainer.ctorParameters;\n/** @type {?} */\nMdDrawerContainer.propDecorators;\n/** @type {?} */\nMdDrawerContainer.prototype._drawers;\n/** @type {?} */\nMdDrawerContainer.prototype._content;\n/**\n * Event emitted when the drawer backdrop is clicked.\n * @type {?}\n */\nMdDrawerContainer.prototype.backdropClick;\n/**\n * The drawer at the start/end position, independent of direction.\n * @type {?}\n */\nMdDrawerContainer.prototype._start;\n/** @type {?} */\nMdDrawerContainer.prototype._end;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\rThey're used as aliases for the above to set the left/right style properly.\rIn LTR, _left == _start and _right == _end.\rIn RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdDrawerContainer.prototype._left;\n/** @type {?} */\nMdDrawerContainer.prototype._right;\n/**\n * Subscription to the Directionality change EventEmitter.\n * @type {?}\n */\nMdDrawerContainer.prototype._dirChangeSubscription;\n/** @type {?} */\nMdDrawerContainer.prototype._contentMargins;\n/** @type {?} */\nMdDrawerContainer.prototype._dir;\n/** @type {?} */\nMdDrawerContainer.prototype._element;\n/** @type {?} */\nMdDrawerContainer.prototype._renderer;\n/** @type {?} */\nMdDrawerContainer.prototype._ngZone;\n/** @type {?} */\nMdDrawerContainer.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy, ChangeDetectorRef,\r\n  Component, ContentChild,\r\n  ContentChildren, forwardRef, Inject, Input,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {MdDrawer, MdDrawerContainer, MdDrawerContent} from './drawer';\r\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nexport class MdSidenavContent extends MdDrawerContent {\n/**\n * @param {?} changeDetectorRef\n * @param {?} container\n */\nconstructor(\r\n      changeDetectorRef: ChangeDetectorRef,\r\n       container: MdSidenavContainer) {\r\n    super(changeDetectorRef, container);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-sidenav-content, mat-sidenav-content',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    'class': 'mat-drawer-content mat-sidenav-content',\r\n    '[style.marginLeft.px]': '_margins.left',\r\n    '[style.marginRight.px]': '_margins.right',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: MdSidenavContainer, decorators: [{ type: Inject, args: [forwardRef(() => MdSidenavContainer), ] }, ]},\n];\n}\n\nfunction MdSidenavContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContent.ctorParameters;\n}\n\nexport class MdSidenav extends MdDrawer {\n/**\n * Whether the sidenav is fixed in the viewport.\n * @return {?}\n */\nget fixedInViewport() { return this._fixedInViewport; }\n/**\n * @param {?} value\n * @return {?}\n */\nset fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\nprivate _fixedInViewport = false;\n/**\n * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\rmode.\n * @return {?}\n */\nget fixedTopGap() { return this._fixedTopGap; }\n/**\n * @param {?} value\n * @return {?}\n */\nset fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\nprivate _fixedTopGap = 0;\n/**\n * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\rfixed mode.\n * @return {?}\n */\nget fixedBottomGap() { return this._fixedBottomGap; }\n/**\n * @param {?} value\n * @return {?}\n */\nset fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\nprivate _fixedBottomGap = 0;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-sidenav, mat-sidenav',\r\n  template: '<ng-content></ng-content>',\r\n  animations: [\r\n    trigger('transform', [\r\n      state('open, open-instant', style({\r\n        transform: 'translate3d(0, 0, 0)',\r\n        visibility: 'visible',\r\n      })),\r\n      state('void', style({\r\n        visibility: 'hidden',\r\n      })),\r\n      transition('void => open-instant', animate('0ms')),\r\n      transition('void <=> open, open-instant => void',\r\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\r\n    ])\r\n  ],\r\n  host: {\r\n    'class': 'mat-drawer mat-sidenav',\r\n    'tabIndex': '-1',\r\n    '[@transform]': '_animationState',\r\n    '(@transform.start)': '_onAnimationStart()',\r\n    '(@transform.done)': '_onAnimationEnd($event)',\r\n    '(keydown)': 'handleKeydown($event)',\r\n    // must prevent the browser from aligning text based on value\r\n    '[attr.align]': 'null',\r\n    '[class.mat-drawer-end]': 'position === \"end\"',\r\n    '[class.mat-drawer-over]': 'mode === \"over\"',\r\n    '[class.mat-drawer-push]': 'mode === \"push\"',\r\n    '[class.mat-drawer-side]': 'mode === \"side\"',\r\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\r\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\r\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fixedInViewport': [{ type: Input },],\n'fixedTopGap': [{ type: Input },],\n'fixedBottomGap': [{ type: Input },],\n};\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n/** @type {?} */\nMdSidenav.propDecorators;\n/** @type {?} */\nMdSidenav.prototype._fixedInViewport;\n/** @type {?} */\nMdSidenav.prototype._fixedTopGap;\n/** @type {?} */\nMdSidenav.prototype._fixedBottomGap;\n}\n\nexport class MdSidenavContainer extends MdDrawerContainer {\r\n   _drawers;\r\n\r\n   _content;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-sidenav-container, mat-sidenav-container',\r\n  templateUrl: 'sidenav-container.html',\r\n  styleUrls: [\r\n    'drawer.css',\r\n    'drawer-transitions.css',\r\n  ],\r\n  host: {\r\n    'class': 'mat-drawer-container mat-sidenav-container',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MdSidenav, ] },],\n'_content': [{ type: ContentChild, args: [MdSidenavContent, ] },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._drawers;\n/** @type {?} */\nMdSidenavContainer.prototype._content;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MdDrawer, MdDrawerContainer, MdDrawerContent} from './drawer';\r\nimport {MdSidenav, MdSidenavContainer, MdSidenavContent} from './sidenav';\nexport class MdSidenavModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CommonModule, MdCommonModule, A11yModule, OverlayModule],\r\n  exports: [\r\n    MdCommonModule,\r\n    MdDrawer,\r\n    MdDrawerContainer,\r\n    MdDrawerContent,\r\n    MdSidenav,\r\n    MdSidenavContainer,\r\n    MdSidenavContent,\r\n  ],\r\n  declarations: [\r\n    MdDrawer,\r\n    MdDrawerContainer,\r\n    MdDrawerContent,\r\n    MdSidenav,\r\n    MdSidenavContainer,\r\n    MdSidenavContent,\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSidenavModule,throwMdDuplicatedDrawerError,MdDrawerToggleResult,MdDrawerContent,MdDrawer,MdDrawerContainer,MdSidenavContent,MdSidenav,MdSidenavContainer,MatDrawerToggleResult,MatDrawer,MatDrawerContainer,MatSidenav,MatSidenavContainer,MatSidenavModule} from './public_api';\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\r\n\r\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\ran invalid Material prefix on a component.\r\\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\r\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\r\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\r\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\r\n  [mat-button],\r\n  [mat-fab],\r\n  [mat-icon-button],\r\n  [mat-mini-fab],\r\n  [mat-raised-button],\r\n  [matCardSubtitle],\r\n  [matCardTitle],\r\n  [matCellDef],\r\n  [matColumnDef],\r\n  [matDialogActions],\r\n  [matDialogClose],\r\n  [matDialogContent],\r\n  [matDialogTitle],\r\n  [matHeaderCellDef],\r\n  [matHeaderRowDef],\r\n  [matLine],\r\n  [matRowDef],\r\n  [matStepLabel],\r\n  [matStepperNext],\r\n  [matStepperPrevious],\r\n  [matTabLabel],\r\n  [matTabLink],\r\n  [matTabNav],\r\n  [matTooltip],\r\n  [matInput],\r\n  [matPrefix],\r\n  [matSuffix],\r\n  mat-autocomplete,\r\n  mat-button-toggle,\r\n  mat-button-toggle,\r\n  mat-button-toggle-group,\r\n  mat-card,\r\n  mat-card-actions,\r\n  mat-card-content,\r\n  mat-card-footer,\r\n  mat-card-header,\r\n  mat-card-subtitle,\r\n  mat-card-title,\r\n  mat-card-title-group,\r\n  mat-cell,\r\n  mat-checkbox,\r\n  mat-chip,\r\n  mat-dialog-actions,\r\n  mat-dialog-container,\r\n  mat-dialog-content,\r\n  mat-divider,\r\n  mat-error,\r\n  mat-grid-list,\r\n  mat-grid-tile,\r\n  mat-grid-tile-footer,\r\n  mat-grid-tile-header,\r\n  mat-header-cell,\r\n  mat-header-row,\r\n  mat-hint,\r\n  mat-horizontal-stepper,\r\n  mat-icon,\r\n  mat-input-container,\r\n  mat-form-field,\r\n  mat-list,\r\n  mat-list-item,\r\n  mat-menu,\r\n  mat-nav-list,\r\n  mat-option,\r\n  mat-placeholder,\r\n  mat-progress-bar,\r\n  mat-pseudo-checkbox,\r\n  mat-radio-button,\r\n  mat-radio-group,\r\n  mat-row,\r\n  mat-select,\r\n  mat-sidenav,\r\n  mat-sidenav-container,\r\n  mat-slider,\r\n  mat-spinner,\r\n  mat-step,\r\n  mat-tab,\r\n  mat-table,\r\n  mat-tab-group,\r\n  mat-toolbar,\r\n  mat-vertical-stepper`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\r\n  [md-button],\r\n  [md-fab],\r\n  [md-icon-button],\r\n  [md-mini-fab],\r\n  [md-raised-button],\r\n  [mdCardSubtitle],\r\n  [mdCardTitle],\r\n  [mdCellDef],\r\n  [mdColumnDef],\r\n  [mdDialogActions],\r\n  [mdDialogClose],\r\n  [mdDialogContent],\r\n  [mdDialogTitle],\r\n  [mdHeaderCellDef],\r\n  [mdHeaderRowDef],\r\n  [mdLine],\r\n  [mdRowDef],\r\n  [mdStepLabel],\r\n  [mdStepperNext],\r\n  [mdStepperPrevious],\r\n  [mdTabLabel],\r\n  [mdTabLink],\r\n  [mdTabNav],\r\n  [mdTooltip],\r\n  [mdInput],\r\n  [mdPrefix],\r\n  [mdSuffix],\r\n  md-autocomplete,\r\n  md-button-toggle,\r\n  md-button-toggle,\r\n  md-button-toggle-group,\r\n  md-card,\r\n  md-card-actions,\r\n  md-card-content,\r\n  md-card-footer,\r\n  md-card-header,\r\n  md-card-subtitle,\r\n  md-card-title,\r\n  md-card-title-group,\r\n  md-cell,\r\n  md-checkbox,\r\n  md-chip,\r\n  md-dialog-actions,\r\n  md-dialog-container,\r\n  md-dialog-content,\r\n  md-divider,\r\n  md-error,\r\n  md-grid-list,\r\n  md-grid-tile,\r\n  md-grid-tile-footer,\r\n  md-grid-tile-header,\r\n  md-header-cell,\r\n  md-header-row,\r\n  md-hint,\r\n  md-horizontal-stepper,\r\n  md-icon,\r\n  md-input-container,\r\n  md-form-field,\r\n  md-list,\r\n  md-list-item,\r\n  md-menu,\r\n  md-nav-list,\r\n  md-option,\r\n  md-placeholder,\r\n  md-progress-bar,\r\n  md-pseudo-checkbox,\r\n  md-radio-button,\r\n  md-radio-group,\r\n  md-row,\r\n  md-select,\r\n  md-sidenav,\r\n  md-sidenav-container,\r\n  md-slider,\r\n  md-spinner,\r\n  md-step,\r\n  md-tab,\r\n  md-table,\r\n  md-tab-group,\r\n  md-toolbar,\r\n  md-vertical-stepper`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\r\n      isCompatibilityMode: boolean,\r\n    elementRef: ElementRef) {\r\n\r\n    if (!isCompatibilityMode) {\r\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\r\n      isCompatibilityMode: boolean,\r\n    elementRef: ElementRef) {\r\n\r\n    if (isCompatibilityMode) {\r\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\rwithout NoConflictStyleCompatibilityMode also being imported, it will throw an error if\rthere are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  declarations: [MatPrefixRejector, MdPrefixRejector],\r\n  exports: [MatPrefixRejector, MdPrefixRejector],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\rit will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  providers: [{\r\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\r\n  }],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\n/**\n * InjectionToken for datepicker that can be used to override default locale code.\n */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n/**\n * Provider for MAT_DATE_LOCALE injection token.\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * A stream that emits when the locale changes.\n * @return {?}\n */\nget localeChanges(): Observable<void> { return this._localeChanges; }\r\n  protected _localeChanges= new Subject<void>();\n/**\n * Gets the year component of the given date.\r\\@param date The date to extract the year from.\r\\@returns The year component.\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\r\\@param date The date to extract the month from.\r\\@returns The month component (0-indexed, 0 = January).\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\r\\@param date The date to extract the date of the month from.\r\\@returns The month component (1-indexed, 1 = first of month).\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\r\\@param date The date to extract the day of the week from.\r\\@returns The month component (0-indexed, 0 = Sunday).\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\r\\@param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\r\\@returns An ordered list of all month names, starting with January.\n * @abstract\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\r\\@returns An ordered list of all date of the month names, starting with '1'.\n * @abstract\n * @return {?}\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\r\\@param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\r\\@returns An ordered list of all weekday names, starting with Sunday.\n * @abstract\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\r\\@param date The date to get the year name for.\r\\@returns The name of the given year (e.g. '2017').\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\r\\@returns The first day of the week (0-indexed, 0 = Sunday).\n * @abstract\n * @return {?}\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\r\\@param date The date whose month should be checked.\r\\@returns The number of days in the month of the given date.\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\r\\@param date The date to clone\r\\@returns A new date equal to the given date.\n * @abstract\n * @param {?} date\n * @return {?}\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\rmonth and date.\r\\@param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\r\\@param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\r\\@param date The date of month of the date. Must be an integer 1 - length of the given month.\r\\@returns The new date, or null if invalid.\n * @abstract\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\r\\@returns Today's date.\n * @abstract\n * @return {?}\n */\ntoday() {}\n/**\n * Parses a date from a value.\r\\@param value The value to parse.\r\\@param parseFormat The expected format of the value being parsed\r    (type is implementation-dependent).\r\\@returns The parsed date.\n * @abstract\n * @param {?} value\n * @param {?} parseFormat\n * @return {?}\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\r\\@param date The value to format.\r\\@param displayFormat The format to use to display the date as a string.\r\\@returns The formatted date string.\n * @abstract\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\rcalendar for each year and then finding the closest date in the new month. For example when\radding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\r\\@param date The date to add years to.\r\\@param years The number of years to add (may be negative).\r\\@returns A new date equal to the given one with the specified number of years added.\n * @abstract\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\rcalendar for each month and then finding the closest date in the new month. For example when\radding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\r\\@param date The date to add months to.\r\\@param months The number of months to add (may be negative).\r\\@returns A new date equal to the given one with the specified number of months added.\n * @abstract\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\rcalendar for each day.\r\\@param date The date to add days to.\r\\@param days The number of days to add (may be negative).\r\\@returns A new date equal to the given one with the specified number of days added.\n * @abstract\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\r\\@param date The date to get the ISO date string for.\r\\@returns The ISO date string date string.\n * @abstract\n * @param {?} date\n * @return {?}\n */\ntoIso8601(date: D) {}\n/**\n * Creates a date from an RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339).\r\\@param iso8601String The ISO date string to create a date from\r\\@returns The date created from the ISO date string.\n * @abstract\n * @param {?} iso8601String\n * @return {?}\n */\nfromIso8601(iso8601String: string) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\r\\@param obj The object to check\r\\@returns Whether the object is a date instance.\n * @abstract\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\r\\@param date The date to check.\r\\@returns Whether the date is valid.\n * @abstract\n * @param {?} date\n * @return {?}\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\r\\@param locale The new locale.\n * @param {?} locale\n * @return {?}\n */\nsetLocale(locale: any) {\r\n    this.locale = locale;\r\n    this._localeChanges.next();\r\n  }\n/**\n * Compares two dates.\r\\@param first The first date to compare.\r\\@param second The second date to compare.\r\\@returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r    a number greater than 0 if the first date is later.\n * @param {?} first\n * @param {?} second\n * @return {?}\n */\ncompareDate(first: D, second: D): number {\r\n    return this.getYear(first) - this.getYear(second) ||\r\n        this.getMonth(first) - this.getMonth(second) ||\r\n        this.getDate(first) - this.getDate(second);\r\n  }\n/**\n * Checks if two dates are equal.\r\\@param first The first date to check.\r\\@param second The second date to check.\r\\@returns {boolean} Whether the two dates are equal.\r    Null dates are considered equal to other null dates.\n * @param {?} first\n * @param {?} second\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\r\n    return first && second ? !this.compareDate(first, second) : first == second;\r\n  }\n/**\n * Clamp the given date between min and max dates.\r\\@param date The date to clamp.\r\\@param min The minimum value to allow. If null or omitted no min is enforced.\r\\@param max The maximum value to allow. If null or omitted no max is enforced.\r\\@returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\r    otherwise `date`.\n * @param {?} date\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\r\n    if (min && this.compareDate(date, min) < 0) {\r\n      return min;\r\n    }\r\n    if (max && this.compareDate(date, max) > 0) {\r\n      return max;\r\n    }\r\n    return date;\r\n  }\r\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n/** @type {?} */\nDateAdapter.prototype._localeChanges;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ElementRef, NgZone} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\r\n\r\nexport type RippleConfig = {\r\n  color?: string;\r\n  centered?: boolean;\r\n  radius?: number;\r\n  speedFactor?: number;\r\n  persistent?: boolean;\r\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\rThe constructor takes a reference to the ripple directive's host element and a map of DOM\revent handlers to be installed on the element that triggers ripple animations.\rThis will eventually become a custom renderer once Angular support exists.\r\\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\r\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\r\n      platform: Platform) {\r\n    // Only do anything if we're on the browser.\r\n    if (platform.isBrowser) {\r\n      this._containerElement = elementRef.nativeElement;\r\n\r\n      // Specify events which need to be registered on the trigger.\r\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\r\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\r\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\r\n\r\n      // By default use the host element as trigger element.\r\n      this.setTriggerElement(this._containerElement);\r\n    }\r\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\r\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\r\n\r\n    if (config.centered) {\r\n      pageX = containerRect.left + containerRect.width / 2;\r\n      pageY = containerRect.top + containerRect.height / 2;\r\n    } else {\r\n      // Subtract scroll values from the coordinates because calculations below\r\n      // are always relative to the viewport rectangle.\r\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\r\n      pageX -= scrollPosition.left;\r\n      pageY -= scrollPosition.top;\r\n    }\r\n\r\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\r\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\r\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\r\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\r\n\r\n    let /** @type {?} */ ripple = document.createElement('div');\r\n    ripple.classList.add('mat-ripple-element');\r\n\r\n    ripple.style.left = `${offsetX - radius}px`;\r\n    ripple.style.top = `${offsetY - radius}px`;\r\n    ripple.style.height = `${radius * 2}px`;\r\n    ripple.style.width = `${radius * 2}px`;\r\n\r\n    // If the color is not set, the default CSS color will be used.\r\n    ripple.style.backgroundColor = config.color || null;\r\n    ripple.style.transitionDuration = `${duration}ms`;\r\n\r\n    this._containerElement.appendChild(ripple);\r\n\r\n    // By default the browser does not recalculate the styles of dynamically created\r\n    // ripple elements. This is critical because then the `scale` would not animate properly.\r\n    enforceStyleRecalculation(ripple);\r\n\r\n    ripple.style.transform = 'scale(1)';\r\n\r\n    // Exposed reference to the ripple that will be returned.\r\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\r\n\r\n    rippleRef.state = RippleState.FADING_IN;\r\n\r\n    // Add the ripple reference to the list of all active ripples.\r\n    this._activeRipples.add(rippleRef);\r\n\r\n    // Wait for the ripple element to be completely faded in.\r\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\r\n    this.runTimeoutOutsideZone(() => {\r\n      rippleRef.state = RippleState.VISIBLE;\r\n\r\n      if (!config.persistent && !this._isMousedown) {\r\n        rippleRef.fadeOut();\r\n      }\r\n    }, duration);\r\n\r\n    return rippleRef;\r\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\r\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\r\n    if (!this._activeRipples.delete(rippleRef)) {\r\n      return;\r\n    }\r\n\r\n    let /** @type {?} */ rippleEl = rippleRef.element;\r\n\r\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\r\n    rippleEl.style.opacity = '0';\r\n\r\n    rippleRef.state = RippleState.FADING_OUT;\r\n\r\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\r\n    this.runTimeoutOutsideZone(() => {\r\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\r\n      rippleEl.parentNode)).removeChild(rippleEl);\r\n    }, RIPPLE_FADE_OUT_DURATION);\r\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\r\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\r\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\r\n    // Remove all previously register event listeners from the trigger element.\r\n    if (this._triggerElement) {\r\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\r\n        this._triggerElement)).removeEventListener(type, fn);\r\n      });\r\n    }\r\n\r\n    if (element) {\r\n      // If the element is not null, register all event listeners on the trigger element.\r\n      this._ngZone.runOutsideAngular(() => {\r\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\r\n      });\r\n    }\r\n\r\n    this._triggerElement = element;\r\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\r\n    if (!this.rippleDisabled) {\r\n      this._isMousedown = true;\r\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\r\n    }\r\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\r\n    this._isMousedown = false;\r\n\r\n    // Fade-out all ripples that are completely visible and not persistent.\r\n    this._activeRipples.forEach(ripple => {\r\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\r\n        ripple.fadeOut();\r\n      }\r\n    });\r\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\r\n    if (this._isMousedown) {\r\n      this.onMouseup();\r\n    }\r\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\r\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\r\n  }\r\n\r\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\r\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\r\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\r\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\r\n  window.getComputedStyle(element).getPropertyValue('opacity');\r\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\r\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\r\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\r\n  return Math.sqrt(distX * distX + distY * distY);\r\n}\r\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\r\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\r\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\r\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\r\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\r\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\r\n  static COMPLEX = '375ms';\r\n  static ENTERING = '225ms';\r\n  static EXITING = '195ms';\r\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Constructor} from './constructor';\r\nimport {ElementRef, Renderer2} from '@angular/core';\r\n\r\n/** @docs-private */\r\nexport interface CanColor {\r\n  color: ThemePalette;\r\n}\r\n\r\n/** @docs-private */\r\nexport interface HasRenderer {\r\n  _renderer: Renderer2;\r\n  _elementRef: ElementRef;\r\n}\r\n\r\n/** Possible color palette values.  */\r\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\r\n    : Constructor<CanColor> & T {\r\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\r\n      const /** @type {?} */ colorPalette = value || defaultColor;\r\n\r\n      if (colorPalette !== this._color) {\r\n        if (this._color) {\r\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\r\n        }\r\n        if (colorPalette) {\r\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\r\n        }\r\n\r\n        this._color = colorPalette;\r\n      }\r\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\r\n      super(...args);\r\n\r\n      // Set the default color that can be specified from the mixin.\r\n      this.color = defaultColor;\r\n    }\r\n  };\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Constructor} from './constructor';\r\n\r\n/** @docs-private */\r\nexport interface CanDisableRipple {\r\n  disableRipple: boolean;\r\n}\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\r\n    : Constructor<CanDisableRipple> & T {\r\n  return class extends base {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect is disabled or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Constructor} from './constructor';\r\nimport {CanDisable} from './disabled';\r\n\r\n/** @docs-private */\r\nexport interface HasTabIndex {\r\n  tabIndex: number;\r\n}\n/**\n * Mixin to augment a directive with a `tabIndex` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultTabIndex\n * @return {?}\n */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\r\n    : Constructor<HasTabIndex> & T {\r\n  return class extends base {\nprivate _tabIndex: number = defaultTabIndex;\n/**\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\r\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\r\n      this._tabIndex = value != null ? value : defaultTabIndex;\r\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\r\n      super(...args);\r\n    }\r\n  };\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\r\n\r\n\r\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\r\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\rIntended to be consumed as an Angular service.\rThis service is needed because native radio change events are only fired on the item currently\rbeing selected, and we still need to uncheck the previous selection.\r\rThis service does not *store* any IDs and names because they may change at any time, so it is\rless error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\r\\@param id ID of the item.\r\\@param name Name of the item.\n * @param {?} id\n * @param {?} name\n * @return {?}\n */\nnotify(id: string, name: string) {\r\n    for (let /** @type {?} */ listener of this._listeners) {\r\n      listener(id, name);\r\n    }\r\n  }\n/**\n * Listen for future changes to item selection.\r\\@return Function used to deregister listener\r\n * @param {?} listener\n * @return {?}\n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\r\n    this._listeners.push(listener);\r\n    return () => {\r\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\r\n        return listener !== registered;\r\n      });\r\n    };\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\r\n    parentDispatcher: UniqueSelectionDispatcher) {\r\n  return parentDispatcher || new UniqueSelectionDispatcher();\r\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\r\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\r\n  provide: UniqueSelectionDispatcher,\r\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\r\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\r\n};\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\rsimilar to Object.assign.\r\r\\@param dest The object which will have properties copied to it.\r\\@param sources The source objects from which properties will be copied.\n * @param {?} dest\n * @param {...?} sources\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\r\n  if (dest == null) {\r\n    throw TypeError('Cannot convert undefined or null to object');\r\n  }\r\n\r\n  for (let /** @type {?} */ source of sources) {\r\n    if (source != null) {\r\n      for (let /** @type {?} */ key in source) {\r\n        if (source.hasOwnProperty(key)) {\r\n          dest[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return dest;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Inject, Injectable, Optional} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\r\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\r\n  'long': [\r\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n    'October', 'November', 'December'\r\n  ],\r\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\r(https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\rbecause the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\r\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const /** @type {?} */ valuesArray = Array(length);\r\n  for (let /** @type {?} */ i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} matDateLocale\n */\nconstructor(  matDateLocale: string) {\r\n    super();\r\n    super.setLocale(matDateLocale);\r\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\rWithout this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\rthe result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\rwill produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\r\n    return date.getFullYear();\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\r\n    return date.getMonth();\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\r\n    return date.getDate();\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\r\n    return date.getDay();\r\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\r\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\r\n    }\r\n    return DEFAULT_MONTH_NAMES[style];\r\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\r\n      return range(31, i => this._stripDirectionalityCharacters(\r\n          dtf.format(new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DATE_NAMES;\r\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\r\n      return range(7, i => this._stripDirectionalityCharacters(\r\n          dtf.format(new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\r\n      return this._stripDirectionalityCharacters(dtf.format(date));\r\n    }\r\n    return String(this.getYear(date));\r\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\r\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n    return 0;\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\r\n    return this.getDate(this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date) + 1, 0));\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\r\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\r\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\r\n\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() != month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\r\n    return new Date();\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\r\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n    // parameters.\r\n    if (typeof value == 'number') {\r\n      return new Date(value);\r\n    }\r\n    return value ? new Date(Date.parse(value)) : null;\r\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\r\n    if (!this.isValid(date)) {\r\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n    }\r\n    if (SUPPORTS_INTL_API) {\r\n      if (this.useUtcForDisplay) {\r\n        date = new Date(Date.UTC(\r\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\r\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\r\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\r\n      }\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n      return this._stripDirectionalityCharacters(dtf.format(date));\r\n    }\r\n    return this._stripDirectionalityCharacters(date.toDateString());\r\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\r\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n    }\r\n\r\n    return newDate;\r\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ntoIso8601(date: Date): string {\r\n    return [\r\n      date.getUTCFullYear(),\r\n      this._2digit(date.getUTCMonth() + 1),\r\n      this._2digit(date.getUTCDate())\r\n    ].join('-');\r\n  }\n/**\n * @param {?} iso8601String\n * @return {?}\n */\nfromIso8601(iso8601String: string): Date | null {\r\n    // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n    // string is the right format first.\r\n    if (ISO_8601_REGEX.test(iso8601String)) {\r\n      let /** @type {?} */ d = new Date(iso8601String);\r\n      if (this.isValid(d)) {\r\n        return d;\r\n      }\r\n    }\r\n    return null;\r\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\r\n    return obj instanceof Date;\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\r\n    return !isNaN(date.getTime());\r\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\r\n    let /** @type {?} */ result = new Date(year, month, date);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\n/**\n * Pads a number to make it two digits.\r\\@param n The number to pad.\r\\@returns The padded number.\n * @param {?} n\n * @return {?}\n */\nprivate _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\rother browsers do not. We remove them to make output consistent and because they interfere with\rdate parsing.\r\\@param str The string to strip direction characters from.\r\\@returns The stripped string.\n * @param {?} str\n * @return {?}\n */\nprivate _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, '');\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\rWithout this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\rthe result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\rwill produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {MdDateFormats} from './date-formats';\r\n\r\n\r\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\r\n  parse: {\r\n    dateInput: null,\r\n  },\r\n  display: {\r\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\r\n    monthYearLabel: {year: 'numeric', month: 'short'},\r\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\r\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\r\nimport {NativeDateAdapter} from './native-date-adapter';\r\nimport {MD_DATE_FORMATS} from './date-formats';\r\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\r\n\r\nexport {MAT_DATE_LOCALE,MAT_DATE_LOCALE_PROVIDER,DateAdapter} from './date-adapter';\r\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\r\nexport {NativeDateAdapter} from './native-date-adapter';\r\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  providers: [\r\n    {provide: DateAdapter, useClass: NativeDateAdapter},\r\n    MAT_DATE_LOCALE_PROVIDER\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [NativeDateModule],\r\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {InjectionToken} from '@angular/core';\r\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MD_ERROR_GLOBAL_OPTIONS = new InjectionToken<ErrorOptions>('md-error-global-options');\r\n\r\nexport type ErrorStateMatcher =\r\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\r\n\r\nexport interface ErrorOptions {\r\n  errorStateMatcher?: ErrorStateMatcher;\r\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\r\n  const /** @type {?} */ isSubmitted = form && form.submitted;\r\n  return !!(control.invalid && (control.touched || isSubmitted));\r\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\r\n    form: FormGroupDirective | NgForm) {\r\n  const /** @type {?} */ isSubmitted = form && form.submitted;\r\n  return !!(control.invalid && (control.dirty || isSubmitted));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable, isDevMode} from '@angular/core';\r\nimport {HammerGestureConfig} from '@angular/platform-browser';\r\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\r\n\r\n  /* List of new event names to add to the gesture support list */\r\n  events: string[] = this._hammer ? [\r\n    'longpress',\r\n    'slide',\r\n    'slidestart',\r\n    'slideend',\r\n    'slideright',\r\n    'slideleft'\r\n  ] : [];\nconstructor() {\r\n    super();\r\n\r\n    if (!this._hammer && isDevMode()) {\r\n      console.warn(\r\n        'Could not find HammerJS. Certain Angular Material ' +\r\n        'components may not work correctly.'\r\n      );\r\n    }\r\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\r\rOur gesture names come from the Material Design gestures spec:\rhttps://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\r\rMore information on default recognizers can be found in Hammer docs:\rhttp://hammerjs.github.io/recognizer-pan/\rhttp://hammerjs.github.io/recognizer-press/\r\r\\@param element Element to which to assign the new HammerJS gestures.\r\\@returns Newly-created HammerJS instance.\n * @param {?} element\n * @return {?}\n */\nbuildHammer(element: HTMLElement): HammerInstance {\r\n    const /** @type {?} */ mc = new this._hammer(element);\r\n\r\n    // Default Hammer Recognizers.\r\n    let /** @type {?} */ pan = new this._hammer.Pan();\r\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\r\n    let /** @type {?} */ press = new this._hammer.Press();\r\n\r\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\r\n    // Otherwise the previous `recognizeWith` will be dropped.\r\n    // TODO: Confirm threshold numbers with Material Design UX Team\r\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\r\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\r\n\r\n    // Overwrite the default `pan` event to use the swipe event.\r\n    pan.recognizeWith(swipe);\r\n\r\n    // Add customized gestures to Hammer manager\r\n    mc.add([swipe, press, pan, slide, longpress]);\r\n\r\n    return /** @type {?} */(( mc as HammerInstance));\r\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\r\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\r\n\r\n    inheritances.push(base);\r\n    inheritances.forEach(item => recognizer.recognizeWith(item));\r\n\r\n    return recognizer;\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  NgModule,\r\n  Directive,\r\n  Renderer2,\r\n  ElementRef,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\rLine elements can be extracted with a \\@ContentChildren(MdLine) query, then\rcounted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\r\n  host: {'class': 'mat-line'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\r\\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\r\n    this._setLineClass(this._lines.length);\r\n\r\n    this._lines.changes.subscribe(() => {\r\n      this._setLineClass(this._lines.length);\r\n    });\r\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\r\n    this._resetClasses();\r\n    if (count === 2 || count === 3) {\r\n      this._setClass(`mat-${count}-line`, true);\r\n    } else if (count > 3) {\r\n      this._setClass(`mat-multi-line`, true);\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\r\n    this._setClass('mat-2-line', false);\r\n    this._setClass('mat-3-line', false);\r\n    this._setClass('mat-multi-line', false);\r\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\r\n    if (isAdd) {\r\n      this._renderer.addClass(this._element.nativeElement, className);\r\n    } else {\r\n      this._renderer.removeClass(this._element.nativeElement, className);\r\n    }\r\n  }\r\n\r\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule],\r\n  exports: [MdLine, MdCommonModule],\r\n  declarations: [MdLine],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\r\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\r\n    this._renderer.fadeOutRipple(this);\r\n  }\r\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  Inject,\r\n  NgZone,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n  InjectionToken,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\r\nimport {RippleRef} from './ripple-ref';\r\n\r\nexport interface RippleGlobalOptions {\r\n  disabled?: boolean;\r\n  baseSpeedFactor?: number;\r\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\r\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\r\n\r\n  /**\r\n   * The element that triggers the ripple when click events are received. Defaults to the\r\n   * directive's host element.\r\n   */\r\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\r\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\r\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\rthan originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\rby using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\rwill be the distance from the center of the ripple to the furthest corner of the host element's\rbounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\rsetting it to 0.5 will cause the animations to take twice as long.\rA changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * @return {?}\n */\nget _matRippleTrigger() { return this.trigger; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleTrigger(v) { this.trigger = v; }\n/**\n * @return {?}\n */\nget _matRippleCentered() { return this.centered; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleCentered(v) { this.centered = v; }\n/**\n * @return {?}\n */\nget _matRippleDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matRippleRadius() { return this.radius; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleRadius(v) { this.radius = v; }\n/**\n * @return {?}\n */\nget _matRippleSpeedFactor() { return this.speedFactor; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleSpeedFactor(v) { this.speedFactor = v; }\n/**\n * @return {?}\n */\nget _matRippleColor() { return this.color; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleColor(v) { this.color = v; }\n/**\n * @return {?}\n */\nget _matRippleUnbounded() { return this.unbounded; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleUnbounded(v) { this.unbounded = v; }\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\r\n    elementRef: ElementRef,\r\n    ngZone: NgZone,\r\n    ruler: ViewportRuler,\r\n    platform: Platform,\r\n      globalOptions: RippleGlobalOptions\r\n  ) {\r\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\r\n    this._globalOptions = globalOptions ? globalOptions : {};\r\n\r\n    this._updateRippleRenderer();\r\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    if ((changes['trigger'] || changes['_matRippleTrigger']) && this.trigger) {\r\n      this._rippleRenderer.setTriggerElement(this.trigger);\r\n    }\r\n\r\n    this._updateRippleRenderer();\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    // Set the trigger element to null to cleanup all listeners.\r\n    this._rippleRenderer.setTriggerElement(null);\r\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\r\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\r\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\r\n    this._rippleRenderer.fadeOutAll();\r\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\r\n    return {\r\n      centered: this.centered,\r\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\r\n      radius: this.radius,\r\n      color: this.color\r\n    };\r\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\n_updateRippleRenderer() {\r\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\r\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\r\n  exportAs: 'mdRipple, matRipple',\r\n  host: {\r\n    'class': 'mat-ripple',\r\n    '[class.mat-ripple-unbounded]': 'unbounded'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n'_matRippleTrigger': [{ type: Input, args: ['matRippleTrigger', ] },],\n'_matRippleCentered': [{ type: Input, args: ['matRippleCentered', ] },],\n'_matRippleDisabled': [{ type: Input, args: ['matRippleDisabled', ] },],\n'_matRippleRadius': [{ type: Input, args: ['matRippleRadius', ] },],\n'_matRippleSpeedFactor': [{ type: Input, args: ['matRippleSpeedFactor', ] },],\n'_matRippleColor': [{ type: Input, args: ['matRippleColor', ] },],\n'_matRippleUnbounded': [{ type: Input, args: ['matRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\rthan originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\rby using the `launch()` method.\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\rwill be the distance from the center of the ripple to the furthest corner of the host element's\rbounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\rsetting it to 0.5 will cause the animations to take twice as long.\rA changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MdCommonModule} from '../common-behaviors/common-module';\r\nimport {MdRipple} from './ripple';\r\n\r\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\r\nexport {RippleRef, RippleState} from './ripple-ref';\r\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\r\n  exports: [MdRipple, MdCommonModule],\r\n  declarations: [MdRipple],\r\n  providers: [VIEWPORT_RULER_PROVIDER],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\r\n\r\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\rMeant to be used when the checkbox is purely decorative and a large number of them will be\rincluded, such as for the options in a multi-select. Uses no SVGs or complex animations.\rNote that theming is meant to be handled by the parent element, e.g.\r`mat-primary .mat-pseudo-checkbox`.\r\rNote that this component will be completely invisible to screen-reader users. This is *not*\rinterchangeable with <md-checkbox> and should *not* be used if the user would directly interact\rwith the checkbox. The pseudo-checkbox should only be used as an implementation detail of\rmore complex components that appropriately handle selected / checked state.\r\\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\r\n  styleUrls: ['pseudo-checkbox.css'],\r\n  template: '',\r\n  host: {\r\n    'class': 'mat-pseudo-checkbox',\r\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\r\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\r\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdPseudoCheckboxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  exports: [MdPseudoCheckbox],\r\n  declarations: [MdPseudoCheckbox]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPseudoCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckboxModule.ctorParameters;\n}\n\r\n\r\n\r\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\r\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdOptgroupBase { }\r\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\r\n\r\n// Counter for unique group ids.\r\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-optgroup, mat-optgroup',\r\n  templateUrl: 'optgroup.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled'],\r\n  host: {\r\n    'class': 'mat-optgroup',\r\n    'role': 'group',\r\n    '[class.mat-optgroup-disabled]': 'disabled',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-labelledby]': '_labelId',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {MATERIAL_COMPATIBILITY_MODE} from '../compatibility/compatibility';\r\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\rthe component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\r\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\r\n    if (value !== this._multiple) {\r\n      this._multiple = value;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\r\n    this._disableRipple = value;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MdOptgroup) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\rAn active option displays styles as if it is focused, but the\rfocus is actually retained somewhere else. This comes in handy\rfor components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\r\n    return this._active;\r\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\rselect's trigger.\n * @return {?}\n */\nget viewValue(): string {\r\n    // TODO(kara): Add input property alternative for node envs.\r\n    return (this._getHostElement().textContent || '').trim();\r\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\r\n    this._selected = true;\r\n    this._changeDetectorRef.markForCheck();\r\n    this._emitSelectionChangeEvent();\r\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\r\n    this._selected = false;\r\n    this._changeDetectorRef.markForCheck();\r\n    this._emitSelectionChangeEvent();\r\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\r\n    const /** @type {?} */ element = this._getHostElement();\r\n\r\n    if (typeof element.focus === 'function') {\r\n      element.focus();\r\n    }\r\n  }\n/**\n * This method sets display styles on the option to make it appear\ractive. This is used by the ActiveDescendantKeyManager so key\revents will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\r\n    if (!this._active) {\r\n      this._active = true;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * This method removes display styles on the option that made it appear\ractive. This is used by the ActiveDescendantKeyManager so key\revents will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\r\n    if (this._active) {\r\n      this._active = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * Gets the label to be used when determining whether the option should be focused.\n * @return {?}\n */\ngetLabel(): string {\r\n    return this.viewValue;\r\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\r\n      this._selectViaInteraction();\r\n\r\n      // Prevent the page from scrolling down and form submits.\r\n      event.preventDefault();\r\n    }\r\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\rdetermine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\r\n    if (!this.disabled) {\r\n      this._selected = this.multiple ? !this._selected : true;\r\n      this._changeDetectorRef.markForCheck();\r\n      this._emitSelectionChangeEvent(true);\r\n    }\r\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\r\n    return this.disabled ? '-1' : '0';\r\n  }\n/**\n * Gets the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\r\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\r\n  }\n/**\n * Counts the amount of option group labels that precede the specified option.\r\\@param optionIndex Index of the option at which to start counting.\r\\@param options Flat list of all of the options.\r\\@param optionGroups Flat list of all of the option groups.\n * @param {?} optionIndex\n * @param {?} options\n * @param {?} optionGroups\n * @return {?}\n */\nstatic countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MdOption>,\r\n    optionGroups: QueryList<MdOptgroup>): number {\r\n\r\n    if (optionGroups.length) {\r\n      let /** @type {?} */ optionsArray = options.toArray();\r\n      let /** @type {?} */ groups = optionGroups.toArray();\r\n      let /** @type {?} */ groupCounter = 0;\r\n\r\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\r\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\r\n          groupCounter++;\r\n        }\r\n      }\r\n\r\n      return groupCounter;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-option, mat-option',\r\n  host: {\r\n    'role': 'option',\r\n    '[attr.tabindex]': '_getTabIndex()',\r\n    '[class.mat-selected]': 'selected',\r\n    '[class.mat-option-multiple]': 'multiple',\r\n    '[class.mat-active]': 'active',\r\n    '[id]': 'id',\r\n    '[attr.aria-selected]': 'selected.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[class.mat-option-disabled]': 'disabled',\r\n    '(click)': '_selectViaInteraction()',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    'class': 'mat-option',\r\n  },\r\n  templateUrl: 'option.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/** @type {?} */\nMdOption.prototype._multiple;\n/** @type {?} */\nMdOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._changeDetectorRef;\n/** @type {?} */\nMdOption.prototype.group;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MdRippleModule} from '../ripple/index';\r\nimport {MdPseudoCheckboxModule} from '../selection/index';\r\nimport {MdOption} from './option';\r\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdRippleModule, CommonModule, MdPseudoCheckboxModule],\r\n  exports: [MdOption, MdOptgroup],\r\n  declarations: [MdOption, MdOptgroup]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\r\n\r\n\r\nexport {MdOptionSelectionChange,MdOption} from './option';\r\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\r\\@param element\r\\@param transformValue\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\r\n  // It's important to trim the result, because the browser will ignore the set operation\r\n  // if the string contains only whitespace.\r\n  let /** @type {?} */ value = transformValue.trim();\r\n\r\n  element.style.transform = value;\r\n  element.style.webkitTransform = value;\r\n}\r\n"],"names":["this","_disableClose","coerceBooleanProperty","value","enumerable","configurable","Object","defineProperty","MdDrawer","prototype","_restoreFocus","activeEl","_doc","activeElement","_elementRef","nativeElement","contains","_elementFocusedBeforeDrawerWasOpened","HTMLElement","ngAfterContentInit","_focusTrap","_focusTrapFactory","create","ngOnDestroy","set","v","toggle","open","close","isOpen","_this","opened","_isAnimating","handleKeydown","event","keyCode","ESCAPE","disableClose","_onAnimationStart","_onAnimationEnd","fromState","toState","onOpen","emit","MdDrawerToggleResult","onClose","Promise","resolve","then","_currentTogglePromise","get","offsetWidth","template","animations","state","style","transform","visibility","transition","animate","host","class","[@transform]","type","undefined","decorators","Optional","Inject","args","DOCUMENT","align","Input","mode","Output","onPositionChanged","onAlignChanged","_dir","_element","_renderer","_ngZone","_changeDetectorRef","MdDrawerContainer","startWith","call","_drawers","changes","subscribe","_validateDrawers","addClass","_updateContentMargins","markForCheck","drawer","_watchDrawerPosition","takeUntil","first","onMicrotaskEmpty","asObservable","_watchDrawerMode","_modeChanged","isAdd","removeClass","_end","_left","_start","_right","_onBackdropClicked","backdropClick","_closeModalDrawer","filter","forEach","_isShowingBackdrop","_isDrawerOpen","left","right","width","_width","_contentMargins","next","styles","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","MdSidenavContent","ctorParameters","ChangeDetectorRef","MdSidenavContainer","forwardRef","MdSidenav","_super","apply","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","tslib_1.__extends","coerceNumberProperty","Component","selector","tabIndex","(@transform.start)","(@transform.done)","(keydown)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[style.top.px]","__extends","d","b","__","constructor","extendStatics","nodeName","toLowerCase","_i","length","key","source","valuesArray","window","getComputedStyle","element","getPropertyValue","distanceToFurthestCorner","x","y","rect","distX","Math","max","abs","distY","top","bottom","sqrt","throwMdDuplicatedDrawerError","position","Error","setPrototypeOf","__proto__","Array","p","hasOwnProperty","AnimationCurves","STANDARD_CURVE","DECELERATION_CURVE","AnimationDurations","NoConflictStyleCompatibilityMode","MATERIAL_SANITY_CHECKS","UniqueSelectionDispatcher","listen","listener","_listeners","push","Injectable","DateAdapter","_localeChanges","getDate","date","getDayOfWeek","getDateNames","getYearName","getFirstDayOfWeek","clone","parse","parseFormat","min","DEFAULT_DATE_NAMES","range","i","String","ISO_8601_REGEX","useUtcForDisplay","setLocale","matDateLocale","NativeDateAdapter","getYear","getDay","DEFAULT_MONTH_NAMES","getDayOfWeekNames","_stripDirectionalityCharacters","dtf","format","getNumDaysInMonth","createDate","getMonth","year","month","result","today","Date","displayFormat","isValid","Intl","DateTimeFormat","locale","toDateString","addCalendarYears","years","addCalendarMonths","_createDateWithOverflow","days","_2digit","getUTCMonth","fromIso8601","iso8601String","test","isNaN","getTime","setFullYear","MD_DATE_FORMATS","InjectionToken","MD_NATIVE_DATE_FORMATS","monthYearLabel","dateA11yLabel","day","monthYearA11yLabel","NativeDateModule","NgModule","MAT_DATE_LOCALE_PROVIDER","MdNativeDateModule","GestureConfig","_hammer","isDevMode","console","warn","buildHammer","mc","pan","Pan","press","Press","slide","_createRecognizer","threshold","swipe","longpress","time","recognizeWith","base","options","inheritances","MdLine","MdLineModule","exports","MdCommonModule","RippleState","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","config","fadeOutRipple","RippleRef","RippleRenderer","elementRef","_ruler","platform","_triggerEvents","Map","rippleDisabled","isBrowser","_containerElement","onMousedown","bind","setTriggerElement","containerRect","getBoundingClientRect","centered","scrollPosition","getViewportScrollPosition","pageX","offsetX","ripple","radius","_activeRipples","add","rippleRef","persistent","_isMousedown","rippleEl","opacity","runTimeoutOutsideZone","removeChild","_triggerElement","runOutsideAngular","fn","addEventListener","fadeOut","delay","MD_RIPPLE_GLOBAL_OPTIONS","MdRipple","ngZone","ruler","globalOptions","_rippleRenderer","_globalOptions","_updateRippleRenderer","trigger","disabled","speedFactor","color","fadeInRipple","pageY","NgZone","ViewportRuler","Platform","unbounded","_matRippleTrigger","_matRippleCentered","_matRippleUnbounded","MdRippleModule","imports","PlatformModule","ScrollDispatchModule","declarations","providers","VIEWPORT_RULER_PROVIDER","MdPseudoCheckbox","[class.mat-pseudo-checkbox-checked]","MdPseudoCheckboxModule","MdOptgroupBase","_MdOptgroupMixinBase","_disabled","class_1","_uniqueOptgroupIdCounter","_labelId","MdOptgroup","[class.mat-optgroup-disabled]","label","_uniqueIdCounter","MdOptionSelectionChange","isUserInput","MdOption","group","_multiple","onSelectionChange","EventEmitter","_selected","_emitSelectionChangeEvent","_getHostElement","focus","_active","viewValue","ENTER","SPACE","_selectViaInteraction","multiple","countGroupLabelsBeforeOption","optionIndex","optionGroups","optionsArray","toArray","groups","groupCounter","role","[attr.tabindex]","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[id]","[attr.aria-selected]","[attr.aria-disabled]","[class.mat-option-disabled]","(click)","viewProviders","provide","MATERIAL_COMPATIBILITY_MODE","useValue","ElementRef","propDecorators","MdOptionModule","CommonModule","animationFinished","MdDrawerContent","_container","_margins","margins","[style.marginLeft.px]","[style.marginRight.px]","Subject","isFocusTrapEnabled","focusInitialElementWhenReady","_position"],"mappings":"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"}