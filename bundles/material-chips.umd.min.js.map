{"version":3,"file":"material-chips.umd.min.js","sources":["../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/form-field/index.ts","../../src/lib/chips/chip.ts","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/chips/index.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {first, startWith} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  QueryList, Renderer2,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  FloatPlaceholderType,\r\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\r\n  PlaceholderOptions,\r\n} from '@angular/material/core';\r\nimport {fromEvent} from 'rxjs/observable/fromEvent';\r\nimport {MdError} from './error';\r\nimport {MdFormFieldControl} from './form-field-control';\r\nimport {\r\n  getMdFormFieldDuplicatedHintError,\r\n  getMdFormFieldMissingControlError,\r\n  getMdFormFieldPlaceholderConflictError,\r\n} from './form-field-errors';\r\nimport {MdHint} from './hint';\r\nimport {MdPlaceholder} from './placeholder';\r\nimport {MdPrefix} from './prefix';\r\nimport {MdSuffix} from './suffix';\r\n\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nexport class MdFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use `color` instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\r\n    this._hideRequiredMarker = coerceBooleanProperty(value);\r\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n */\nprivate _showAlwaysAnimate = false;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() {\r\n    return this._floatPlaceholder === 'always' && !this._showAlwaysAnimate;\r\n  }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the form field hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\r\n    this._hintLabel = value;\r\n    this._processHints();\r\n  }\nprivate _hintLabel = '';\r\n\r\n  // Unique id for the hint label.\r\n  _hintLabelId: string = `md-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\r\n    if (value !== this._floatPlaceholder) {\r\n      this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the form field's underline element.\n */\nunderlineRef: ElementRef;\r\n   _connectionContainerRef: ElementRef;\nprivate _placeholder: ElementRef;\r\n   _control: MdFormFieldControl<any>;\r\n   _placeholderChild: MdPlaceholder;\r\n   _errorChildren: QueryList<MdError>;\r\n   _hintChildren: QueryList<MdHint>;\r\n   _prefixChildren: QueryList<MdPrefix>;\r\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _changeDetectorRef: ChangeDetectorRef,\r\n        placeholderOptions: PlaceholderOptions) {\r\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\r\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._validateControlChild();\r\n    if (this._control.controlType) {\r\n      this._renderer.addClass(\r\n          this._elementRef.nativeElement, `mat-form-field-type-${this._control.controlType}`);\r\n    }\r\n\r\n    // Subscribe to changes in the child control state in order to update the form field UI.\r\n    startWith.call(this._control.stateChanges, null).subscribe(() => {\r\n      this._validatePlaceholders();\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    let /** @type {?} */ ngControl = this._control.ngControl;\r\n    if (ngControl && ngControl.valueChanges) {\r\n      ngControl.valueChanges.subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n\r\n    // Re-validate when the number of hints changes.\r\n    startWith.call(this._hintChildren.changes, null).subscribe(() => {\r\n      this._processHints();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    // Update the aria-described by when the number of errors changes.\r\n    startWith.call(this._errorChildren.changes, null).subscribe(() => {\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\r\n    this._validateControlChild();\r\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\r\n    // Avoid animations on load.\r\n    this._subscriptAnimationState = 'enter';\r\n    this._changeDetectorRef.detectChanges();\r\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\r\n    let /** @type {?} */ ngControl = this._control ? this._control.ngControl : null;\r\n    return ngControl && ( /** @type {?} */((ngControl as any)))[prop];\r\n  }\n/**\n * Whether the form field has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() {\r\n    return !!(this._control.placeholder || this._placeholderChild);\r\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\r\n    return (this._errorChildren && this._errorChildren.length > 0 &&\r\n        this._control.errorState) ? 'error' : 'hint';\r\n  }\n/**\n * Animates the placeholder up and locks it in position.\n * @return {?}\n */\n_animateAndLockPlaceholder(): void {\r\n    if (this._placeholder && this._canPlaceholderFloat) {\r\n      this._showAlwaysAnimate = true;\r\n      this._floatPlaceholder = 'always';\r\n\r\n      first.call(fromEvent(this._placeholder.nativeElement, 'transitionend')).subscribe(() => {\r\n        this._showAlwaysAnimate = false;\r\n      });\r\n\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\ror child element with the `md-placeholder` directive).\n * @return {?}\n */\nprivate _validatePlaceholders() {\r\n    if (this._control.placeholder && this._placeholderChild) {\r\n      throw getMdFormFieldPlaceholderConflictError();\r\n    }\r\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\r\n    this._validateHints();\r\n    this._syncDescribedByIds();\r\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\rattribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\r\n    if (this._hintChildren) {\r\n      let /** @type {?} */ startHint: MdHint;\r\n      let /** @type {?} */ endHint: MdHint;\r\n      this._hintChildren.forEach((hint: MdHint) => {\r\n        if (hint.align == 'start') {\r\n          if (startHint || this.hintLabel) {\r\n            throw getMdFormFieldDuplicatedHintError('start');\r\n          }\r\n          startHint = hint;\r\n        } else if (hint.align == 'end') {\r\n          if (endHint) {\r\n            throw getMdFormFieldDuplicatedHintError('end');\r\n          }\r\n          endHint = hint;\r\n        }\r\n      });\r\n    }\r\n  }\n/**\n * Sets the list of element IDs that describe the child control. This allows the control to update\rits `aria-describedby` attribute accordingly.\n * @return {?}\n */\nprivate _syncDescribedByIds() {\r\n    if (this._control) {\r\n      let /** @type {?} */ ids: string[] = [];\r\n\r\n      if (this._getDisplayedMessages() === 'hint') {\r\n        let /** @type {?} */ startHint = this._hintChildren ?\r\n            this._hintChildren.find(hint => hint.align === 'start') : null;\r\n        let /** @type {?} */ endHint = this._hintChildren ?\r\n            this._hintChildren.find(hint => hint.align === 'end') : null;\r\n\r\n        if (startHint) {\r\n          ids.push(startHint.id);\r\n        } else if (this._hintLabel) {\r\n          ids.push(this._hintLabelId);\r\n        }\r\n\r\n        if (endHint) {\r\n          ids.push(endHint.id);\r\n        }\r\n      } else if (this._errorChildren) {\r\n        ids = this._errorChildren.map(mdError => mdError.id);\r\n      }\r\n\r\n      this._control.setDescribedByIds(ids);\r\n    }\r\n  }\n/**\n * Throws an error if the form field's control is missing.\n * @return {?}\n */\nprotected _validateControlChild() {\r\n    if (!this._control) {\r\n      throw getMdFormFieldMissingControlError();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\r\n  selector: 'md-input-container, mat-input-container, md-form-field, mat-form-field',\r\n  templateUrl: 'form-field.html',\r\n  // MdInput is a directive and can't have styles, so we need to include its styles here.\r\n  // The MdInput styles are fairly minimal so it shouldn't be a big deal for people who aren't using\r\n  // MdInput.\r\n  styleUrls: ['form-field.css', '../input/input.css'],\r\n  animations: [\r\n    // TODO(mmalerba): Use angular animations for placeholder animation as well.\r\n    trigger('transitionMessages', [\r\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\r\n      transition('void => enter', [\r\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\r\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\r\n      ]),\r\n    ]),\r\n  ],\r\n  host: {\r\n    'class': 'mat-input-container mat-form-field',\r\n    '[class.mat-input-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-can-float]': '_canPlaceholderFloat',\r\n    '[class.mat-form-field-should-float]': '_control.shouldPlaceholderFloat || _shouldAlwaysFloat',\r\n    '[class.mat-focused]': '_control.focused',\r\n    '[class.mat-primary]': 'color == \"primary\"',\r\n    '[class.mat-accent]': 'color == \"accent\"',\r\n    '[class.mat-warn]': 'color == \"warn\"',\r\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\r\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\r\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\r\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\r\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\r\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\r\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_connectionContainerRef': [{ type: ViewChild, args: ['connectionContainer', ] },],\n'_placeholder': [{ type: ViewChild, args: ['placeholder', ] },],\n'_control': [{ type: ContentChild, args: [MdFormFieldControl, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdError, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdFormField_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormField.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormField.ctorParameters;\n/** @type {?} */\nMdFormField.propDecorators;\n/** @type {?} */\nMdFormField.prototype._placeholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n * @type {?}\n */\nMdFormField.prototype.color;\n/** @type {?} */\nMdFormField.prototype._hideRequiredMarker;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n * @type {?}\n */\nMdFormField.prototype._showAlwaysAnimate;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdFormField.prototype._subscriptAnimationState;\n/** @type {?} */\nMdFormField.prototype._hintLabel;\n/** @type {?} */\nMdFormField.prototype._hintLabelId;\n/** @type {?} */\nMdFormField.prototype._floatPlaceholder;\n/**\n * Reference to the form field's underline element.\n * @type {?}\n */\nMdFormField.prototype.underlineRef;\n/** @type {?} */\nMdFormField.prototype._connectionContainerRef;\n/** @type {?} */\nMdFormField.prototype._placeholder;\n/** @type {?} */\nMdFormField.prototype._control;\n/** @type {?} */\nMdFormField.prototype._placeholderChild;\n/** @type {?} */\nMdFormField.prototype._errorChildren;\n/** @type {?} */\nMdFormField.prototype._hintChildren;\n/** @type {?} */\nMdFormField.prototype._prefixChildren;\n/** @type {?} */\nMdFormField.prototype._suffixChildren;\n/** @type {?} */\nMdFormField.prototype._elementRef;\n/** @type {?} */\nMdFormField.prototype._renderer;\n/** @type {?} */\nMdFormField.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MdError} from './error';\r\nimport {MdFormField} from './form-field';\r\nimport {MdHint} from './hint';\r\nimport {MdPlaceholder} from './placeholder';\r\nimport {MdPrefix} from './prefix';\r\nimport {MdSuffix} from './suffix';\nexport class MdFormFieldModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  declarations: [\r\n    MdError,\r\n    MdHint,\r\n    MdFormField,\r\n    MdPlaceholder,\r\n    MdPrefix,\r\n    MdSuffix,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    PlatformModule,\r\n  ],\r\n  exports: [\r\n    MdError,\r\n    MdHint,\r\n    MdFormField,\r\n    MdPlaceholder,\r\n    MdPrefix,\r\n    MdSuffix,\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdFormFieldModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormFieldModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormFieldModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdFormFieldModule,MdError,MdFormField,MdFormFieldControl,getMdFormFieldPlaceholderConflictError,getMdFormFieldDuplicatedHintError,getMdFormFieldMissingControlError,MdHint,MdPlaceholder,MdPrefix,MdSuffix,MatFormFieldModule,MatError,MatFormField,MatFormFieldControl,MatHint,MatPlaceholder,MatPrefix,MatSuffix} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {FocusableOption} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n\r\nexport interface MdChipEvent {\r\n  chip: MdChip;\r\n}\n/**\n * Event object emitted by MdChip when selected or deselected.\n */\nexport class MdChipSelectionChange {\n/**\n * @param {?} source\n * @param {?} selected\n * @param {?=} isUserInput\n */\nconstructor(public source: MdChip,\npublic selected: boolean,\npublic isUserInput = false) { }\r\n}\n\nfunction MdChipSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipSelectionChange.prototype.source;\n/** @type {?} */\nMdChipSelectionChange.prototype.selected;\n/** @type {?} */\nMdChipSelectionChange.prototype.isUserInput;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {\r\n  }\r\n}\n\nfunction MdChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipBase.prototype._renderer;\n/** @type {?} */\nMdChipBase.prototype._elementRef;\n}\n\r\n\r\nexport const /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\r\\@docs-private\n */\nexport class MdBasicChip {\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]`,\r\n  host: {'class': 'mat-basic-chip'},\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip extends _MdChipMixinBase implements FocusableOption, OnDestroy, CanColor,\r\n    CanDisable {\r\n\r\n  protected _value: any;\r\n\r\n  protected _selected: boolean = false;\r\n\r\n  protected _selectable: boolean = true;\r\n\r\n  protected _removable: boolean = true;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean {\r\n    return this._selected;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\r\n    this._selected = coerceBooleanProperty(value);\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: value\r\n    });\r\n  }\n/**\n * The value of the chip. Defaults to the content inside <md-chip> tags.\n * @return {?}\n */\nget value(): any {\r\n    return this._value != undefined\r\n      ? this._value\r\n      : this._elementRef.nativeElement.textContent;\r\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\r\n    this._value = newValue;\r\n  }\n/**\n * Whether or not the chips are selectable. When a chip is not selectable,\rchanges to it's selected state are always ignored.\n * @return {?}\n */\nget selectable(): boolean {\r\n    return this._selectable;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\r\n    this._selectable = coerceBooleanProperty(value);\r\n  }\n/**\n * Determines whether or not the chip displays the remove styling and emits (remove) events.\n * @return {?}\n */\nget removable(): boolean {\r\n    return this._removable;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset removable(value: boolean) {\r\n    this._removable = coerceBooleanProperty(value);\r\n  }\n/**\n * Emits when the chip is focused.\n */\n_onFocus = new Subject<MdChipEvent>();\n/**\n * Emits when the chip is blured.\n */\n_onBlur = new Subject<MdChipEvent>();\n/**\n * Emitted when the chip is selected or deselected.\n */\nselectionChange = new EventEmitter<MdChipSelectionChange>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroyed = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\r\\@deprecated Use 'destroyed' instead.\n */\ndestroy = this.destroyed;\n/**\n * Emitted when a chip is to be removed.\n */\nremoved = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when a chip is to be removed.\r\\@deprecated Use `removed` instead.\n */\nonRemove = this.removed;\n/**\n * @return {?}\n */\nget ariaSelected(): string | null {\r\n    return this.selectable ? this.selected.toString() : null;\r\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n */\nconstructor(renderer: Renderer2,\npublic _elementRef: ElementRef) {\r\n    super(renderer, _elementRef);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\r\n    this.destroyed.emit({chip: this});\r\n  }\n/**\n * Selects the chip.\n * @return {?}\n */\nselect(): void {\r\n    this._selected = true;\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: true\r\n    });\r\n  }\n/**\n * Deselects the chip.\n * @return {?}\n */\ndeselect(): void {\r\n    this._selected = false;\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: false\r\n    });\r\n  }\n/**\n * Select this chip and emit selected event\n * @return {?}\n */\nselectViaInteraction(): void {\r\n    this._selected = true;\r\n    // Emit select event when selected changes.\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: true,\r\n      selected: true\r\n    });\r\n  }\n/**\n * Toggles the current selected state of this chip.\n * @param {?=} isUserInput\n * @return {?}\n */\ntoggleSelected(isUserInput: boolean = false): boolean {\r\n    this._selected = !this.selected;\r\n\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput,\r\n      selected: this._selected\r\n    });\r\n\r\n    return this.selected;\r\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n    this._onFocus.next({chip: this});\r\n  }\n/**\n * Allows for programmatic removal of the chip. Called by the MdChipList when the DELETE or\rBACKSPACE keys are pressed.\r\rInforms any listeners of the removal request. Does not remove the chip from the DOM.\n * @return {?}\n */\nremove(): void {\r\n    if (this.removable) {\r\n      this.removed.emit({chip: this});\r\n    }\r\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\r\n    // Check disabled\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    this.focus();\r\n  }\n/**\n * Handle custom key presses.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    switch (event.keyCode) {\r\n      case DELETE:\r\n      case BACKSPACE:\r\n        // If we are removable, remove the focused chip\r\n        this.remove();\r\n        // Always prevent so page navigation does not occur\r\n        event.preventDefault();\r\n        break;\r\n      case SPACE:\r\n        // If we are selectable, toggle the focused chip\r\n        if (this.selectable) {\r\n          this.toggleSelected(true);\r\n        }\r\n\r\n        // Always prevent space from scrolling the page since the list has focus\r\n        event.preventDefault();\r\n        break;\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_blur(): void {\r\n    this._hasFocus = false;\r\n    this._onBlur.next({chip: this});\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\r\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\r\n  inputs: ['color', 'disabled'],\r\n  exportAs: 'mdChip, matChip',\r\n  host: {\r\n    'class': 'mat-chip',\r\n    'tabindex': '-1',\r\n    'role': 'option',\r\n    '[class.mat-chip-selected]': 'selected',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-selected]': 'ariaSelected',\r\n    '(click)': '_handleClick($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(focus)': '_hasFocus = true',\r\n    '(blur)': '_blur()',\r\n  },\r\n\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selected': [{ type: Input },],\n'value': [{ type: Input },],\n'selectable': [{ type: Input },],\n'removable': [{ type: Input },],\n'selectionChange': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'destroy': [{ type: Output },],\n'removed': [{ type: Output },],\n'onRemove': [{ type: Output, args: ['remove', ] },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/** @type {?} */\nMdChip.prototype._value;\n/** @type {?} */\nMdChip.prototype._selected;\n/** @type {?} */\nMdChip.prototype._selectable;\n/** @type {?} */\nMdChip.prototype._removable;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMdChip.prototype._hasFocus;\n/**\n * Emits when the chip is focused.\n * @type {?}\n */\nMdChip.prototype._onFocus;\n/**\n * Emits when the chip is blured.\n * @type {?}\n */\nMdChip.prototype._onBlur;\n/**\n * Emitted when the chip is selected or deselected.\n * @type {?}\n */\nMdChip.prototype.selectionChange;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroyed;\n/**\n * Emitted when the chip is destroyed.\r\\@deprecated Use 'destroyed' instead.\n * @type {?}\n */\nMdChip.prototype.destroy;\n/**\n * Emitted when a chip is to be removed.\n * @type {?}\n */\nMdChip.prototype.removed;\n/**\n * Emitted when a chip is to be removed.\r\\@deprecated Use `removed` instead.\n * @type {?}\n */\nMdChip.prototype.onRemove;\n/** @type {?} */\nMdChip.prototype._elementRef;\n}\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\ravailable at https://material.io/icons/#ic_cancel.\r\rExample:\r\r    <md-chip>\r      <md-icon mdChipRemove>cancel</md-icon>\r    </md-chip>\r\rYou *may* use a custom icon, but you may need to override the `md-chip-remove` positioning styles\rto properly center the icon within the chip.\n */\nexport class MdChipRemove {\n/**\n * @param {?} _parentChip\n */\nconstructor(protected _parentChip: MdChip) {\r\n  }\n/**\n * Calls the parent chip's public `remove()` method if applicable.\n * @return {?}\n */\n_handleClick(): void {\r\n    if (this._parentChip.removable) {\r\n      this._parentChip.remove();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdChipRemove], [matChipRemove]',\r\n  host: {\r\n    'class': 'mat-chip-remove',\r\n    '(click)': '_handleClick($event)',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdChip, },\n];\n}\n\nfunction MdChipRemove_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipRemove.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipRemove.ctorParameters;\n/** @type {?} */\nMdChipRemove.prototype._parentChip;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\r\n\r\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\ran invalid Material prefix on a component.\r\\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\r\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\r\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\r\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\r\n  [mat-button],\r\n  [mat-fab],\r\n  [mat-icon-button],\r\n  [mat-mini-fab],\r\n  [mat-raised-button],\r\n  [matCardSubtitle],\r\n  [matCardTitle],\r\n  [matCellDef],\r\n  [matColumnDef],\r\n  [matDialogActions],\r\n  [matDialogClose],\r\n  [matDialogContent],\r\n  [matDialogTitle],\r\n  [matHeaderCellDef],\r\n  [matHeaderRowDef],\r\n  [matLine],\r\n  [matRowDef],\r\n  [matStepLabel],\r\n  [matStepperNext],\r\n  [matStepperPrevious],\r\n  [matTabLabel],\r\n  [matTabLink],\r\n  [matTabNav],\r\n  [matTooltip],\r\n  [matInput],\r\n  [matPrefix],\r\n  [matSuffix],\r\n  mat-autocomplete,\r\n  mat-button-toggle,\r\n  mat-button-toggle,\r\n  mat-button-toggle-group,\r\n  mat-card,\r\n  mat-card-actions,\r\n  mat-card-content,\r\n  mat-card-footer,\r\n  mat-card-header,\r\n  mat-card-subtitle,\r\n  mat-card-title,\r\n  mat-card-title-group,\r\n  mat-cell,\r\n  mat-checkbox,\r\n  mat-chip,\r\n  mat-dialog-actions,\r\n  mat-dialog-container,\r\n  mat-dialog-content,\r\n  mat-divider,\r\n  mat-error,\r\n  mat-grid-list,\r\n  mat-grid-tile,\r\n  mat-grid-tile-footer,\r\n  mat-grid-tile-header,\r\n  mat-header-cell,\r\n  mat-header-row,\r\n  mat-hint,\r\n  mat-horizontal-stepper,\r\n  mat-icon,\r\n  mat-input-container,\r\n  mat-form-field,\r\n  mat-list,\r\n  mat-list-item,\r\n  mat-menu,\r\n  mat-nav-list,\r\n  mat-option,\r\n  mat-placeholder,\r\n  mat-progress-bar,\r\n  mat-pseudo-checkbox,\r\n  mat-radio-button,\r\n  mat-radio-group,\r\n  mat-row,\r\n  mat-select,\r\n  mat-sidenav,\r\n  mat-sidenav-container,\r\n  mat-slider,\r\n  mat-spinner,\r\n  mat-step,\r\n  mat-tab,\r\n  mat-table,\r\n  mat-tab-group,\r\n  mat-toolbar,\r\n  mat-vertical-stepper`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\r\n  [md-button],\r\n  [md-fab],\r\n  [md-icon-button],\r\n  [md-mini-fab],\r\n  [md-raised-button],\r\n  [mdCardSubtitle],\r\n  [mdCardTitle],\r\n  [mdCellDef],\r\n  [mdColumnDef],\r\n  [mdDialogActions],\r\n  [mdDialogClose],\r\n  [mdDialogContent],\r\n  [mdDialogTitle],\r\n  [mdHeaderCellDef],\r\n  [mdHeaderRowDef],\r\n  [mdLine],\r\n  [mdRowDef],\r\n  [mdStepLabel],\r\n  [mdStepperNext],\r\n  [mdStepperPrevious],\r\n  [mdTabLabel],\r\n  [mdTabLink],\r\n  [mdTabNav],\r\n  [mdTooltip],\r\n  [mdInput],\r\n  [mdPrefix],\r\n  [mdSuffix],\r\n  md-autocomplete,\r\n  md-button-toggle,\r\n  md-button-toggle,\r\n  md-button-toggle-group,\r\n  md-card,\r\n  md-card-actions,\r\n  md-card-content,\r\n  md-card-footer,\r\n  md-card-header,\r\n  md-card-subtitle,\r\n  md-card-title,\r\n  md-card-title-group,\r\n  md-cell,\r\n  md-checkbox,\r\n  md-chip,\r\n  md-dialog-actions,\r\n  md-dialog-container,\r\n  md-dialog-content,\r\n  md-divider,\r\n  md-error,\r\n  md-grid-list,\r\n  md-grid-tile,\r\n  md-grid-tile-footer,\r\n  md-grid-tile-header,\r\n  md-header-cell,\r\n  md-header-row,\r\n  md-hint,\r\n  md-horizontal-stepper,\r\n  md-icon,\r\n  md-input-container,\r\n  md-form-field,\r\n  md-list,\r\n  md-list-item,\r\n  md-menu,\r\n  md-nav-list,\r\n  md-option,\r\n  md-placeholder,\r\n  md-progress-bar,\r\n  md-pseudo-checkbox,\r\n  md-radio-button,\r\n  md-radio-group,\r\n  md-row,\r\n  md-select,\r\n  md-sidenav,\r\n  md-sidenav-container,\r\n  md-slider,\r\n  md-spinner,\r\n  md-step,\r\n  md-tab,\r\n  md-table,\r\n  md-tab-group,\r\n  md-toolbar,\r\n  md-vertical-stepper`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\r\n      isCompatibilityMode: boolean,\r\n    elementRef: ElementRef) {\r\n\r\n    if (!isCompatibilityMode) {\r\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\r\n      isCompatibilityMode: boolean,\r\n    elementRef: ElementRef) {\r\n\r\n    if (isCompatibilityMode) {\r\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\rwithout NoConflictStyleCompatibilityMode also being imported, it will throw an error if\rthere are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  declarations: [MatPrefixRejector, MdPrefixRejector],\r\n  exports: [MatPrefixRejector, MdPrefixRejector],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\rit will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  providers: [{\r\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\r\n  }],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\rcomponents. This includes Bidi, compatibility mode, etc.\r\rThis module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\r\n      _sanityChecksEnabled: boolean) {\r\n\r\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\r\n      this._checkDoctype();\r\n      this._checkTheme();\r\n      this._hasDoneGlobalChecks = true;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\r\n    if (!this._document.doctype) {\r\n      console.warn(\r\n        'Current document does not have a doctype. This may cause ' +\r\n        'some Angular Material components not to behave as expected.'\r\n      );\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\r\n    if (typeof getComputedStyle === 'function') {\r\n      const /** @type {?} */ testElement = this._document.createElement('div');\r\n\r\n      testElement.classList.add('mat-theme-loaded-marker');\r\n      this._document.body.appendChild(testElement);\r\n\r\n      if (getComputedStyle(testElement).display !== 'none') {\r\n        console.warn(\r\n          'Could not find Angular Material core theme. Most Material ' +\r\n          'components may not work as expected. For more info refer ' +\r\n          'to the theming guide: https://material.angular.io/guide/theming'\r\n        );\r\n      }\r\n\r\n      this._document.body.removeChild(testElement);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CompatibilityModule, BidiModule],\r\n  exports: [CompatibilityModule, BidiModule],\r\n  providers: [{\r\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\r\n  }],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMdCommonModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nMdCommonModule.prototype._document;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {BACKSPACE, DELETE, LEFT_ARROW, RIGHT_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {startWith} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Renderer2,\r\n  Self,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {MdFormFieldControl} from '@angular/material/form-field';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MdChip, MdChipEvent, MdChipSelectionChange} from './chip';\r\nimport {MdChipInput} from './chip-input';\r\n\r\n// Increasing integer for generating unique ids for chip-list components.\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nexport class MdChipListChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdChipList,\npublic value: any) { }\r\n}\n\nfunction MdChipListChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipListChange.prototype.source;\n/** @type {?} */\nMdChipListChange.prototype.value;\n}\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nexport class MdChipList implements MdFormFieldControl<any>, ControlValueAccessor,\r\n    AfterContentInit, OnInit, OnDestroy {\r\n  readonly controlType = 'mat-chip-list';\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\rneeds to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n */\nprotected _lastDestroyedIndex: number|null = null;\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprotected _chipSet: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the chip list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to focus changes in the chips.\n */\nprivate _chipFocusSubscription: Subscription|null;\n/**\n * Subscription to blur changes in the chips.\n */\nprivate _chipBlurSubscription: Subscription|null;\n/**\n * Subscription to selection changes in chips.\n */\nprivate _chipSelectionSubscription: Subscription|null;\n/**\n * Subscription to remove changes in chips.\n */\nprivate _chipRemoveSubscription: Subscription|null;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * The chip input to add more chips\n */\nprotected _chipInput: MdChipInput;\n/**\n * The aria-describedby attribute on the chip list for improved a11y.\n */\nprotected _ariaDescribedby: string;\n/**\n * Id of the chip list\n */\nprotected _id: string;\n/**\n * Uid of the chip list\n */\nprotected _uid: string = `md-chip-list-${nextUniqueId++}`;\n/**\n * Whether this is required\n */\nprotected _required: boolean = false;\n/**\n * Whether this is disabled\n */\nprotected _disabled: boolean = false;\r\n\r\n  protected _value: any;\n/**\n * Placeholder for the chip list. Alternatively, placeholder can be set on MdChipInput\n */\nprotected _placeholder: string;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * User defined tab index.\rWhen it is not null, use user defined tab index. Otherwise use _tabIndex\n */\n_userTabIndex: number | null = null;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MdChip>;\n/**\n * Function when touched\n */\n_onTouched = () => {};\n/**\n * Function when changed\n */\n_onChange: (value: any) => void = () => {};\r\n\r\n  _selectionModel: SelectionModel<MdChip>;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * The array of selected chips inside chip list.\n * @return {?}\n */\nget selected(): MdChip[] | MdChip {\r\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n  }\n/**\n * Whether the user should be allowed to select multiple chips.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\ris a value from an option. The second is a value from the selection. A boolean\rshould be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    this._compareWith = fn;\r\n    if (this._selectionModel) {\r\n      // A different comparator means the selection could change.\r\n      this._initializeSelection();\r\n    }\r\n  }\n/**\n * Required for FormFieldControl\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\r\n    this.writeValue(newValue);\r\n    this._value = newValue;\r\n  }\n/**\n * Required for FormFieldControl. The ID of the chip list\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {\r\n    this._id = value;\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nget id() { return this._id || this._uid; }\n/**\n * Required for FormFieldControl. Whether the chip list is required.\n * @param {?} value\n * @return {?}\n */\nset required(value: any) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nget required() {\r\n    return this._required;\r\n  }\n/**\n * For FormFieldControl. Use chip input's placholder if there's a chip input\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\r\n    this._placeholder = value;\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nget placeholder() {\r\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\r\n  }\n/**\n * Whether any chips or the mdChipInput inside of this chip-list has focus.\n * @return {?}\n */\nget focused() {\r\n    return this.chips.some(chip => chip._hasFocus) ||\r\n      (this._chipInput && this._chipInput.focused);\r\n  }\n/**\n * Whether this chip-list contains no chips and no mdChipInput.\n * @return {?}\n */\nget empty(): boolean {\r\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\r\n  }\n/**\n * @return {?}\n */\nget shouldPlaceholderFloat(): boolean {\r\n    return this.empty;\r\n  }\n/**\n * Whether this chip-list is disabled.\n * @return {?}\n */\nget disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the chip list is in an error state.\n * @return {?}\n */\nget errorState(): boolean {\r\n    const /** @type {?} */ isInvalid = this.ngControl && this.ngControl.invalid;\r\n    const /** @type {?} */ isTouched = this.ngControl && this.ngControl.touched;\r\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\r\n      (this._parentForm && this._parentForm.submitted);\r\n    return !!(isInvalid && (isTouched || isSubmitted));\r\n  }\n/**\n * Orientation of the chip list.\n */\nariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\rits selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\r\n    this._userTabIndex = value;\r\n    this._tabIndex = value;\r\n  }\n/**\n * Combined stream of all of the child chips' selection change events.\n * @return {?}\n */\nget chipSelectionChanges(): Observable<MdChipSelectionChange> {\r\n    return merge(...this.chips.map(chip => chip.selectionChange));\r\n  }\n/**\n * Combined stream of all of the child chips' focus change events.\n * @return {?}\n */\nget chipFocusChanges(): Observable<MdChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onFocus));\r\n  }\n/**\n * Combined stream of all of the child chips' blur change events.\n * @return {?}\n */\nget chipBlurChanges(): Observable<MdChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onBlur));\r\n  }\n/**\n * Combined stream of all of the child chips' remove change events.\n * @return {?}\n */\nget chipRemoveChanges(): Observable<MdChipEvent> {\r\n    return merge(...this.chips.map(chip => chip.destroy));\r\n  }\n/**\n * Event emitted when the selected chip list value has been changed by the user.\n */\nchange: EventEmitter<MdChipListChange> = new EventEmitter<MdChipListChange>();\n/**\n * Event that emits whenever the raw value of the chip-list changes. This is here primarily\rto facilitate the two-way binding for the `value` input.\r\\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nconstructor(protected _renderer: Renderer2,\r\n              protected _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic ngControl: NgControl) {\r\n    if (this.ngControl) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\r\n\r\n    this._keyManager = new FocusKeyManager<MdChip>(this.chips).withWrap();\r\n\r\n    // Prevents the chip list from capturing focus and redirecting\r\n    // it back to the first chip when the user tabs out.\r\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\r\n      this._tabIndex = -1;\r\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\r\n    });\r\n\r\n    // When the list changes, re-subscribe\r\n    this._changeSubscription = startWith.call(this.chips.changes, null).subscribe(() => {\r\n      this._resetChips();\r\n\r\n      // Reset chips selected/deselected status\r\n      this._initializeSelection();\r\n\r\n      // Check to see if we need to update our tab index\r\n      this._updateTabIndex();\r\n\r\n      // Check to see if we have a destroyed chip and need to refocus\r\n      this._updateFocusForDestroyedChips();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    this._selectionModel = new SelectionModel<MdChip>(this.multiple, undefined, false);\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\r\n    this._tabOutSubscription.unsubscribe();\r\n\r\n    if (this._changeSubscription) {\r\n      this._changeSubscription.unsubscribe();\r\n    }\r\n    this._dropSubscriptions();\r\n  }\n/**\n * Associates an HTML input element with this chip list.\n * @param {?} inputElement\n * @return {?}\n */\nregisterInput(inputElement: MdChipInput) {\r\n    this._chipInput = inputElement;\r\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\r\n    if (this.chips) {\r\n      this._setSelectionByValue(value, false);\r\n    }\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\r\n    this.disabled = disabled;\r\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nonContainerClick() {\r\n    this.focus();\r\n  }\n/**\n * Focuses the the first non-disabled chip in this chip list, or the associated input when there\rare no eligible chips.\n * @return {?}\n */\nfocus() {\r\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\r\n    // Focus on first element if there's no chipInput inside chip-list\r\n    if (this._chipInput && this._chipInput.focused) {\r\n      // do nothing\r\n    } else if (this.chips.length > 0) {\r\n      this._keyManager.setFirstItemActive();\r\n      this.stateChanges.next();\r\n    } else {\r\n      this._focusInput();\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Attempt to focus an input if we have one.\n * @return {?}\n */\n_focusInput() {\r\n    if (this._chipInput) {\r\n      this._chipInput.focus();\r\n    }\r\n  }\n/**\n * Pass events to the keyboard manager. Available here for tests.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\r\n    let /** @type {?} */ code = event.keyCode;\r\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\r\n    let /** @type {?} */ isInputEmpty = this._isInputEmpty(target);\r\n    let /** @type {?} */ isRtl = this._dir && this._dir.value == 'rtl';\r\n\r\n    let /** @type {?} */ isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\r\n    let /** @type {?} */ isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\r\n    let /** @type {?} */ isBackKey = (code === BACKSPACE || code == DELETE || code == UP_ARROW || isPrevKey);\r\n    // If they are on an empty input and hit backspace/delete/left arrow, focus the last chip\r\n    if (isInputEmpty && isBackKey) {\r\n      this._keyManager.setLastItemActive();\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\r\n    // up/down keys)\r\n    if (target && target.classList.contains('mat-chip')) {\r\n      if (isPrevKey) {\r\n        this._keyManager.setPreviousItemActive();\r\n        event.preventDefault();\r\n      } else if (isNextKey) {\r\n        this._keyManager.setNextItemActive();\r\n        event.preventDefault();\r\n      } else {\r\n        this._keyManager.onKeydown(event);\r\n      }\r\n    }\r\n    this.stateChanges.next();\r\n  }\n/**\n * Check the tab index as you should not be allowed to focus an empty list.\n * @return {?}\n */\nprotected _updateTabIndex(): void {\r\n    // If we have 0 chips, we should not allow keyboard focus\r\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\r\n  }\n/**\n * Update key manager's active item when chip is deleted.\rIf the deleted chip is the last chip in chip list, focus the new last chip.\rOtherwise focus the next chip in the list.\rSave `_lastDestroyedIndex` so we can set the correct focus.\n * @param {?} chip\n * @return {?}\n */\nprotected _updateKeyManager(chip: MdChip) {\r\n    let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\r\n    if (this._isValidIndex(chipIndex)) {\r\n      if (chip._hasFocus) {\r\n        // Check whether the chip is not the last item\r\n        if (chipIndex < this.chips.length - 1) {\r\n          this._keyManager.setActiveItem(chipIndex);\r\n        } else if (chipIndex - 1 >= 0) {\r\n          this._keyManager.setActiveItem(chipIndex - 1);\r\n        }\r\n      }\r\n      if (this._keyManager.activeItemIndex === chipIndex) {\r\n        this._lastDestroyedIndex = chipIndex;\r\n      }\r\n    }\r\n  }\n/**\n * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\rone.\n * @return {?}\n */\nprotected _updateFocusForDestroyedChips() {\r\n    let /** @type {?} */ chipsArray = this.chips;\r\n\r\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\r\n      // Check whether the destroyed chip was the last item\r\n      const /** @type {?} */ newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\r\n      this._keyManager.setActiveItem(newFocusIndex);\r\n      let /** @type {?} */ focusChip = this._keyManager.activeItem;\r\n      // Focus the chip\r\n      if (focusChip) {\r\n        focusChip.focus();\r\n      }\r\n    } else if (chipsArray.length === 0) {\r\n      this._focusInput();\r\n    }\r\n\r\n    // Reset our destroyed index\r\n    this._lastDestroyedIndex = null;\r\n  }\n/**\n * Utility to ensure all indexes are valid.\r\r\\@param index The index to be checked.\r\\@returns True if the index is valid for our list of chips.\n * @param {?} index\n * @return {?}\n */\nprivate _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.chips.length;\r\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate _isInputEmpty(element: HTMLElement): boolean {\r\n    if (element && element.nodeName.toLowerCase() === 'input') {\r\n      let /** @type {?} */ input = /** @type {?} */(( element as HTMLInputElement));\r\n\r\n      return !input.value;\r\n    }\r\n\r\n    return false;\r\n  }\n/**\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\n_setSelectionByValue(value: any, isUserInput: boolean = true) {\r\n    this._clearSelection();\r\n    this.chips.forEach(chip => chip.deselect());\r\n\r\n    if (Array.isArray(value)) {\r\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\r\n      this._sortValues();\r\n    } else {\r\n      const /** @type {?} */ correspondingChip = this._selectValue(value, isUserInput);\r\n\r\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n      // mode, because we don't know what chip the user interacted with last.\r\n      if (correspondingChip) {\r\n        this._keyManager.setActiveItem(this.chips.toArray().indexOf(correspondingChip));\r\n      }\r\n    }\r\n  }\n/**\n * Finds and selects the chip based on its value.\r\\@returns Chip that has the corresponding value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _selectValue(value: any, isUserInput: boolean = true): MdChip | undefined {\r\n\r\n    const /** @type {?} */ correspondingChip = this.chips.find(chip => {\r\n      return chip.value != null && this._compareWith(chip.value,  value);\r\n    });\r\n\r\n    if (correspondingChip) {\r\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\r\n      this._selectionModel.select(correspondingChip);\r\n    }\r\n\r\n    return correspondingChip;\r\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\r\n      this.stateChanges.next();\r\n    });\r\n  }\n/**\n * Deselects every chip in the list.\r\\@param skip Chip that should not be deselected.\n * @param {?=} skip\n * @return {?}\n */\nprivate _clearSelection(skip?: MdChip): void {\r\n    this._selectionModel.clear();\r\n    this.chips.forEach(chip => {\r\n      if (chip !== skip) {\r\n        chip.deselect();\r\n      }\r\n    });\r\n    this.stateChanges.next();\r\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\rorder that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\r\n    if (this._multiple) {\r\n      this._selectionModel.clear();\r\n\r\n      this.chips.forEach(chip => {\r\n        if (chip.selected) {\r\n          this._selectionModel.select(chip);\r\n        }\r\n      });\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\r\n    let /** @type {?} */ valueToEmit: any = null;\r\n\r\n    if (Array.isArray(this.selected)) {\r\n      valueToEmit = this.selected.map(chip => chip.value);\r\n    } else {\r\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\r\n    }\r\n    this._value = valueToEmit;\r\n    this.change.emit(new MdChipListChange(this, valueToEmit));\r\n    this.valueChange.emit(valueToEmit);\r\n    this._onChange(valueToEmit);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * When blurred, mark the field as touched when focus moved outside the chip list.\n * @return {?}\n */\n_blur() {\r\n    if (!this.disabled) {\r\n      if (this._chipInput) {\r\n        // If there's a chip input, we should check whether the focus moved to chip input.\r\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\r\n        // to chip input, do nothing.\r\n        // Timeout is needed to wait for the focus() event trigger on chip input.\r\n        setTimeout(() => {\r\n          if (!this.focused) {\r\n            this._markAsTouched();\r\n          }\r\n        });\r\n      } else {\r\n        // If there's no chip input, then mark the field as touched.\r\n        this._markAsTouched();\r\n      }\r\n    }\r\n  }\n/**\n * Mark the field as touched\n * @return {?}\n */\n_markAsTouched() {\r\n    this._onTouched();\r\n    this._changeDetectorRef.markForCheck();\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nprivate _resetChips() {\r\n    this._dropSubscriptions();\r\n    this._listenToChipsFocus();\r\n    this._listenToChipsSelection();\r\n    this._listenToChipsRemoved();\r\n  }\n/**\n * @return {?}\n */\nprivate _dropSubscriptions() {\r\n    if (this._chipFocusSubscription) {\r\n      this._chipFocusSubscription.unsubscribe();\r\n      this._chipFocusSubscription = null;\r\n    }\r\n\r\n    if (this._chipBlurSubscription) {\r\n      this._chipBlurSubscription.unsubscribe();\r\n      this._chipBlurSubscription = null;\r\n    }\r\n\r\n    if (this._chipSelectionSubscription) {\r\n      this._chipSelectionSubscription.unsubscribe();\r\n      this._chipSelectionSubscription = null;\r\n    }\r\n  }\n/**\n * Listens to user-generated selection events on each chip.\n * @return {?}\n */\nprivate _listenToChipsSelection(): void {\r\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\r\n      event.source.selected\r\n        ? this._selectionModel.select(event.source)\r\n        : this._selectionModel.deselect(event.source);\r\n\r\n      // For single selection chip list, make sure the deselected value is unselected.\r\n      if (!this.multiple) {\r\n        this.chips.forEach(chip => {\r\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\r\n            chip.deselect();\r\n          }\r\n        });\r\n      }\r\n\r\n      if (event.isUserInput) {\r\n        this._propagateChanges();\r\n      }\r\n    });\r\n  }\n/**\n * Listens to user-generated selection events on each chip.\n * @return {?}\n */\nprivate _listenToChipsFocus(): void {\r\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\r\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(event.chip);\r\n\r\n      if (this._isValidIndex(chipIndex)) {\r\n        this._keyManager.updateActiveItemIndex(chipIndex);\r\n      }\r\n      this.stateChanges.next();\r\n    });\r\n\r\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\r\n      this._blur();\r\n      this.stateChanges.next();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nprivate _listenToChipsRemoved(): void {\r\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\r\n      this._updateKeyManager(event.chip);\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-chip-list, mat-chip-list',\r\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\r\n  exportAs: 'mdChipList, matChipList',\r\n  host: {\r\n    '[attr.tabindex]': '_tabIndex',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-multiselectable]': 'multiple',\r\n    '[class.mat-chip-list-disabled]': 'disabled',\r\n    '[class.mat-chip-list-invalid]': 'errorState',\r\n    '[class.mat-chip-list-required]': 'required',\r\n    'role': 'listbox',\r\n    '[attr.aria-orientation]': 'ariaOrientation',\r\n    'class': 'mat-chip-list',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_blur()',\r\n    '(keydown)': '_keydown($event)'\r\n  },\r\n  providers: [{provide: MdFormFieldControl, useExisting: MdChipList}],\r\n  styleUrls: ['chips.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'value': [{ type: Input },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'disabled': [{ type: Input },],\n'ariaOrientation': [{ type: Input, args: ['aria-orientation', ] },],\n'selectable': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n'chips': [{ type: ContentChildren, args: [MdChip, ] },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/** @type {?} */\nMdChipList.prototype.controlType;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\rneeds to run change detection.\n * @type {?}\n */\nMdChipList.prototype.stateChanges;\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n * @type {?}\n */\nMdChipList.prototype._lastDestroyedIndex;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._chipSet;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabOutSubscription;\n/**\n * Subscription to changes in the chip list.\n * @type {?}\n */\nMdChipList.prototype._changeSubscription;\n/**\n * Subscription to focus changes in the chips.\n * @type {?}\n */\nMdChipList.prototype._chipFocusSubscription;\n/**\n * Subscription to blur changes in the chips.\n * @type {?}\n */\nMdChipList.prototype._chipBlurSubscription;\n/**\n * Subscription to selection changes in chips.\n * @type {?}\n */\nMdChipList.prototype._chipSelectionSubscription;\n/**\n * Subscription to remove changes in chips.\n * @type {?}\n */\nMdChipList.prototype._chipRemoveSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdChipList.prototype._multiple;\n/**\n * The chip input to add more chips\n * @type {?}\n */\nMdChipList.prototype._chipInput;\n/**\n * The aria-describedby attribute on the chip list for improved a11y.\n * @type {?}\n */\nMdChipList.prototype._ariaDescribedby;\n/**\n * Id of the chip list\n * @type {?}\n */\nMdChipList.prototype._id;\n/**\n * Uid of the chip list\n * @type {?}\n */\nMdChipList.prototype._uid;\n/**\n * Whether this is required\n * @type {?}\n */\nMdChipList.prototype._required;\n/**\n * Whether this is disabled\n * @type {?}\n */\nMdChipList.prototype._disabled;\n/** @type {?} */\nMdChipList.prototype._value;\n/**\n * Placeholder for the chip list. Alternatively, placeholder can be set on MdChipInput\n * @type {?}\n */\nMdChipList.prototype._placeholder;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n/**\n * User defined tab index.\rWhen it is not null, use user defined tab index. Otherwise use _tabIndex\n * @type {?}\n */\nMdChipList.prototype._userTabIndex;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * Function when touched\n * @type {?}\n */\nMdChipList.prototype._onTouched;\n/**\n * Function when changed\n * @type {?}\n */\nMdChipList.prototype._onChange;\n/** @type {?} */\nMdChipList.prototype._selectionModel;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMdChipList.prototype._compareWith;\n/**\n * Orientation of the chip list.\n * @type {?}\n */\nMdChipList.prototype.ariaOrientation;\n/**\n * Event emitted when the selected chip list value has been changed by the user.\n * @type {?}\n */\nMdChipList.prototype.change;\n/**\n * Event that emits whenever the raw value of the chip-list changes. This is here primarily\rto facilitate the two-way binding for the `value` input.\r\\@docs-private\n * @type {?}\n */\nMdChipList.prototype.valueChange;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/** @type {?} */\nMdChipList.prototype._renderer;\n/** @type {?} */\nMdChipList.prototype._elementRef;\n/** @type {?} */\nMdChipList.prototype._changeDetectorRef;\n/** @type {?} */\nMdChipList.prototype._dir;\n/** @type {?} */\nMdChipList.prototype._parentForm;\n/** @type {?} */\nMdChipList.prototype._parentFormGroup;\n/** @type {?} */\nMdChipList.prototype.ngControl;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ENTER} from '@angular/cdk/keycodes';\r\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\r\nimport {MdChipList} from './chip-list';\r\n\r\n\r\nexport interface MdChipInputEvent {\r\n  input: HTMLInputElement;\r\n  value: string;\r\n}\n/**\n * Directive that adds chip-specific behaviors to an input element inside <md-form-field>.\rMay be placed inside or outside of an <md-chip-list>.\n */\nexport class MdChipInput {\r\n  focused: boolean = false;\r\n  _chipList: MdChipList;\n/**\n * Register input for chip list\n * @param {?} value\n * @return {?}\n */\nset chipList(value: MdChipList) {\r\n    if (value) {\r\n      this._chipList = value;\r\n      this._chipList.registerInput(this);\r\n    }\r\n  }\n/**\n * Whether or not the chipEnd event will be emitted when the input is blurred.\n * @return {?}\n */\nget addOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\r\n  _addOnBlur: boolean = false;\r\n\r\n  /**\r\n   * The list of key codes that will trigger a chipEnd event.\r\n   *\r\n   * Defaults to `[ENTER]`.\r\n   */\r\n  // TODO(tinayuangao): Support Set here\r\n   separatorKeyCodes: number[] = [ENTER];\n/**\n * Emitted when a chip is to be added.\n */\nchipEnd = new EventEmitter<MdChipInputEvent>();\r\n\r\n   _matChipInputTokenEnd = this.chipEnd;\n/**\n * @param {?} value\n * @return {?}\n */\nset matChipList(value: MdChipList) { this.chipList = value; }\n/**\n * @return {?}\n */\nget matAddOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset matAddOnBlur(value) { this.addOnBlur = value; }\n/**\n * @return {?}\n */\nget matSeparatorKeyCodes() { return this.separatorKeyCodes; }\n/**\n * @param {?} v\n * @return {?}\n */\nset matSeparatorKeyCodes(v: number[]) { this.separatorKeyCodes = v; }\r\n\r\n   placeholder: string = '';\n/**\n * @return {?}\n */\nget empty(): boolean {\r\n    let /** @type {?} */ value: string | null = this._inputElement.value;\r\n    return value == null || value === '';\r\n  }\n/**\n * The native input element to which this directive is attached.\n */\nprotected _inputElement: HTMLInputElement;\n/**\n * @param {?} _elementRef\n */\nconstructor(protected _elementRef: ElementRef) {\r\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\r\n  }\n/**\n * Utility method to make host definition/tests more clear.\n * @param {?=} event\n * @return {?}\n */\n_keydown(event?: KeyboardEvent) {\r\n    this._emitChipEnd(event);\r\n  }\n/**\n * Checks to see if the blur should emit the (chipEnd) event.\n * @return {?}\n */\n_blur() {\r\n    if (this.addOnBlur) {\r\n      this._emitChipEnd();\r\n    }\r\n    this.focused = false;\r\n    // Blur the chip list if it is not focused\r\n    if (!this._chipList.focused) {\r\n      this._chipList._blur();\r\n    }\r\n    this._chipList.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\n_focus() {\r\n    this.focused = true;\r\n    this._chipList.stateChanges.next();\r\n  }\n/**\n * Checks to see if the (chipEnd) event needs to be emitted.\n * @param {?=} event\n * @return {?}\n */\n_emitChipEnd(event?: KeyboardEvent) {\r\n    if (!this._inputElement.value && !!event) {\r\n      this._chipList._keydown(event);\r\n    }\r\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\r\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\r\n\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\n/**\n * @return {?}\n */\nfocus() { this._inputElement.focus(); }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'input[mdChipInputFor], input[matChipInputFor]',\r\n  host: {\r\n    'class': 'mat-chip-input mat-input-element',\r\n    '(keydown)': '_keydown($event)',\r\n    '(blur)': '_blur()',\r\n    '(focus)': '_focus()',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'chipList': [{ type: Input, args: ['mdChipInputFor', ] },],\n'addOnBlur': [{ type: Input, args: ['mdChipInputAddOnBlur', ] },],\n'separatorKeyCodes': [{ type: Input, args: ['mdChipInputSeparatorKeyCodes', ] },],\n'chipEnd': [{ type: Output, args: ['mdChipInputTokenEnd', ] },],\n'_matChipInputTokenEnd': [{ type: Output, args: ['matChipInputTokenEnd', ] },],\n'matChipList': [{ type: Input, args: ['matChipInputFor', ] },],\n'matAddOnBlur': [{ type: Input, args: ['matChipInputAddOnBlur', ] },],\n'matSeparatorKeyCodes': [{ type: Input, args: ['matChipInputSeparatorKeyCodes', ] },],\n'placeholder': [{ type: Input },],\n};\n}\n\nfunction MdChipInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipInput.ctorParameters;\n/** @type {?} */\nMdChipInput.propDecorators;\n/** @type {?} */\nMdChipInput.prototype.focused;\n/** @type {?} */\nMdChipInput.prototype._chipList;\n/** @type {?} */\nMdChipInput.prototype._addOnBlur;\n/** @type {?} */\nMdChipInput.prototype.separatorKeyCodes;\n/**\n * Emitted when a chip is to be added.\n * @type {?}\n */\nMdChipInput.prototype.chipEnd;\n/** @type {?} */\nMdChipInput.prototype._matChipInputTokenEnd;\n/** @type {?} */\nMdChipInput.prototype.placeholder;\n/**\n * The native input element to which this directive is attached.\n * @type {?}\n */\nMdChipInput.prototype._inputElement;\n/** @type {?} */\nMdChipInput.prototype._elementRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdChipList} from './chip-list';\r\nimport {MdBasicChip, MdChip, MdChipRemove} from './chip';\r\nimport {MdChipInput} from './chip-input';\nexport class MdChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [],\r\n  exports: [MdChipList, MdChip, MdChipInput, MdChipRemove, MdChipRemove, MdBasicChip],\r\n  declarations: [MdChipList, MdChip, MdChipInput, MdChipRemove,  MdChipRemove, MdBasicChip]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdChipsModule,MdChipListChange,MdChipList,MdChipEvent,MdChipSelectionChange,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdChipRemove,MdChipInputEvent,MdChipInput,MatBasicChip,MatChip,MatChipBase,MatChipEvent,MatChipInput,MatChipInputEvent,MatChipListChange,MatChipList,MatChipRemove,MatChipsModule} from './public_api';\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\n/**\n * InjectionToken for datepicker that can be used to override default locale code.\n */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n/**\n * Provider for MAT_DATE_LOCALE injection token.\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * A stream that emits when the locale changes.\n * @return {?}\n */\nget localeChanges(): Observable<void> { return this._localeChanges; }\r\n  protected _localeChanges= new Subject<void>();\n/**\n * Gets the year component of the given date.\r\\@param date The date to extract the year from.\r\\@returns The year component.\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\r\\@param date The date to extract the month from.\r\\@returns The month component (0-indexed, 0 = January).\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\r\\@param date The date to extract the date of the month from.\r\\@returns The month component (1-indexed, 1 = first of month).\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\r\\@param date The date to extract the day of the week from.\r\\@returns The month component (0-indexed, 0 = Sunday).\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\r\\@param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\r\\@returns An ordered list of all month names, starting with January.\n * @abstract\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\r\\@returns An ordered list of all date of the month names, starting with '1'.\n * @abstract\n * @return {?}\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\r\\@param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\r\\@returns An ordered list of all weekday names, starting with Sunday.\n * @abstract\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\r\\@param date The date to get the year name for.\r\\@returns The name of the given year (e.g. '2017').\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\r\\@returns The first day of the week (0-indexed, 0 = Sunday).\n * @abstract\n * @return {?}\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\r\\@param date The date whose month should be checked.\r\\@returns The number of days in the month of the given date.\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\r\\@param date The date to clone\r\\@returns A new date equal to the given date.\n * @abstract\n * @param {?} date\n * @return {?}\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\rmonth and date.\r\\@param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\r\\@param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\r\\@param date The date of month of the date. Must be an integer 1 - length of the given month.\r\\@returns The new date, or null if invalid.\n * @abstract\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\r\\@returns Today's date.\n * @abstract\n * @return {?}\n */\ntoday() {}\n/**\n * Parses a date from a value.\r\\@param value The value to parse.\r\\@param parseFormat The expected format of the value being parsed\r    (type is implementation-dependent).\r\\@returns The parsed date.\n * @abstract\n * @param {?} value\n * @param {?} parseFormat\n * @return {?}\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\r\\@param date The value to format.\r\\@param displayFormat The format to use to display the date as a string.\r\\@returns The formatted date string.\n * @abstract\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\rcalendar for each year and then finding the closest date in the new month. For example when\radding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\r\\@param date The date to add years to.\r\\@param years The number of years to add (may be negative).\r\\@returns A new date equal to the given one with the specified number of years added.\n * @abstract\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\rcalendar for each month and then finding the closest date in the new month. For example when\radding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\r\\@param date The date to add months to.\r\\@param months The number of months to add (may be negative).\r\\@returns A new date equal to the given one with the specified number of months added.\n * @abstract\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\rcalendar for each day.\r\\@param date The date to add days to.\r\\@param days The number of days to add (may be negative).\r\\@returns A new date equal to the given one with the specified number of days added.\n * @abstract\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\r\\@param date The date to get the ISO date string for.\r\\@returns The ISO date string date string.\n * @abstract\n * @param {?} date\n * @return {?}\n */\ntoIso8601(date: D) {}\n/**\n * Creates a date from an RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339).\r\\@param iso8601String The ISO date string to create a date from\r\\@returns The date created from the ISO date string.\n * @abstract\n * @param {?} iso8601String\n * @return {?}\n */\nfromIso8601(iso8601String: string) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\r\\@param obj The object to check\r\\@returns Whether the object is a date instance.\n * @abstract\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\r\\@param date The date to check.\r\\@returns Whether the date is valid.\n * @abstract\n * @param {?} date\n * @return {?}\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\r\\@param locale The new locale.\n * @param {?} locale\n * @return {?}\n */\nsetLocale(locale: any) {\r\n    this.locale = locale;\r\n    this._localeChanges.next();\r\n  }\n/**\n * Compares two dates.\r\\@param first The first date to compare.\r\\@param second The second date to compare.\r\\@returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r    a number greater than 0 if the first date is later.\n * @param {?} first\n * @param {?} second\n * @return {?}\n */\ncompareDate(first: D, second: D): number {\r\n    return this.getYear(first) - this.getYear(second) ||\r\n        this.getMonth(first) - this.getMonth(second) ||\r\n        this.getDate(first) - this.getDate(second);\r\n  }\n/**\n * Checks if two dates are equal.\r\\@param first The first date to check.\r\\@param second The second date to check.\r\\@returns {boolean} Whether the two dates are equal.\r    Null dates are considered equal to other null dates.\n * @param {?} first\n * @param {?} second\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\r\n    return first && second ? !this.compareDate(first, second) : first == second;\r\n  }\n/**\n * Clamp the given date between min and max dates.\r\\@param date The date to clamp.\r\\@param min The minimum value to allow. If null or omitted no min is enforced.\r\\@param max The maximum value to allow. If null or omitted no max is enforced.\r\\@returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\r    otherwise `date`.\n * @param {?} date\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\r\n    if (min && this.compareDate(date, min) < 0) {\r\n      return min;\r\n    }\r\n    if (max && this.compareDate(date, max) > 0) {\r\n      return max;\r\n    }\r\n    return date;\r\n  }\r\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n/** @type {?} */\nDateAdapter.prototype._localeChanges;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ElementRef, NgZone} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\r\n\r\nexport type RippleConfig = {\r\n  color?: string;\r\n  centered?: boolean;\r\n  radius?: number;\r\n  speedFactor?: number;\r\n  persistent?: boolean;\r\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\rThe constructor takes a reference to the ripple directive's host element and a map of DOM\revent handlers to be installed on the element that triggers ripple animations.\rThis will eventually become a custom renderer once Angular support exists.\r\\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\r\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\r\n      platform: Platform) {\r\n    // Only do anything if we're on the browser.\r\n    if (platform.isBrowser) {\r\n      this._containerElement = elementRef.nativeElement;\r\n\r\n      // Specify events which need to be registered on the trigger.\r\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\r\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\r\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\r\n\r\n      // By default use the host element as trigger element.\r\n      this.setTriggerElement(this._containerElement);\r\n    }\r\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\r\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\r\n\r\n    if (config.centered) {\r\n      pageX = containerRect.left + containerRect.width / 2;\r\n      pageY = containerRect.top + containerRect.height / 2;\r\n    } else {\r\n      // Subtract scroll values from the coordinates because calculations below\r\n      // are always relative to the viewport rectangle.\r\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\r\n      pageX -= scrollPosition.left;\r\n      pageY -= scrollPosition.top;\r\n    }\r\n\r\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\r\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\r\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\r\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\r\n\r\n    let /** @type {?} */ ripple = document.createElement('div');\r\n    ripple.classList.add('mat-ripple-element');\r\n\r\n    ripple.style.left = `${offsetX - radius}px`;\r\n    ripple.style.top = `${offsetY - radius}px`;\r\n    ripple.style.height = `${radius * 2}px`;\r\n    ripple.style.width = `${radius * 2}px`;\r\n\r\n    // If the color is not set, the default CSS color will be used.\r\n    ripple.style.backgroundColor = config.color || null;\r\n    ripple.style.transitionDuration = `${duration}ms`;\r\n\r\n    this._containerElement.appendChild(ripple);\r\n\r\n    // By default the browser does not recalculate the styles of dynamically created\r\n    // ripple elements. This is critical because then the `scale` would not animate properly.\r\n    enforceStyleRecalculation(ripple);\r\n\r\n    ripple.style.transform = 'scale(1)';\r\n\r\n    // Exposed reference to the ripple that will be returned.\r\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\r\n\r\n    rippleRef.state = RippleState.FADING_IN;\r\n\r\n    // Add the ripple reference to the list of all active ripples.\r\n    this._activeRipples.add(rippleRef);\r\n\r\n    // Wait for the ripple element to be completely faded in.\r\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\r\n    this.runTimeoutOutsideZone(() => {\r\n      rippleRef.state = RippleState.VISIBLE;\r\n\r\n      if (!config.persistent && !this._isMousedown) {\r\n        rippleRef.fadeOut();\r\n      }\r\n    }, duration);\r\n\r\n    return rippleRef;\r\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\r\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\r\n    if (!this._activeRipples.delete(rippleRef)) {\r\n      return;\r\n    }\r\n\r\n    let /** @type {?} */ rippleEl = rippleRef.element;\r\n\r\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\r\n    rippleEl.style.opacity = '0';\r\n\r\n    rippleRef.state = RippleState.FADING_OUT;\r\n\r\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\r\n    this.runTimeoutOutsideZone(() => {\r\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\r\n      rippleEl.parentNode)).removeChild(rippleEl);\r\n    }, RIPPLE_FADE_OUT_DURATION);\r\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\r\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\r\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\r\n    // Remove all previously register event listeners from the trigger element.\r\n    if (this._triggerElement) {\r\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\r\n        this._triggerElement)).removeEventListener(type, fn);\r\n      });\r\n    }\r\n\r\n    if (element) {\r\n      // If the element is not null, register all event listeners on the trigger element.\r\n      this._ngZone.runOutsideAngular(() => {\r\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\r\n      });\r\n    }\r\n\r\n    this._triggerElement = element;\r\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\r\n    if (!this.rippleDisabled) {\r\n      this._isMousedown = true;\r\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\r\n    }\r\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\r\n    this._isMousedown = false;\r\n\r\n    // Fade-out all ripples that are completely visible and not persistent.\r\n    this._activeRipples.forEach(ripple => {\r\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\r\n        ripple.fadeOut();\r\n      }\r\n    });\r\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\r\n    if (this._isMousedown) {\r\n      this.onMouseup();\r\n    }\r\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\r\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\r\n  }\r\n\r\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\r\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\r\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\r\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\r\n  window.getComputedStyle(element).getPropertyValue('opacity');\r\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\r\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\r\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\r\n  return Math.sqrt(distX * distX + distY * distY);\r\n}\r\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldPlaceholderConflictError(): Error {\r\n  return Error('Placeholder attribute and child element were both specified.');\r\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdFormFieldDuplicatedHintError(align: string): Error {\r\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\r\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldMissingControlError(): Error {\r\n  return Error('md-form-field must contain a MdFormFieldControl. ' +\r\n      'Did you forget to add mdInput to the native input or textarea element?');\r\n}\r\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\r\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\r\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\r\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\r\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\r\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\r\n  static COMPLEX = '375ms';\r\n  static ENTERING = '225ms';\r\n  static EXITING = '195ms';\r\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Constructor} from './constructor';\r\nimport {ElementRef, Renderer2} from '@angular/core';\r\n\r\n/** @docs-private */\r\nexport interface CanColor {\r\n  color: ThemePalette;\r\n}\r\n\r\n/** @docs-private */\r\nexport interface HasRenderer {\r\n  _renderer: Renderer2;\r\n  _elementRef: ElementRef;\r\n}\r\n\r\n/** Possible color palette values.  */\r\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\r\n    : Constructor<CanColor> & T {\r\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\r\n      const /** @type {?} */ colorPalette = value || defaultColor;\r\n\r\n      if (colorPalette !== this._color) {\r\n        if (this._color) {\r\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\r\n        }\r\n        if (colorPalette) {\r\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\r\n        }\r\n\r\n        this._color = colorPalette;\r\n      }\r\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\r\n      super(...args);\r\n\r\n      // Set the default color that can be specified from the mixin.\r\n      this.color = defaultColor;\r\n    }\r\n  };\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Constructor} from './constructor';\r\n\r\n/** @docs-private */\r\nexport interface CanDisableRipple {\r\n  disableRipple: boolean;\r\n}\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\r\n    : Constructor<CanDisableRipple> & T {\r\n  return class extends base {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect is disabled or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Constructor} from './constructor';\r\nimport {CanDisable} from './disabled';\r\n\r\n/** @docs-private */\r\nexport interface HasTabIndex {\r\n  tabIndex: number;\r\n}\n/**\n * Mixin to augment a directive with a `tabIndex` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultTabIndex\n * @return {?}\n */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\r\n    : Constructor<HasTabIndex> & T {\r\n  return class extends base {\nprivate _tabIndex: number = defaultTabIndex;\n/**\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\r\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\r\n      this._tabIndex = value != null ? value : defaultTabIndex;\r\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\r\n      super(...args);\r\n    }\r\n  };\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\r\n\r\n\r\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\r\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\rIntended to be consumed as an Angular service.\rThis service is needed because native radio change events are only fired on the item currently\rbeing selected, and we still need to uncheck the previous selection.\r\rThis service does not *store* any IDs and names because they may change at any time, so it is\rless error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\r\\@param id ID of the item.\r\\@param name Name of the item.\n * @param {?} id\n * @param {?} name\n * @return {?}\n */\nnotify(id: string, name: string) {\r\n    for (let /** @type {?} */ listener of this._listeners) {\r\n      listener(id, name);\r\n    }\r\n  }\n/**\n * Listen for future changes to item selection.\r\\@return Function used to deregister listener\r\n * @param {?} listener\n * @return {?}\n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\r\n    this._listeners.push(listener);\r\n    return () => {\r\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\r\n        return listener !== registered;\r\n      });\r\n    };\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\r\n    parentDispatcher: UniqueSelectionDispatcher) {\r\n  return parentDispatcher || new UniqueSelectionDispatcher();\r\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\r\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\r\n  provide: UniqueSelectionDispatcher,\r\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\r\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\r\n};\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\rsimilar to Object.assign.\r\r\\@param dest The object which will have properties copied to it.\r\\@param sources The source objects from which properties will be copied.\n * @param {?} dest\n * @param {...?} sources\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\r\n  if (dest == null) {\r\n    throw TypeError('Cannot convert undefined or null to object');\r\n  }\r\n\r\n  for (let /** @type {?} */ source of sources) {\r\n    if (source != null) {\r\n      for (let /** @type {?} */ key in source) {\r\n        if (source.hasOwnProperty(key)) {\r\n          dest[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return dest;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Inject, Injectable, Optional} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\r\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\r\n  'long': [\r\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n    'October', 'November', 'December'\r\n  ],\r\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\r(https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\rbecause the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\r\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const /** @type {?} */ valuesArray = Array(length);\r\n  for (let /** @type {?} */ i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} matDateLocale\n */\nconstructor(  matDateLocale: string) {\r\n    super();\r\n    super.setLocale(matDateLocale);\r\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\rWithout this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\rthe result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\rwill produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\r\n    return date.getFullYear();\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\r\n    return date.getMonth();\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\r\n    return date.getDate();\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\r\n    return date.getDay();\r\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\r\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\r\n    }\r\n    return DEFAULT_MONTH_NAMES[style];\r\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\r\n      return range(31, i => this._stripDirectionalityCharacters(\r\n          dtf.format(new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DATE_NAMES;\r\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\r\n      return range(7, i => this._stripDirectionalityCharacters(\r\n          dtf.format(new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\r\n      return this._stripDirectionalityCharacters(dtf.format(date));\r\n    }\r\n    return String(this.getYear(date));\r\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\r\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n    return 0;\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\r\n    return this.getDate(this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date) + 1, 0));\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\r\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\r\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\r\n\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() != month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\r\n    return new Date();\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\r\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n    // parameters.\r\n    if (typeof value == 'number') {\r\n      return new Date(value);\r\n    }\r\n    return value ? new Date(Date.parse(value)) : null;\r\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\r\n    if (!this.isValid(date)) {\r\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n    }\r\n    if (SUPPORTS_INTL_API) {\r\n      if (this.useUtcForDisplay) {\r\n        date = new Date(Date.UTC(\r\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\r\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\r\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\r\n      }\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n      return this._stripDirectionalityCharacters(dtf.format(date));\r\n    }\r\n    return this._stripDirectionalityCharacters(date.toDateString());\r\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\r\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n    }\r\n\r\n    return newDate;\r\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ntoIso8601(date: Date): string {\r\n    return [\r\n      date.getUTCFullYear(),\r\n      this._2digit(date.getUTCMonth() + 1),\r\n      this._2digit(date.getUTCDate())\r\n    ].join('-');\r\n  }\n/**\n * @param {?} iso8601String\n * @return {?}\n */\nfromIso8601(iso8601String: string): Date | null {\r\n    // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n    // string is the right format first.\r\n    if (ISO_8601_REGEX.test(iso8601String)) {\r\n      let /** @type {?} */ d = new Date(iso8601String);\r\n      if (this.isValid(d)) {\r\n        return d;\r\n      }\r\n    }\r\n    return null;\r\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\r\n    return obj instanceof Date;\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\r\n    return !isNaN(date.getTime());\r\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\r\n    let /** @type {?} */ result = new Date(year, month, date);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\n/**\n * Pads a number to make it two digits.\r\\@param n The number to pad.\r\\@returns The padded number.\n * @param {?} n\n * @return {?}\n */\nprivate _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\rother browsers do not. We remove them to make output consistent and because they interfere with\rdate parsing.\r\\@param str The string to strip direction characters from.\r\\@returns The stripped string.\n * @param {?} str\n * @return {?}\n */\nprivate _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, '');\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\rWithout this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\rthe result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\rwill produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {MdDateFormats} from './date-formats';\r\n\r\n\r\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\r\n  parse: {\r\n    dateInput: null,\r\n  },\r\n  display: {\r\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\r\n    monthYearLabel: {year: 'numeric', month: 'short'},\r\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\r\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\r\nimport {NativeDateAdapter} from './native-date-adapter';\r\nimport {MD_DATE_FORMATS} from './date-formats';\r\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\r\n\r\nexport {MAT_DATE_LOCALE,MAT_DATE_LOCALE_PROVIDER,DateAdapter} from './date-adapter';\r\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\r\nexport {NativeDateAdapter} from './native-date-adapter';\r\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  providers: [\r\n    {provide: DateAdapter, useClass: NativeDateAdapter},\r\n    MAT_DATE_LOCALE_PROVIDER\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [NativeDateModule],\r\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {InjectionToken} from '@angular/core';\r\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MD_ERROR_GLOBAL_OPTIONS = new InjectionToken<ErrorOptions>('md-error-global-options');\r\n\r\nexport type ErrorStateMatcher =\r\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\r\n\r\nexport interface ErrorOptions {\r\n  errorStateMatcher?: ErrorStateMatcher;\r\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\r\n  const /** @type {?} */ isSubmitted = form && form.submitted;\r\n  return !!(control.invalid && (control.touched || isSubmitted));\r\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\r\n    form: FormGroupDirective | NgForm) {\r\n  const /** @type {?} */ isSubmitted = form && form.submitted;\r\n  return !!(control.invalid && (control.dirty || isSubmitted));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable, isDevMode} from '@angular/core';\r\nimport {HammerGestureConfig} from '@angular/platform-browser';\r\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\r\n\r\n  /* List of new event names to add to the gesture support list */\r\n  events: string[] = this._hammer ? [\r\n    'longpress',\r\n    'slide',\r\n    'slidestart',\r\n    'slideend',\r\n    'slideright',\r\n    'slideleft'\r\n  ] : [];\nconstructor() {\r\n    super();\r\n\r\n    if (!this._hammer && isDevMode()) {\r\n      console.warn(\r\n        'Could not find HammerJS. Certain Angular Material ' +\r\n        'components may not work correctly.'\r\n      );\r\n    }\r\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\r\rOur gesture names come from the Material Design gestures spec:\rhttps://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\r\rMore information on default recognizers can be found in Hammer docs:\rhttp://hammerjs.github.io/recognizer-pan/\rhttp://hammerjs.github.io/recognizer-press/\r\r\\@param element Element to which to assign the new HammerJS gestures.\r\\@returns Newly-created HammerJS instance.\n * @param {?} element\n * @return {?}\n */\nbuildHammer(element: HTMLElement): HammerInstance {\r\n    const /** @type {?} */ mc = new this._hammer(element);\r\n\r\n    // Default Hammer Recognizers.\r\n    let /** @type {?} */ pan = new this._hammer.Pan();\r\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\r\n    let /** @type {?} */ press = new this._hammer.Press();\r\n\r\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\r\n    // Otherwise the previous `recognizeWith` will be dropped.\r\n    // TODO: Confirm threshold numbers with Material Design UX Team\r\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\r\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\r\n\r\n    // Overwrite the default `pan` event to use the swipe event.\r\n    pan.recognizeWith(swipe);\r\n\r\n    // Add customized gestures to Hammer manager\r\n    mc.add([swipe, press, pan, slide, longpress]);\r\n\r\n    return /** @type {?} */(( mc as HammerInstance));\r\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\r\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\r\n\r\n    inheritances.push(base);\r\n    inheritances.forEach(item => recognizer.recognizeWith(item));\r\n\r\n    return recognizer;\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  NgModule,\r\n  Directive,\r\n  Renderer2,\r\n  ElementRef,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\rLine elements can be extracted with a \\@ContentChildren(MdLine) query, then\rcounted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\r\n  host: {'class': 'mat-line'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\r\\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\r\n    this._setLineClass(this._lines.length);\r\n\r\n    this._lines.changes.subscribe(() => {\r\n      this._setLineClass(this._lines.length);\r\n    });\r\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\r\n    this._resetClasses();\r\n    if (count === 2 || count === 3) {\r\n      this._setClass(`mat-${count}-line`, true);\r\n    } else if (count > 3) {\r\n      this._setClass(`mat-multi-line`, true);\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\r\n    this._setClass('mat-2-line', false);\r\n    this._setClass('mat-3-line', false);\r\n    this._setClass('mat-multi-line', false);\r\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\r\n    if (isAdd) {\r\n      this._renderer.addClass(this._element.nativeElement, className);\r\n    } else {\r\n      this._renderer.removeClass(this._element.nativeElement, className);\r\n    }\r\n  }\r\n\r\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule],\r\n  exports: [MdLine, MdCommonModule],\r\n  declarations: [MdLine],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\r\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\r\n    this._renderer.fadeOutRipple(this);\r\n  }\r\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  Inject,\r\n  NgZone,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n  InjectionToken,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\r\nimport {RippleRef} from './ripple-ref';\r\n\r\nexport interface RippleGlobalOptions {\r\n  disabled?: boolean;\r\n  baseSpeedFactor?: number;\r\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\r\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\r\n\r\n  /**\r\n   * The element that triggers the ripple when click events are received. Defaults to the\r\n   * directive's host element.\r\n   */\r\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\r\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\r\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\rthan originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\rby using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\rwill be the distance from the center of the ripple to the furthest corner of the host element's\rbounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\rsetting it to 0.5 will cause the animations to take twice as long.\rA changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * @return {?}\n */\nget _matRippleTrigger() { return this.trigger; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleTrigger(v) { this.trigger = v; }\n/**\n * @return {?}\n */\nget _matRippleCentered() { return this.centered; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleCentered(v) { this.centered = v; }\n/**\n * @return {?}\n */\nget _matRippleDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matRippleRadius() { return this.radius; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleRadius(v) { this.radius = v; }\n/**\n * @return {?}\n */\nget _matRippleSpeedFactor() { return this.speedFactor; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleSpeedFactor(v) { this.speedFactor = v; }\n/**\n * @return {?}\n */\nget _matRippleColor() { return this.color; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleColor(v) { this.color = v; }\n/**\n * @return {?}\n */\nget _matRippleUnbounded() { return this.unbounded; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleUnbounded(v) { this.unbounded = v; }\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\r\n    elementRef: ElementRef,\r\n    ngZone: NgZone,\r\n    ruler: ViewportRuler,\r\n    platform: Platform,\r\n      globalOptions: RippleGlobalOptions\r\n  ) {\r\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\r\n    this._globalOptions = globalOptions ? globalOptions : {};\r\n\r\n    this._updateRippleRenderer();\r\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    if ((changes['trigger'] || changes['_matRippleTrigger']) && this.trigger) {\r\n      this._rippleRenderer.setTriggerElement(this.trigger);\r\n    }\r\n\r\n    this._updateRippleRenderer();\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    // Set the trigger element to null to cleanup all listeners.\r\n    this._rippleRenderer.setTriggerElement(null);\r\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\r\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\r\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\r\n    this._rippleRenderer.fadeOutAll();\r\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\r\n    return {\r\n      centered: this.centered,\r\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\r\n      radius: this.radius,\r\n      color: this.color\r\n    };\r\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\n_updateRippleRenderer() {\r\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\r\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\r\n  exportAs: 'mdRipple, matRipple',\r\n  host: {\r\n    'class': 'mat-ripple',\r\n    '[class.mat-ripple-unbounded]': 'unbounded'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n'_matRippleTrigger': [{ type: Input, args: ['matRippleTrigger', ] },],\n'_matRippleCentered': [{ type: Input, args: ['matRippleCentered', ] },],\n'_matRippleDisabled': [{ type: Input, args: ['matRippleDisabled', ] },],\n'_matRippleRadius': [{ type: Input, args: ['matRippleRadius', ] },],\n'_matRippleSpeedFactor': [{ type: Input, args: ['matRippleSpeedFactor', ] },],\n'_matRippleColor': [{ type: Input, args: ['matRippleColor', ] },],\n'_matRippleUnbounded': [{ type: Input, args: ['matRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\rthan originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\rby using the `launch()` method.\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\rwill be the distance from the center of the ripple to the furthest corner of the host element's\rbounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\rsetting it to 0.5 will cause the animations to take twice as long.\rA changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MdCommonModule} from '../common-behaviors/common-module';\r\nimport {MdRipple} from './ripple';\r\n\r\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\r\nexport {RippleRef, RippleState} from './ripple-ref';\r\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\r\n  exports: [MdRipple, MdCommonModule],\r\n  declarations: [MdRipple],\r\n  providers: [VIEWPORT_RULER_PROVIDER],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\r\n\r\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\rMeant to be used when the checkbox is purely decorative and a large number of them will be\rincluded, such as for the options in a multi-select. Uses no SVGs or complex animations.\rNote that theming is meant to be handled by the parent element, e.g.\r`mat-primary .mat-pseudo-checkbox`.\r\rNote that this component will be completely invisible to screen-reader users. This is *not*\rinterchangeable with <md-checkbox> and should *not* be used if the user would directly interact\rwith the checkbox. The pseudo-checkbox should only be used as an implementation detail of\rmore complex components that appropriately handle selected / checked state.\r\\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\r\n  styleUrls: ['pseudo-checkbox.css'],\r\n  template: '',\r\n  host: {\r\n    'class': 'mat-pseudo-checkbox',\r\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\r\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\r\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdPseudoCheckboxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  exports: [MdPseudoCheckbox],\r\n  declarations: [MdPseudoCheckbox]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPseudoCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckboxModule.ctorParameters;\n}\n\r\n\r\n\r\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\r\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdOptgroupBase { }\r\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\r\n\r\n// Counter for unique group ids.\r\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-optgroup, mat-optgroup',\r\n  templateUrl: 'optgroup.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled'],\r\n  host: {\r\n    'class': 'mat-optgroup',\r\n    'role': 'group',\r\n    '[class.mat-optgroup-disabled]': 'disabled',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-labelledby]': '_labelId',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {MATERIAL_COMPATIBILITY_MODE} from '../compatibility/compatibility';\r\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\rthe component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\r\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\r\n    if (value !== this._multiple) {\r\n      this._multiple = value;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\r\n    this._disableRipple = value;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MdOptgroup) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\rAn active option displays styles as if it is focused, but the\rfocus is actually retained somewhere else. This comes in handy\rfor components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\r\n    return this._active;\r\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\rselect's trigger.\n * @return {?}\n */\nget viewValue(): string {\r\n    // TODO(kara): Add input property alternative for node envs.\r\n    return (this._getHostElement().textContent || '').trim();\r\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\r\n    this._selected = true;\r\n    this._changeDetectorRef.markForCheck();\r\n    this._emitSelectionChangeEvent();\r\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\r\n    this._selected = false;\r\n    this._changeDetectorRef.markForCheck();\r\n    this._emitSelectionChangeEvent();\r\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\r\n    const /** @type {?} */ element = this._getHostElement();\r\n\r\n    if (typeof element.focus === 'function') {\r\n      element.focus();\r\n    }\r\n  }\n/**\n * This method sets display styles on the option to make it appear\ractive. This is used by the ActiveDescendantKeyManager so key\revents will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\r\n    if (!this._active) {\r\n      this._active = true;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * This method removes display styles on the option that made it appear\ractive. This is used by the ActiveDescendantKeyManager so key\revents will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\r\n    if (this._active) {\r\n      this._active = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * Gets the label to be used when determining whether the option should be focused.\n * @return {?}\n */\ngetLabel(): string {\r\n    return this.viewValue;\r\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\r\n      this._selectViaInteraction();\r\n\r\n      // Prevent the page from scrolling down and form submits.\r\n      event.preventDefault();\r\n    }\r\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\rdetermine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\r\n    if (!this.disabled) {\r\n      this._selected = this.multiple ? !this._selected : true;\r\n      this._changeDetectorRef.markForCheck();\r\n      this._emitSelectionChangeEvent(true);\r\n    }\r\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\r\n    return this.disabled ? '-1' : '0';\r\n  }\n/**\n * Gets the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\r\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\r\n  }\n/**\n * Counts the amount of option group labels that precede the specified option.\r\\@param optionIndex Index of the option at which to start counting.\r\\@param options Flat list of all of the options.\r\\@param optionGroups Flat list of all of the option groups.\n * @param {?} optionIndex\n * @param {?} options\n * @param {?} optionGroups\n * @return {?}\n */\nstatic countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MdOption>,\r\n    optionGroups: QueryList<MdOptgroup>): number {\r\n\r\n    if (optionGroups.length) {\r\n      let /** @type {?} */ optionsArray = options.toArray();\r\n      let /** @type {?} */ groups = optionGroups.toArray();\r\n      let /** @type {?} */ groupCounter = 0;\r\n\r\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\r\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\r\n          groupCounter++;\r\n        }\r\n      }\r\n\r\n      return groupCounter;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-option, mat-option',\r\n  host: {\r\n    'role': 'option',\r\n    '[attr.tabindex]': '_getTabIndex()',\r\n    '[class.mat-selected]': 'selected',\r\n    '[class.mat-option-multiple]': 'multiple',\r\n    '[class.mat-active]': 'active',\r\n    '[id]': 'id',\r\n    '[attr.aria-selected]': 'selected.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[class.mat-option-disabled]': 'disabled',\r\n    '(click)': '_selectViaInteraction()',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    'class': 'mat-option',\r\n  },\r\n  templateUrl: 'option.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/** @type {?} */\nMdOption.prototype._multiple;\n/** @type {?} */\nMdOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._changeDetectorRef;\n/** @type {?} */\nMdOption.prototype.group;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MdRippleModule} from '../ripple/index';\r\nimport {MdPseudoCheckboxModule} from '../selection/index';\r\nimport {MdOption} from './option';\r\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdRippleModule, CommonModule, MdPseudoCheckboxModule],\r\n  exports: [MdOption, MdOptgroup],\r\n  declarations: [MdOption, MdOptgroup]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\r\n\r\n\r\nexport {MdOptionSelectionChange,MdOption} from './option';\r\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\r\\@param element\r\\@param transformValue\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\r\n  // It's important to trim the result, because the browser will ignore the set operation\r\n  // if the string contains only whitespace.\r\n  let /** @type {?} */ value = transformValue.trim();\r\n\r\n  element.style.transform = value;\r\n  element.style.webkitTransform = value;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nexport class MdError {\r\n   id: string = `mat-error-${nextUniqueId++}`;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-error, mat-error',\r\n  host: {\r\n    'class': 'mat-error',\r\n    'role': 'alert',\r\n    '[attr.id]': 'id',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdError_tsickle_Closure_declarations() {\n/** @type {?} */\nMdError.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdError.ctorParameters;\n/** @type {?} */\nMdError.propDecorators;\n/** @type {?} */\nMdError.prototype.id;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Observable} from 'rxjs/Observable';\r\nimport {NgControl} from '@angular/forms';\n/**\n * An interface which allows a control to work inside of a `MdFormField`.\n * @abstract\n */\nexport abstract class MdFormFieldControl<T> {\n/**\n * The value of the control.\n */\nvalue: T;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\rneeds to run change detection.\n */\nreadonly stateChanges: Observable<void>;\n/**\n * The element ID for this control.\n */\nreadonly id: string;\n/**\n * The placeholder for this control.\n */\nreadonly placeholder: string;\n/**\n * Gets the NgControl for this control.\n */\nreadonly ngControl: NgControl | null;\n/**\n * Whether the control is focused.\n */\nreadonly focused: boolean;\n/**\n * Whether the control is empty.\n */\nreadonly empty: boolean;\n/**\n * Whether the `MdFormField` label should try to float.\n */\nreadonly shouldPlaceholderFloat: boolean;\n/**\n * Whether the control is required.\n */\nreadonly required: boolean;\n/**\n * Whether the control is disabled.\n */\nreadonly disabled: boolean;\n/**\n * Whether the control is in an error state.\n */\nreadonly errorState: boolean;\n/**\n * An optional name for the control type that can be used to distinguish `md-form-field` elements\rbased on their control type. The form field will add a class,\r`mat-form-field-type-{{controlType}}` to its root element.\n */\nreadonly controlType?: string;\n/**\n * Sets the list of element IDs that currently describe this control.\n * @abstract\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) {}\n/**\n * Handles a click on the control's container.\n * @abstract\n * @param {?} event\n * @return {?}\n */\nonContainerClick(event: MouseEvent) {}\r\n}\n\nfunction MdFormFieldControl_tsickle_Closure_declarations() {\n/**\n * The value of the control.\n * @type {?}\n */\nMdFormFieldControl.prototype.value;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\rneeds to run change detection.\n * @type {?}\n */\nMdFormFieldControl.prototype.stateChanges;\n/**\n * The element ID for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.id;\n/**\n * The placeholder for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.placeholder;\n/**\n * Gets the NgControl for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.ngControl;\n/**\n * Whether the control is focused.\n * @type {?}\n */\nMdFormFieldControl.prototype.focused;\n/**\n * Whether the control is empty.\n * @type {?}\n */\nMdFormFieldControl.prototype.empty;\n/**\n * Whether the `MdFormField` label should try to float.\n * @type {?}\n */\nMdFormFieldControl.prototype.shouldPlaceholderFloat;\n/**\n * Whether the control is required.\n * @type {?}\n */\nMdFormFieldControl.prototype.required;\n/**\n * Whether the control is disabled.\n * @type {?}\n */\nMdFormFieldControl.prototype.disabled;\n/**\n * Whether the control is in an error state.\n * @type {?}\n */\nMdFormFieldControl.prototype.errorState;\n/**\n * An optional name for the control type that can be used to distinguish `md-form-field` elements\rbased on their control type. The form field will add a class,\r`mat-form-field-type-{{controlType}}` to its root element.\n * @type {?}\n */\nMdFormFieldControl.prototype.controlType;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n */\nid: string = `mat-hint-${nextUniqueId++}`;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-hint, mat-hint',\r\n  host: {\r\n    'class': 'mat-hint',\r\n    '[class.mat-right]': 'align == \"end\"',\r\n    '[attr.id]': 'id',\r\n    // Remove align attribute to prevent it from interfering with layout.\r\n    '[attr.align]': 'null',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive} from '@angular/core';\n/**\n * The floating placeholder for an `MdFormField`.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-placeholder, mat-placeholder'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive} from '@angular/core';\n/**\n * Prefix to be placed the the front of the form field.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdPrefix], [matPrefix]',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive} from '@angular/core';\n/**\n * Suffix to be placed at the end of the form field.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdSuffix], [matSuffix]',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["enumerable","configurable","Object","defineProperty","MdFormField","prototype","get","this","_hintLabel","set","value","_processHints","_floatPlaceholder","_placeholderOptions","float","_changeDetectorRef","markForCheck","_this","_validateControlChild","_control","controlType","startWith","call","stateChanges","subscribe","_syncDescribedByIds","_hintChildren","changes","ngAfterContentChecked","_subscriptAnimationState","detectChanges","_shouldForward","prop","ngControl","_hasPlaceholder","placeholder","_placeholderChild","_errorChildren","length","errorState","_placeholder","_canPlaceholderFloat","_showAlwaysAnimate","first","fromEvent","nativeElement","_validatePlaceholders","getMdFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","forEach","hint","align","hintLabel","getMdFormFieldDuplicatedHintError","ids","_getDisplayedMessages","startHint","push","id","_hintLabelId","endHint","map","mdError","setDescribedByIds","getMdFormFieldMissingControlError","decorators","type","Component","args","selector","template","state","style","opacity","transform","transition","animate","host","class","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-focused]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-invalid]","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","ctorParameters","ElementRef","Renderer2","ChangeDetectorRef","undefined","Optional","Inject","MD_PLACEHOLDER_GLOBAL_OPTIONS","propDecorators","color","Input","dividerColor","hideRequiredMarker","floatPlaceholder","underlineRef","ViewChild","_connectionContainerRef","ContentChildren","MdHint","_suffixChildren","MdSuffix","MdFormFieldModule","MdChipSelectionChange","source","selected","isUserInput","MdChipBase","_renderer","_elementRef","class_2","_i","arguments","_super","apply","_color","colorPalette","defaultColor","addClass","MdBasicChip","MdChip","onRemove","removed","tslib_1.__extends","_selected","_removable","coerceBooleanProperty","selectable","toString","select","selectionChange","emit","deselect","selectViaInteraction","toggleSelected","focus","remove","removable","_handleClick","event","preventDefault","stopPropagation","disabled","keyCode","DELETE","BACKSPACE","SPACE","_blur","_hasFocus","_onBlur","next","chip","_MdChipMixinBase","Directive","inputs","exportAs","tabindex","role","[class.mat-chip-selected]","destroyed","Output","destroy","MdChipRemove","_parentChip","nextUniqueId","MdChipListChange","_userTabIndex","_compareWith","o1","o2","valueChange","EventEmitter","MdChipList","multiple","_selectionModel","_multiple","fn","_value","writeValue","newValue","_id","_uid","_required","_chipInput","focused","empty","_disabled","_parentForm","submitted","isInvalid","isTouched","isSubmitted","_selectable","ngAfterContentInit","_keyManager","FocusKeyManager","chips","withWrap","_changeSubscription","_resetChips","_initializeSelection","ngOnInit","SelectionModel","ngOnDestroy","_tabOutSubscription","unsubscribe","_dropSubscriptions","registerInput","inputElement","_ariaDescribedby","join","_setSelectionByValue","_onTouched","setDisabledState","setProperty","setFirstItemActive","_focusInput","_keydown","code","target","isInputEmpty","_isInputEmpty","isRtl","_dir","isPrevKey","RIGHT_ARROW","LEFT_ARROW","classList","contains","setPreviousItemActive","setNextItemActive","onKeydown","_updateTabIndex","_tabIndex","_updateKeyManager","chipIndex","setActiveItem","_updateFocusForDestroyedChips","focusChip","activeItem","chipsArray","_lastDestroyedIndex","_isValidIndex","index","element","nodeName","toLowerCase","_clearSelection","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","Promise","resolve","then","skip","clear","_propagateChanges","fallbackValue","valueToEmit","change","_onChange","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","chipFocusChanges","toArray","indexOf","chipBlurChanges","_","_chipRemoveSubscription","chipRemoveChanges","[attr.aria-required]","[class.mat-chip-list-invalid]","(focus)","(blur)","(keydown)","Directionality","NgForm","NgControl","Self","compareWith","ariaOrientation","MdChipInput","separatorKeyCodes","ENTER","chipEnd","_matChipInputTokenEnd","_inputElement","_chipList","_addOnBlur","chipList","__extends","d","b","__","constructor","extendStatics","create","mixinDisabled","base","class_1","key","valuesArray","window","getComputedStyle","getPropertyValue","distanceToFurthestCorner","x","y","rect","distX","Math","max","abs","left","right","distY","top","bottom","sqrt","Error","setPrototypeOf","__proto__","p","hasOwnProperty","AnimationCurves","STANDARD_CURVE","DECELERATION_CURVE","AnimationDurations","NoConflictStyleCompatibilityMode","MATERIAL_SANITY_CHECKS","UniqueSelectionDispatcher","listen","listener","_listeners","Injectable","DateAdapter","_localeChanges","getDate","date","getDayOfWeek","getDateNames","getYearName","getFirstDayOfWeek","clone","parse","parseFormat","min","DEFAULT_DATE_NAMES","range","i","String","ISO_8601_REGEX","useUtcForDisplay","setLocale","matDateLocale","NativeDateAdapter","getYear","getDay","DEFAULT_MONTH_NAMES","getDayOfWeekNames","_stripDirectionalityCharacters","dtf","format","getNumDaysInMonth","createDate","getMonth","year","month","result","today","Date","displayFormat","isValid","Intl","DateTimeFormat","locale","toDateString","addCalendarYears","years","addCalendarMonths","_createDateWithOverflow","days","_2digit","getUTCMonth","fromIso8601","iso8601String","test","isNaN","getTime","setFullYear","MD_DATE_FORMATS","InjectionToken","MD_NATIVE_DATE_FORMATS","monthYearLabel","dateA11yLabel","day","monthYearA11yLabel","NativeDateModule","NgModule","MAT_DATE_LOCALE_PROVIDER","MdNativeDateModule","GestureConfig","_hammer","isDevMode","console","warn","buildHammer","mc","pan","Pan","press","Press","slide","_createRecognizer","threshold","swipe","longpress","time","recognizeWith","options","inheritances","MdLine","MdLineModule","exports","MdCommonModule","RippleState","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","config","fadeOutRipple","RippleRef","RippleRenderer","elementRef","_ngZone","_ruler","platform","_triggerEvents","Map","rippleDisabled","isBrowser","_containerElement","onMousedown","bind","setTriggerElement","containerRect","getBoundingClientRect","centered","scrollPosition","getViewportScrollPosition","pageX","offsetX","ripple","radius","_activeRipples","add","rippleRef","persistent","_isMousedown","rippleEl","runTimeoutOutsideZone","removeChild","_triggerElement","runOutsideAngular","addEventListener","fadeOut","delay","MD_RIPPLE_GLOBAL_OPTIONS","MdRipple","ngZone","ruler","globalOptions","_rippleRenderer","_globalOptions","_updateRippleRenderer","v","trigger","speedFactor","fadeInRipple","pageY","NgZone","ViewportRuler","Platform","unbounded","_matRippleTrigger","_matRippleCentered","_matRippleUnbounded","MdRippleModule","imports","PlatformModule","ScrollDispatchModule","declarations","providers","VIEWPORT_RULER_PROVIDER","MdPseudoCheckbox","styles","[class.mat-pseudo-checkbox-checked]","MdPseudoCheckboxModule","MdOptgroupBase","_MdOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","MdOptgroup","[class.mat-optgroup-disabled]","label","_uniqueIdCounter","MdOptionSelectionChange","MdOption","_element","group","onSelectionChange","_emitSelectionChangeEvent","_getHostElement","_active","viewValue","_selectViaInteraction","countGroupLabelsBeforeOption","optionIndex","optionGroups","optionsArray","groups","groupCounter","[attr.tabindex]","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[id]","[attr.aria-selected]","[attr.aria-disabled]","[class.mat-option-disabled]","(click)","viewProviders","provide","MATERIAL_COMPATIBILITY_MODE","useValue","MdOptionModule","CommonModule","MdError","[attr.id]","MdFormFieldControl","onContainerClick","nextUniqueId$2","[class.mat-right]","[attr.align]","MdPlaceholder","MdPrefix"],"mappings":"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"}