{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/toolbar/index.ts","../../src/lib/version.ts","../../src/lib/core/line/line.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/stepper/index.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/index.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/index.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/sort/index.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/sidenav/index.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/index.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/paginator/index.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-bar/index.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/radio/index.ts","../../src/lib/select/select.ts","../../src/lib/select/select-module.ts","../../src/lib/select/index.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tooltip/index.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/menu/index.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-errors.ts","../../src/lib/list/list.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/index.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/grid-list/index.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-errors.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/input/index.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/accordion-item.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/expansion/index.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/dialog/index.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/icon/index.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/checkbox/index.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/chips/index.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button/index.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/button-toggle/index.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/card/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/form-field/index.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/autocomplete/index.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/datepicker/coerce-date-property.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/progress-spinner/index.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {auditTime, takeUntil} from '@angular/cdk/rxjs';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  QueryList,\r\n  Renderer2,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple, MATERIAL_COMPATIBILITY_MODE,\r\n  MD_RIPPLE_GLOBAL_OPTIONS,\r\n  MdRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  RippleGlobalOptions,\r\n  ThemePalette,\r\n} from '@angular/material/core';\r\nimport {fromEvent} from 'rxjs/observable/fromEvent';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdInkBar} from '../ink-bar';\n/**\n * \\@docs-private\n */\nexport class MdTabNavBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdTabNavBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNavBase.prototype._renderer;\n/** @type {?} */\nMdTabNavBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdTabNavMixinBase = mixinDisableRipple(mixinColor(MdTabNavBase, 'primary'));\n/**\n * Navigation component matching the styles of the tab group header.\rProvides anchored navigation with animated ink bar.\n */\nexport class MdTabNav extends _MdTabNavMixinBase implements AfterContentInit, CanColor,\r\n    CanDisableRipple, OnDestroy {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\r\n\r\n  _activeLinkChanged: boolean;\r\n  _activeLinkElement: ElementRef;\r\n\r\n   _inkBar: MdInkBar;\n/**\n * Query list of all tab links of the tab navigation.\n */\n_tabLinks: QueryList<MdTabLink>;\n/**\n * Background color of the tab nav.\n * @return {?}\n */\nget backgroundColor(): ThemePalette { return this._backgroundColor; }\n/**\n * @param {?} value\n * @return {?}\n */\nset backgroundColor(value: ThemePalette) {\r\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\r\n\r\n    this._renderer.removeClass(nativeElement, `mat-background-${this.backgroundColor}`);\r\n\r\n    if (value) {\r\n      this._renderer.addClass(nativeElement, `mat-background-${value}`);\r\n    }\r\n\r\n    this._backgroundColor = value;\r\n  }\nprivate _backgroundColor: ThemePalette;\n/**\n * Whether ripples should be disabled for all links or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\r\n    this._disableRipple = coerceBooleanProperty(value);\r\n    this._setLinkDisableRipple();\r\n  }\nprivate _disableRipple: boolean = false;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(renderer: Renderer2,\r\n              elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\r\n    super(renderer, elementRef);\r\n  }\n/**\n * Notifies the component that the active link has been changed.\n * @param {?} element\n * @return {?}\n */\nupdateActiveLink(element: ElementRef) {\r\n    this._activeLinkChanged = this._activeLinkElement != element;\r\n    this._activeLinkElement = element;\r\n\r\n    if (this._activeLinkChanged) {\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      let /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\r\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\r\n          auditTime.call(fromEvent(window, 'resize'), 10) :\r\n          observableOf(null);\r\n\r\n      return takeUntil.call(merge(dirChange, resize), this._onDestroy).subscribe(() => {\r\n        this._alignInkBar();\r\n      });\r\n    });\r\n\r\n    this._setLinkDisableRipple();\r\n  }\n/**\n * Checks if the active link has been changed and, if so, will update the ink bar.\n * @return {?}\n */\nngAfterContentChecked(): void {\r\n    if (this._activeLinkChanged) {\r\n      this._alignInkBar();\r\n      this._activeLinkChanged = false;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\n/**\n * Aligns the ink bar to the active link.\n * @return {?}\n */\n_alignInkBar(): void {\r\n    if (this._activeLinkElement) {\r\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\r\n    }\r\n  }\n/**\n * Sets the `disableRipple` property on each link of the navigation bar.\n * @return {?}\n */\nprivate _setLinkDisableRipple() {\r\n    if (this._tabLinks) {\r\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',\r\n  inputs: ['color', 'disableRipple'],\r\n  templateUrl: 'tab-nav-bar.html',\r\n  styleUrls: ['tab-nav-bar.css'],\r\n  host: {'class': 'mat-tab-nav-bar'},\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabLinks': [{ type: ContentChildren, args: [forwardRef(() => MdTabLink), {descendants: true}, ] },],\n'backgroundColor': [{ type: Input },],\n};\n}\n\nfunction MdTabNav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabNav.ctorParameters;\n/** @type {?} */\nMdTabNav.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nMdTabNav.prototype._onDestroy;\n/** @type {?} */\nMdTabNav.prototype._activeLinkChanged;\n/** @type {?} */\nMdTabNav.prototype._activeLinkElement;\n/** @type {?} */\nMdTabNav.prototype._inkBar;\n/**\n * Query list of all tab links of the tab navigation.\n * @type {?}\n */\nMdTabNav.prototype._tabLinks;\n/** @type {?} */\nMdTabNav.prototype._backgroundColor;\n/** @type {?} */\nMdTabNav.prototype._disableRipple;\n/** @type {?} */\nMdTabNav.prototype._dir;\n/** @type {?} */\nMdTabNav.prototype._ngZone;\n/** @type {?} */\nMdTabNav.prototype._changeDetectorRef;\n}\n\nexport class MdTabLinkBase {}\r\nexport const /** @type {?} */ _MdTabLinkMixinBase = mixinDisabled(MdTabLinkBase);\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nexport class MdTabLink extends _MdTabLinkMixinBase implements OnDestroy, CanDisable {\n/**\n * Whether the tab link is active or not.\n */\nprivate _isActive: boolean = false;\n/**\n * Whether the ripples for this tab should be disabled or not.\n */\nprivate _disableRipple: boolean = false;\n/**\n * Reference to the instance of the ripple for the tab link.\n */\nprivate _tabLinkRipple: MdRipple;\n/**\n * Whether the link is active.\n * @return {?}\n */\nget active(): boolean { return this._isActive; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: boolean) {\r\n    this._isActive = value;\r\n    if (value) {\r\n      this._mdTabNavBar.updateActiveLink(this._elementRef);\r\n    }\r\n  }\n/**\n * Whether ripples should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\r\n    this._disableRipple = value;\r\n    this._tabLinkRipple.disabled = this.disableRipple;\r\n    this._tabLinkRipple._updateRippleRenderer();\r\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\r\n    return this.disabled ? -1 : 0;\r\n  }\n/**\n * @param {?} _mdTabNavBar\n * @param {?} _elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(private _mdTabNavBar: MdTabNav,\nprivate _elementRef: ElementRef,\r\n              ngZone: NgZone,\r\n              ruler: ViewportRuler,\r\n              platform: Platform,\r\n                globalOptions: RippleGlobalOptions) {\r\n    super();\r\n\r\n    // Manually create a ripple instance that uses the tab link element as trigger element.\r\n    // Notice that the lifecycle hooks for the ripple config won't be called anymore.\r\n    this._tabLinkRipple = new MdRipple(_elementRef, ngZone, ruler, platform, globalOptions);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    // Manually call the ngOnDestroy lifecycle hook of the ripple instance because it won't be\r\n    // called automatically since its instance is not created by Angular.\r\n    this._tabLinkRipple.ngOnDestroy();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-tab-link], [mat-tab-link], [mdTabLink], [matTabLink]',\r\n  inputs: ['disabled'],\r\n  host: {\r\n    'class': 'mat-tab-link',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.tabindex]': 'tabIndex',\r\n    '[class.mat-tab-disabled]': 'disabled'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdTabNav, },\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input },],\n};\n}\n\nfunction MdTabLink_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLink.ctorParameters;\n/** @type {?} */\nMdTabLink.propDecorators;\n/**\n * Whether the tab link is active or not.\n * @type {?}\n */\nMdTabLink.prototype._isActive;\n/**\n * Whether the ripples for this tab should be disabled or not.\n * @type {?}\n */\nMdTabLink.prototype._disableRipple;\n/**\n * Reference to the instance of the ripple for the tab link.\n * @type {?}\n */\nMdTabLink.prototype._tabLinkRipple;\n/** @type {?} */\nMdTabLink.prototype._mdTabNavBar;\n/** @type {?} */\nMdTabLink.prototype._elementRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MdCommonModule, MdRippleModule} from '@angular/material/core';\r\nimport {MdInkBar} from './ink-bar';\r\nimport {MdTab} from './tab';\r\nimport {MdTabBody} from './tab-body';\r\nimport {MdTabGroup} from './tab-group';\r\nimport {MdTabHeader} from './tab-header';\r\nimport {MdTabLabel} from './tab-label';\r\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\r\nimport {MdTabLink, MdTabNav} from './tab-nav-bar/tab-nav-bar';\nexport class MdTabsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    CommonModule,\r\n    MdCommonModule,\r\n    PortalModule,\r\n    MdRippleModule,\r\n    ObserversModule,\r\n    ScrollDispatchModule,\r\n  ],\r\n  // Don't export all components because some are only to be used internally.\r\n  exports: [\r\n    MdCommonModule,\r\n    MdTabGroup,\r\n    MdTabLabel,\r\n    MdTab,\r\n    MdTabNav,\r\n    MdTabLink,\r\n  ],\r\n  declarations: [\r\n    MdTabGroup,\r\n    MdTabLabel,\r\n    MdTab,\r\n    MdInkBar,\r\n    MdTabLabelWrapper,\r\n    MdTabNav,\r\n    MdTabLink,\r\n    MdTabBody,\r\n    MdTabHeader\r\n  ],\r\n  providers: [VIEWPORT_RULER_PROVIDER],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTabsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabsModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  ViewEncapsulation,\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport {CanColor, MATERIAL_COMPATIBILITY_MODE, mixinColor} from '@angular/material/core';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-toolbar-row, mat-toolbar-row',\r\n  host: {'class': 'mat-toolbar-row'},\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdToolbarBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdToolbarBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarBase.prototype._renderer;\n/** @type {?} */\nMdToolbarBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdToolbarMixinBase = mixinColor(MdToolbarBase);\nexport class MdToolbar extends _MdToolbarMixinBase implements CanColor {\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\r\n    super(renderer, elementRef);\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-toolbar, mat-toolbar',\r\n  templateUrl: 'toolbar.html',\r\n  styleUrls: ['toolbar.css'],\r\n  inputs: ['color'],\r\n  host: {\r\n    'class': 'mat-toolbar',\r\n    'role': 'toolbar'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MdToolbar, MdToolbarRow} from './toolbar';\nexport class MdToolbarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule],\r\n  exports: [MdToolbar, MdToolbarRow, MdCommonModule],\r\n  declarations: [MdToolbar, MdToolbarRow],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdToolbarModule,MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar,MatToolbar,MatToolbarBase,MatToolbarModule,MatToolbarRow} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Version} from '@angular/core';\n/**\n * Current version of Angular Material.\n */\nexport const VERSION = new Version('2.0.0-beta.11');\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  NgModule,\r\n  Directive,\r\n  Renderer2,\r\n  ElementRef,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\rLine elements can be extracted with a \\@ContentChildren(MdLine) query, then\rcounted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\r\n  host: {'class': 'mat-line'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\r\\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\r\n    this._setLineClass(this._lines.length);\r\n\r\n    this._lines.changes.subscribe(() => {\r\n      this._setLineClass(this._lines.length);\r\n    });\r\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\r\n    this._resetClasses();\r\n    if (count === 2 || count === 3) {\r\n      this._setClass(`mat-${count}-line`, true);\r\n    } else if (count > 3) {\r\n      this._setClass(`mat-multi-line`, true);\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\r\n    this._setClass('mat-2-line', false);\r\n    this._setClass('mat-3-line', false);\r\n    this._setClass('mat-multi-line', false);\r\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\r\n    if (isAdd) {\r\n      this._renderer.addClass(this._element.nativeElement, className);\r\n    } else {\r\n      this._renderer.removeClass(this._element.nativeElement, className);\r\n    }\r\n  }\r\n\r\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule],\r\n  exports: [MdLine, MdCommonModule],\r\n  declarations: [MdLine],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\rused to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\r\n    OCT = 9, NOV = 10, DEC = 11;\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive} from '@angular/core';\r\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\r\nimport {MdStepper} from './stepper';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdStepperNext = CdkStepperNext;\r\nexport const /** @type {?} */ _MdStepperPrevious = CdkStepperPrevious;\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nexport class MdStepperNext extends _MdStepperNext { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'button[mdStepperNext], button[matStepperNext]',\r\n  host: {'(click)': '_stepper.next()'},\r\n  providers: [{provide: CdkStepper, useExisting: MdStepper}]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdStepperNext_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepperNext.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepperNext.ctorParameters;\n}\n\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nexport class MdStepperPrevious extends _MdStepperPrevious { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'button[mdStepperPrevious], button[matStepperPrevious]',\r\n  host: {'(click)': '_stepper.previous()'},\r\n  providers: [{provide: CdkStepper, useExisting: MdStepper}]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdStepperPrevious_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepperPrevious.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepperPrevious.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {CdkStepperModule} from '@angular/cdk/stepper';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MdButtonModule} from '@angular/material/button';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MdIconModule} from '@angular/material/icon';\r\nimport {MdStepHeader} from './step-header';\r\nimport {MdStepLabel} from './step-label';\r\nimport {MdHorizontalStepper, MdStep, MdStepper, MdVerticalStepper} from './stepper';\r\nimport {MdStepperNext, MdStepperPrevious} from './stepper-button';\nexport class MdStepperModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    MdCommonModule,\r\n    CommonModule,\r\n    PortalModule,\r\n    MdButtonModule,\r\n    CdkStepperModule,\r\n    MdIconModule\r\n  ],\r\n  exports: [\r\n    MdCommonModule,\r\n    MdHorizontalStepper,\r\n    MdVerticalStepper,\r\n    MdStep,\r\n    MdStepLabel,\r\n    MdStepper,\r\n    MdStepperNext,\r\n    MdStepperPrevious,\r\n    MdStepHeader\r\n  ],\r\n  declarations: [MdHorizontalStepper, MdVerticalStepper, MdStep, MdStepLabel, MdStepper,\r\n    MdStepperNext, MdStepperPrevious, MdStepHeader],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdStepperModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepperModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepperModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdStepperModule,_MdStepLabel,MdStepLabel,_MdStep,_MdStepper,MdStep,MdStepper,MdHorizontalStepper,MdVerticalStepper,_MdStepperNext,_MdStepperPrevious,MdStepperNext,MdStepperPrevious,MdStepHeader,MatStep,MatStepHeader,MatStepLabel,MatStepper,MatHorizontalStepper,MatStepperModule,MatVerticalStepper,MatStepperPrevious,MatStepperNext} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\r\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdTable = CdkTable;\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport class MdTable<T> extends _MdTable<T> { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-table, mat-table',\r\n  template: CDK_TABLE_TEMPLATE,\r\n  styleUrls: ['table.css'],\r\n  host: {\r\n    'class': 'mat-table',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTable_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTable.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, ElementRef, Input, Renderer2} from '@angular/core';\r\nimport {\r\n  CdkCell,\r\n  CdkCellDef,\r\n  CdkColumnDef,\r\n  CdkHeaderCell,\r\n  CdkHeaderCellDef,\r\n} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdCellDef = CdkCellDef;\r\nexport const /** @type {?} */ _MdHeaderCellDef = CdkHeaderCellDef;\r\nexport const /** @type {?} */ _MdColumnDef = CdkColumnDef;\r\nexport const /** @type {?} */ _MdHeaderCell = CdkHeaderCell;\r\nexport const /** @type {?} */ _MdCell = CdkCell;\n/**\n * Cell definition for the md-table.\rCaptures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class MdCellDef extends _MdCellDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdCellDef], [matCellDef]',\r\n  providers: [{provide: CdkCellDef, useExisting: MdCellDef}]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCellDef.ctorParameters;\n}\n\n/**\n * Header cell definition for the md-table.\rCaptures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class MdHeaderCellDef extends _MdHeaderCellDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdHeaderCellDef], [matHeaderCellDef]',\r\n  providers: [{provide: CdkHeaderCellDef, useExisting: MdHeaderCellDef}]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderCellDef.ctorParameters;\n}\n\n/**\n * Column definition for the md-table.\rDefines a set of cells available for a table column.\n */\nexport class MdColumnDef extends _MdColumnDef {\n/**\n * Unique name for this column.\n */\nname: string;\n/**\n * @return {?}\n */\nget _matColumnDefName() { return this.name; }\n/**\n * @param {?} name\n * @return {?}\n */\nset _matColumnDefName(name) { this.name = name; }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdColumnDef], [matColumnDef]',\r\n  providers: [{provide: CdkColumnDef, useExisting: MdColumnDef}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['mdColumnDef', ] },],\n'_matColumnDefName': [{ type: Input, args: ['matColumnDef', ] },],\n};\n}\n\nfunction MdColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdColumnDef.ctorParameters;\n/** @type {?} */\nMdColumnDef.propDecorators;\n/**\n * Unique name for this column.\n * @type {?}\n */\nMdColumnDef.prototype.name;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class MdHeaderCell extends _MdHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\r\n              elementRef: ElementRef,\r\n              renderer: Renderer2) {\r\n    super(columnDef, elementRef, renderer);\r\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-header-cell, mat-header-cell',\r\n  host: {\r\n    'class': 'mat-header-cell',\r\n    'role': 'columnheader',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderCell.ctorParameters;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class MdCell extends _MdCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\r\n              elementRef: ElementRef,\r\n              renderer: Renderer2) {\r\n    super(columnDef, elementRef, renderer);\r\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-cell, mat-cell',\r\n  host: {\r\n    'class': 'mat-cell',\r\n    'role': 'gridcell',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCell.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\r\nimport {\r\n  CdkHeaderRow,\r\n  CdkRow,\r\n  CDK_ROW_TEMPLATE,\r\n  CdkRowDef,\r\n  CdkHeaderRowDef,\r\n} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdHeaderRowDef = CdkHeaderRowDef;\r\nexport const /** @type {?} */ _MdCdkRowDef = CdkRowDef;\r\nexport const /** @type {?} */ _MdHeaderRow = CdkHeaderRow;\r\nexport const /** @type {?} */ _MdRow = CdkRow;\n/**\n * Header row definition for the md-table.\rCaptures the header row's template and other header properties such as the columns to display.\n */\nexport class MdHeaderRowDef extends _MdHeaderRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdHeaderRowDef]',\r\n  providers: [{provide: CdkHeaderRowDef, useExisting: MdHeaderRowDef}],\r\n  inputs: ['columns: mdHeaderRowDef'],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderRowDef.ctorParameters;\n}\n\n/**\n * Mat-compatible version of MdHeaderRowDef\n */\nexport class MatHeaderRowDef extends _MdHeaderRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[matHeaderRowDef]',\r\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\r\n  inputs: ['columns: matHeaderRowDef'],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMatHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatHeaderRowDef.ctorParameters;\n}\n\n/**\n * Data row definition for the md-table.\rCaptures the header row's template and other row properties such as the columns to display.\n */\nexport class MdRowDef extends _MdCdkRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdRowDef]',\r\n  providers: [{provide: CdkRowDef, useExisting: MdRowDef}],\r\n  inputs: ['columns: mdRowDefColumns'],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRowDef.ctorParameters;\n}\n\n/**\n * Mat-compatible version of MdRowDef\n */\nexport class MatRowDef extends _MdCdkRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[matRowDef]',\r\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\r\n  inputs: ['columns: matRowDefColumns'],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRowDef.ctorParameters;\n}\n\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MdHeaderRow extends _MdHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-header-row, mat-header-row',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'mat-header-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MdRow extends _MdRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-row, mat-row',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'mat-row',\r\n    'role': 'row',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRow.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdTable} from './table';\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\nimport {MdCell, MdHeaderCell, MdCellDef, MdHeaderCellDef, MdColumnDef} from './cell';\r\nimport {MdHeaderRow, MdRow, MdHeaderRowDef, MdRowDef, MatHeaderRowDef, MatRowDef} from './row';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MdCommonModule} from '@angular/material/core';\nexport class MdTableModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CdkTableModule, CommonModule, MdCommonModule],\r\n  exports: [MdTable, MdCellDef, MdHeaderCellDef, MdColumnDef,\r\n    MdHeaderRowDef, MdRowDef,\r\n    MdHeaderCell, MdCell, MdHeaderRow, MdRow,\r\n    MatHeaderRowDef, MatRowDef],\r\n  declarations: [MdTable, MdCellDef, MdHeaderCellDef, MdColumnDef,\r\n    MdHeaderRowDef, MdRowDef,\r\n    MdHeaderCell, MdCell, MdHeaderRow, MdRow,\r\n    MatHeaderRowDef, MatRowDef],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTableModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdTableModule,_MdCellDef,_MdHeaderCellDef,_MdColumnDef,_MdHeaderCell,_MdCell,MdCellDef,MdHeaderCellDef,MdColumnDef,MdHeaderCell,MdCell,_MdTable,MdTable,_MdHeaderRowDef,_MdCdkRowDef,_MdHeaderRow,_MdRow,MdHeaderRowDef,MatHeaderRowDef,MdRowDef,MatRowDef,MdHeaderRow,MdRow,MatCell,MatCellDef,MatColumnDef,MatHeaderCell,MatHeaderCellDef,MatHeaderRow,MatRow,MatTable,MatTableModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, Renderer2, ElementRef, NgZone} from '@angular/core';\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\r\\@docs-private\n */\nexport class MdInkBar {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) {}\n/**\n * Calculates the styles from the provided element in order to align the ink-bar to that element.\rShows the ink bar if previously set as hidden.\r\\@param element\n * @param {?} element\n * @return {?}\n */\nalignToElement(element: HTMLElement) {\r\n    this.show();\r\n\r\n    if (typeof requestAnimationFrame !== 'undefined') {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        requestAnimationFrame(() => this._setStyles(element));\r\n      });\r\n    } else {\r\n      this._setStyles(element);\r\n    }\r\n  }\n/**\n * Shows the ink bar.\n * @return {?}\n */\nshow(): void {\r\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'visible');\r\n  }\n/**\n * Hides the ink bar.\n * @return {?}\n */\nhide(): void {\r\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\r\n  }\n/**\n * Sets the proper styles to the ink bar element.\r\\@param element\n * @param {?} element\n * @return {?}\n */\nprivate _setStyles(element: HTMLElement) {\r\n    const /** @type {?} */ left = element ? (element.offsetLeft || 0) + 'px' : '0';\r\n    const /** @type {?} */ width = element ? (element.offsetWidth || 0) + 'px' : '0';\r\n\r\n    this._renderer.setStyle(this._elementRef.nativeElement, 'left', left);\r\n    this._renderer.setStyle(this._elementRef.nativeElement, 'width', width);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-ink-bar, mat-ink-bar',\r\n  host: {\r\n    'class': 'mat-ink-bar',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\n}\n\nfunction MdInkBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInkBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInkBar.ctorParameters;\n/** @type {?} */\nMdInkBar.prototype._renderer;\n/** @type {?} */\nMdInkBar.prototype._elementRef;\n/** @type {?} */\nMdInkBar.prototype._ngZone;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\r\nimport {TemplatePortalDirective} from '@angular/cdk/portal';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdTabLabelBaseClass = TemplatePortalDirective;\n/**\n * Used to flag tab labels for use with the portal directive\n */\nexport class MdTabLabel extends _MdTabLabelBaseClass {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\r\n    super(templateRef, viewContainerRef);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-tab-label], [mat-tab-label], [mdTabLabel], [matTabLabel]',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction MdTabLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabel.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdTabLabel} from './tab-label';\n/**\n * \\@docs-private\n */\nexport class MdTabBase {}\r\nexport const /** @type {?} */ _MdTabMixinBase = mixinDisabled(MdTabBase);\nexport class MdTab extends _MdTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n */\ntemplateLabel: MdTabLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n */\n_content: TemplateRef<any>;\n/**\n * The plain text label for the tab, used when there is no template label.\n */\ntextLabel: string = '';\n/**\n * The portal that will be the hosted content of the tab\n */\nprivate _contentPortal: TemplatePortal<any> | null = null;\n/**\n * @return {?}\n */\nget content(): TemplatePortal<any> | null { return this._contentPortal; }\n/**\n * Emits whenever the label changes.\n */\n_labelChange = new Subject<void>();\n/**\n * Emits whenevfer the disable changes\n */\n_disableChange = new Subject<void>();\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\rrepresents the right.\n */\nposition: number | null = null;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\rwas already a selected tab. Provides context of what position the tab should originate from.\n */\norigin: number | null = null;\n/**\n * Whether the tab is currently active.\n */\nisActive = false;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {\r\n    super();\r\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.hasOwnProperty('textLabel')) {\r\n      this._labelChange.next();\r\n    }\r\n\r\n    if (changes.hasOwnProperty('disabled')) {\r\n      this._disableChange.next();\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\r\n    this._disableChange.complete();\r\n    this._labelChange.complete();\r\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\r\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-tab, mat-tab',\r\n  templateUrl: 'tab.html',\r\n  inputs: ['disabled'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  exportAs: 'mdTab, matTab',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateLabel': [{ type: ContentChild, args: [MdTabLabel, ] },],\n'_content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'textLabel': [{ type: Input, args: ['label', ] },],\n};\n}\n\nfunction MdTab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTab.ctorParameters;\n/** @type {?} */\nMdTab.propDecorators;\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n * @type {?}\n */\nMdTab.prototype.templateLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n * @type {?}\n */\nMdTab.prototype._content;\n/**\n * The plain text label for the tab, used when there is no template label.\n * @type {?}\n */\nMdTab.prototype.textLabel;\n/**\n * The portal that will be the hosted content of the tab\n * @type {?}\n */\nMdTab.prototype._contentPortal;\n/**\n * Emits whenever the label changes.\n * @type {?}\n */\nMdTab.prototype._labelChange;\n/**\n * Emits whenevfer the disable changes\n * @type {?}\n */\nMdTab.prototype._disableChange;\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\rrepresents the right.\n * @type {?}\n */\nMdTab.prototype.position;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\rwas already a selected tab. Provides context of what position the tab should originate from.\n * @type {?}\n */\nMdTab.prototype.origin;\n/**\n * Whether the tab is currently active.\n * @type {?}\n */\nMdTab.prototype.isActive;\n/** @type {?} */\nMdTab.prototype._viewContainerRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ViewChild,\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n  ElementRef,\r\n  Optional,\r\n  AfterViewChecked,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport {\r\n  trigger,\r\n  state,\r\n  style,\r\n  animate,\r\n  transition,\r\n  AnimationEvent,\r\n} from '@angular/animations';\r\nimport {TemplatePortal, PortalHostDirective} from '@angular/cdk/portal';\r\nimport {Directionality, Direction} from '@angular/cdk/bidi';\r\n\r\n\r\n/**\r\n * These position states are used internally as animation states for the tab body. Setting the\r\n * position state to left, right, or center will transition the tab body from its current\r\n * position to its respective state. If there is not current position (void, in the case of a new\r\n * tab body), then there will be no transition animation to its state.\r\n *\r\n * In the case of a new tab body that should immediately be centered with an animating transition,\r\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\r\n * psuedo-prior state.\r\n */\r\nexport type MdTabBodyPositionState =\r\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\r\n\r\n/**\r\n * The origin state is an internally used state that is set on a new tab body indicating if it\r\n * began to the left or right of the prior selected index. For example, if the selected index was\r\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\r\n * origin of right because its index was greater than the prior selected index.\r\n */\r\nexport type MdTabBodyOriginState = 'left' | 'right';\n/**\n * Wrapper for the contents of a tab.\r\\@docs-private\n */\nexport class MdTabBody implements OnInit, AfterViewChecked {\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n */\nonCentering: EventEmitter<number> = new EventEmitter<number>();\n/**\n * Event emitted when the tab completes its animation towards the center.\n */\nonCentered: EventEmitter<void> = new EventEmitter<void>(true);\n/**\n * The tab body content to display.\n */\n_content: TemplatePortal<any>;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n */\n_position: MdTabBodyPositionState;\n/**\n * @param {?} position\n * @return {?}\n */\nset position(position: number) {\r\n    if (position < 0) {\r\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\r\n    } else if (position > 0) {\r\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\r\n    } else {\r\n      this._position = 'center';\r\n    }\r\n  }\n/**\n * The origin position from which this tab should appear when it is centered into view.\n */\n_origin: MdTabBodyOriginState;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @param {?} origin\n * @return {?}\n */\nset origin(origin: number) {\r\n    if (origin == null) { return; }\r\n\r\n    const /** @type {?} */ dir = this._getLayoutDirection();\r\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\r\n      this._origin = 'left';\r\n    } else {\r\n      this._origin = 'right';\r\n    }\r\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _dir\n */\nconstructor(private _elementRef: ElementRef,\nprivate _dir: Directionality) { }\n/**\n * After initialized, check if the content is centered and has an origin. If so, set the\rspecial position states that transition the tab from the left or right before centering.\n * @return {?}\n */\nngOnInit() {\r\n    if (this._position == 'center' && this._origin) {\r\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\r\n    }\r\n  }\n/**\n * After the view has been set, check if the tab content is set to the center and attach the\rcontent if it is not already attached.\n * @return {?}\n */\nngAfterViewChecked() {\r\n    if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\r\n      this._portalHost.attach(this._content);\r\n    }\r\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabStarted(e: AnimationEvent) {\r\n    if (this._isCenterPosition(e.toState)) {\r\n      this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\r\n    }\r\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabComplete(e: AnimationEvent) {\r\n    // If the end state is that the tab is not centered, then detach the content.\r\n    if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\r\n      this._portalHost.detach();\r\n    }\r\n\r\n    // If the transition to the center is complete, emit an event.\r\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\r\n      this.onCentered.emit();\r\n    }\r\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\n/**\n * Whether the provided position state is considered center, regardless of origin.\n * @param {?} position\n * @return {?}\n */\nprivate _isCenterPosition(position: MdTabBodyPositionState|string): boolean {\r\n    return position == 'center' ||\r\n        position == 'left-origin-center' ||\r\n        position == 'right-origin-center';\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-tab-body, mat-tab-body',\r\n  templateUrl: 'tab-body.html',\r\n  styleUrls: ['tab-body.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'class': 'mat-tab-body',\r\n  },\r\n  animations: [\r\n    trigger('translateTab', [\r\n      state('void', style({transform: 'translate3d(0%, 0, 0)'})),\r\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\r\n      state('left-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\r\n      state('right-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\r\n      state('center', style({transform: 'translate3d(0%, 0, 0)'})),\r\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\r\n      transition('* => left, * => right, left => center, right => center',\r\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\r\n      transition('void => left-origin-center', [\r\n        style({transform: 'translate3d(-100%, 0, 0)'}),\r\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\r\n      ]),\r\n      transition('void => right-origin-center', [\r\n        style({transform: 'translate3d(100%, 0, 0)'}),\r\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\r\n      ])\r\n    ])\r\n  ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n'onCentering': [{ type: Output },],\n'onCentered': [{ type: Output },],\n'_content': [{ type: Input, args: ['content', ] },],\n'position': [{ type: Input, args: ['position', ] },],\n'origin': [{ type: Input, args: ['origin', ] },],\n};\n}\n\nfunction MdTabBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabBody.ctorParameters;\n/** @type {?} */\nMdTabBody.propDecorators;\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n * @type {?}\n */\nMdTabBody.prototype._portalHost;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n * @type {?}\n */\nMdTabBody.prototype.onCentering;\n/**\n * Event emitted when the tab completes its animation towards the center.\n * @type {?}\n */\nMdTabBody.prototype.onCentered;\n/**\n * The tab body content to display.\n * @type {?}\n */\nMdTabBody.prototype._content;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n * @type {?}\n */\nMdTabBody.prototype._position;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @type {?}\n */\nMdTabBody.prototype._origin;\n/** @type {?} */\nMdTabBody.prototype._elementRef;\n/** @type {?} */\nMdTabBody.prototype._dir;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ViewChild,\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  QueryList,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Renderer2,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  AfterViewChecked,\r\n  AfterContentInit,\r\n  AfterContentChecked,\r\n  OnDestroy,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MdTab} from './tab';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {\r\n  CanDisableRipple, MATERIAL_COMPATIBILITY_MODE,\r\n  mixinDisableRipple\r\n} from '@angular/material/core';\r\nimport {CanColor, mixinColor, ThemePalette} from '@angular/material/core';\n/**\n * Used to generate unique ID's for each tab component\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nexport class MdTabChangeEvent {\r\n  index: number;\r\n  tab: MdTab;\r\n}\n\nfunction MdTabChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabChangeEvent.prototype.index;\n/** @type {?} */\nMdTabChangeEvent.prototype.tab;\n}\n\r\n\r\n/** Possible positions for the tab header. */\r\nexport type MdTabHeaderPosition = 'above' | 'below';\n/**\n * \\@docs-private\n */\nexport class MdTabGroupBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdTabGroupBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroupBase.prototype._renderer;\n/** @type {?} */\nMdTabGroupBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdTabGroupMixinBase = mixinColor(mixinDisableRipple(MdTabGroupBase), 'primary');\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\ranimated ink-bar, keyboard navigation, and screen reader.\rSee: https://www.google.com/design/spec/components/tabs.html\n */\nexport class MdTabGroup extends _MdTabGroupMixinBase implements AfterContentInit,\r\n    AfterContentChecked, AfterViewChecked, OnDestroy, CanColor, CanDisableRipple {\r\n\r\n   _tabs: QueryList<MdTab>;\r\n\r\n   _tabBodyWrapper: ElementRef;\n/**\n * Whether this component has been initialized.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The tab index that should be selected after the content has been checked.\n */\nprivate _indexToSelect: number | null = 0;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n */\nprivate _tabBodyWrapperHeight: number = 0;\n/**\n * Subscription to tabs being added/removed.\n */\nprivate _tabsSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the tab labels.\n */\nprivate _tabLabelSubscription = Subscription.EMPTY;\n/**\n * Whether the tab group should grow to the size of the active tab.\n * @return {?}\n */\nget dynamicHeight(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\nprivate _dynamicHeight: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n/**\n * The index of the active tab.\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number | null) { this._indexToSelect = value; }\n/**\n * @return {?}\n */\nget selectedIndex(): number | null { return this._selectedIndex; }\nprivate _selectedIndex: number | null = null;\n/**\n * Position of the tab header.\n */\nheaderPosition: MdTabHeaderPosition = 'above';\n/**\n * Background color of the tab group.\n * @return {?}\n */\nget backgroundColor(): ThemePalette { return this._backgroundColor; }\n/**\n * @param {?} value\n * @return {?}\n */\nset backgroundColor(value: ThemePalette) {\r\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\r\n\r\n    this._renderer.removeClass(nativeElement, `mat-background-${this.backgroundColor}`);\r\n\r\n    if (value) {\r\n      this._renderer.addClass(nativeElement, `mat-background-${value}`);\r\n    }\r\n\r\n    this._backgroundColor = value;\r\n  }\nprivate _backgroundColor: ThemePalette;\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n */\nselectedIndexChange: EventEmitter<number> = new EventEmitter();\n/**\n * Event emitted when focus has changed within a tab group.\n */\nfocusChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>();\n/**\n * Event emitted when the tab selection has changed.\n */\nselectChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>(true);\nprivate _groupId: number;\n/**\n * @param {?} _renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n */\nconstructor(_renderer: Renderer2,\r\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef) {\r\n    super(_renderer, elementRef);\r\n    this._groupId = nextId++;\r\n  }\n/**\n * After the content is checked, this component knows what tabs have been defined\rand what the selected index should be. This is where we can know exactly what position\reach tab should be in according to the new selected index, and additionally we know how\ra new selected tab should transition in (from the left or right).\n * @return {?}\n */\nngAfterContentChecked(): void {\r\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\r\n    // Note the `|| 0`, which ensures that values like NaN can't get through\r\n    // and which would otherwise throw the component into an infinite loop\r\n    // (since Math.max(NaN, 0) === NaN).\r\n    let /** @type {?} */ indexToSelect = this._indexToSelect =\r\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\r\n\r\n    // If there is a change in selected index, emit a change event. Should not trigger if\r\n    // the selected index has not yet been initialized.\r\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\r\n      this.selectChange.emit(this._createChangeEvent(indexToSelect));\r\n      // Emitting this value after change detection has run\r\n      // since the checked content may contain this variable'\r\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\r\n    }\r\n\r\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\r\n    this._tabs.forEach((tab: MdTab, index: number) => {\r\n      tab.position = index - indexToSelect;\r\n      tab.isActive = index === indexToSelect;\r\n\r\n      // If there is already a selected tab, then set up an origin for the next selected tab\r\n      // if it doesn't have one already.\r\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\r\n        tab.origin = indexToSelect - this._selectedIndex;\r\n      }\r\n    });\r\n\r\n    if (this._selectedIndex !== indexToSelect) {\r\n      this._selectedIndex = indexToSelect;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._subscribeToTabLabels();\r\n\r\n    // Subscribe to changes in the amount of tabs, in order to be\r\n    // able to re-render the content as new tabs are added or removed.\r\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\r\n      this._subscribeToTabLabels();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._tabsSubscription.unsubscribe();\r\n    this._tabLabelSubscription.unsubscribe();\r\n  }\n/**\n * Waits one frame for the view to update, then updates the ink bar\rNote: This must be run outside of the zone or it will create an infinite change detection loop.\n * @return {?}\n */\nngAfterViewChecked(): void {\r\n    this._isInitialized = true;\r\n  }\n/**\n * @param {?} index\n * @return {?}\n */\n_focusChanged(index: number) {\r\n    this.focusChange.emit(this._createChangeEvent(index));\r\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _createChangeEvent(index: number): MdTabChangeEvent {\r\n    const /** @type {?} */ event = new MdTabChangeEvent;\r\n    event.index = index;\r\n    if (this._tabs && this._tabs.length) {\r\n      event.tab = this._tabs.toArray()[index];\r\n    }\r\n    return event;\r\n  }\n/**\n * Subscribes to changes in the tab labels. This is needed, because the \\@Input for the label is\ron the MdTab component, whereas the data binding is inside the MdTabGroup. In order for the\rbinding to be updated, we need to subscribe to changes in it and trigger change detection\rmanually.\n * @return {?}\n */\nprivate _subscribeToTabLabels() {\r\n    if (this._tabLabelSubscription) {\r\n      this._tabLabelSubscription.unsubscribe();\r\n    }\r\n\r\n    this._tabLabelSubscription = merge(\r\n        ...this._tabs.map(tab => tab._disableChange),\r\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\n/**\n * Returns a unique id for each tab label element\n * @param {?} i\n * @return {?}\n */\n_getTabLabelId(i: number): string {\r\n    return `md-tab-label-${this._groupId}-${i}`;\r\n  }\n/**\n * Returns a unique id for each tab content element\n * @param {?} i\n * @return {?}\n */\n_getTabContentId(i: number): string {\r\n    return `md-tab-content-${this._groupId}-${i}`;\r\n  }\n/**\n * Sets the height of the body wrapper to the height of the activating tab if dynamic\rheight property is true.\n * @param {?} tabHeight\n * @return {?}\n */\n_setTabBodyWrapperHeight(tabHeight: number): void {\r\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\r\n\r\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\r\n        this._tabBodyWrapperHeight + 'px');\r\n\r\n    // This conditional forces the browser to paint the height so that\r\n    // the animation to the new height can have an origin.\r\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\r\n      this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\r\n          tabHeight + 'px');\r\n    }\r\n  }\n/**\n * Removes the height of the tab body wrapper.\n * @return {?}\n */\n_removeTabBodyWrapperHeight(): void {\r\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\r\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height', '');\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-tab-group, mat-tab-group',\r\n  templateUrl: 'tab-group.html',\r\n  styleUrls: ['tab-group.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['color', 'disableRipple'],\r\n  host: {\r\n    'class': 'mat-tab-group',\r\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\r\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\r\n  },\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tabs': [{ type: ContentChildren, args: [MdTab, ] },],\n'_tabBodyWrapper': [{ type: ViewChild, args: ['tabBodyWrapper', ] },],\n'dynamicHeight': [{ type: Input },],\n'_dynamicHeightDeprecated': [{ type: Input, args: ['md-dynamic-height', ] },],\n'selectedIndex': [{ type: Input },],\n'headerPosition': [{ type: Input },],\n'backgroundColor': [{ type: Input },],\n'selectedIndexChange': [{ type: Output },],\n'focusChange': [{ type: Output },],\n'selectChange': [{ type: Output },],\n};\n}\n\nfunction MdTabGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabGroup.ctorParameters;\n/** @type {?} */\nMdTabGroup.propDecorators;\n/** @type {?} */\nMdTabGroup.prototype._tabs;\n/** @type {?} */\nMdTabGroup.prototype._tabBodyWrapper;\n/**\n * Whether this component has been initialized.\n * @type {?}\n */\nMdTabGroup.prototype._isInitialized;\n/**\n * The tab index that should be selected after the content has been checked.\n * @type {?}\n */\nMdTabGroup.prototype._indexToSelect;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n * @type {?}\n */\nMdTabGroup.prototype._tabBodyWrapperHeight;\n/**\n * Subscription to tabs being added/removed.\n * @type {?}\n */\nMdTabGroup.prototype._tabsSubscription;\n/**\n * Subscription to changes in the tab labels.\n * @type {?}\n */\nMdTabGroup.prototype._tabLabelSubscription;\n/** @type {?} */\nMdTabGroup.prototype._dynamicHeight;\n/** @type {?} */\nMdTabGroup.prototype._selectedIndex;\n/**\n * Position of the tab header.\n * @type {?}\n */\nMdTabGroup.prototype.headerPosition;\n/** @type {?} */\nMdTabGroup.prototype._backgroundColor;\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n * @type {?}\n */\nMdTabGroup.prototype.selectedIndexChange;\n/**\n * Event emitted when focus has changed within a tab group.\n * @type {?}\n */\nMdTabGroup.prototype.focusChange;\n/**\n * Event emitted when the tab selection has changed.\n * @type {?}\n */\nMdTabGroup.prototype.selectChange;\n/** @type {?} */\nMdTabGroup.prototype._groupId;\n/** @type {?} */\nMdTabGroup.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, ElementRef} from '@angular/core';\r\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n/**\n * \\@docs-private\n */\nexport class MdTabLabelWrapperBase {}\r\nexport const /** @type {?} */ _MdTabLabelWrapperMixinBase = mixinDisabled(MdTabLabelWrapperBase);\n/**\n * Used in the `md-tab-group` view to display tab labels.\r\\@docs-private\n */\nexport class MdTabLabelWrapper extends _MdTabLabelWrapperMixinBase implements CanDisable {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\r\n    super();\r\n  }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\r\n    this.elementRef.nativeElement.focus();\r\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\r\n    return this.elementRef.nativeElement.offsetLeft;\r\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\r\n    return this.elementRef.nativeElement.offsetWidth;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdTabLabelWrapper], [matTabLabelWrapper]',\r\n  inputs: ['disabled'],\r\n  host: {\r\n    '[class.mat-tab-disabled]': 'disabled'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMdTabLabelWrapper.prototype.elementRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\r\nimport {auditTime, startWith} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Renderer2,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisableRipple, MATERIAL_COMPATIBILITY_MODE,\r\n  mixinDisableRipple\r\n} from '@angular/material/core';\r\nimport {fromEvent} from 'rxjs/observable/fromEvent';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MdInkBar} from './ink-bar';\r\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\r\n\r\n\r\n/**\r\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\r\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\r\n * beginning of the list.\r\n */\r\nexport type ScrollDirection = 'after' | 'before';\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\rprovide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * \\@docs-private\n */\nexport class MdTabHeaderBase {}\r\nexport const /** @type {?} */ _MdTabHeaderMixinBase = mixinDisableRipple(MdTabHeaderBase);\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\ran ink bar that follows the currently selected tab. When the tabs list's width exceeds the\rwidth of the header container, then arrows will be displayed to allow the user to scroll\rleft and right across the header.\r\\@docs-private\n */\nexport class MdTabHeader extends _MdTabHeaderMixinBase\r\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\r\n\r\n   _labelWrappers: QueryList<MdTabLabelWrapper>;\r\n   _inkBar: MdInkBar;\r\n   _tabListContainer: ElementRef;\r\n   _tabList: ElementRef;\n/**\n * The tab index that is focused.\n */\nprivate _focusIndex: number = 0;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n */\nprivate _scrollDistance = 0;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n */\nprivate _selectedIndexChanged = false;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n */\nprivate _realignInkBar = Subscription.EMPTY;\n/**\n * Whether the controls for pagination should be displayed\n */\n_showPaginationControls = false;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n */\n_disableScrollAfter = true;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n */\n_disableScrollBefore = true;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\rshould re-evaluate the scroll position.\n */\nprivate _tabLabelCount: number;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n */\nprivate _scrollDistanceChanged: boolean;\nprivate _selectedIndex: number = 0;\n/**\n * The index of the active tab.\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) {\r\n    this._selectedIndexChanged = this._selectedIndex != value;\r\n    this._selectedIndex = value;\r\n    this._focusIndex = value;\r\n  }\n/**\n * Event emitted when the option is selected.\n */\nselectFocusedIndex = new EventEmitter();\n/**\n * Event emitted when a label is focused.\n */\nindexFocused = new EventEmitter();\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\r\n    super();\r\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked(): void {\r\n    // If the number of tab labels have changed, check if scrolling should be enabled\r\n    if (this._tabLabelCount != this._labelWrappers.length) {\r\n      this._updatePagination();\r\n      this._tabLabelCount = this._labelWrappers.length;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\r\n    // should be disabled.\r\n    if (this._selectedIndexChanged) {\r\n      this._scrollToLabel(this._selectedIndex);\r\n      this._checkScrollingControls();\r\n      this._alignInkBarToSelectedTab();\r\n      this._selectedIndexChanged = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\r\n    // then translate the header to reflect this.\r\n    if (this._scrollDistanceChanged) {\r\n      this._updateTabScrollPosition();\r\n      this._scrollDistanceChanged = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\r\n    switch (event.keyCode) {\r\n      case RIGHT_ARROW:\r\n        this._focusNextTab();\r\n        break;\r\n      case LEFT_ARROW:\r\n        this._focusPreviousTab();\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this.selectFocusedIndex.emit(this.focusIndex);\r\n        event.preventDefault();\r\n        break;\r\n    }\r\n  }\n/**\n * Aligns the ink bar to the selected tab on load.\n * @return {?}\n */\nngAfterContentInit() {\r\n    const /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\r\n    const /** @type {?} */ resize = typeof window !== 'undefined' ?\r\n        auditTime.call(fromEvent(window, 'resize'), 150) :\r\n        observableOf(null);\r\n\r\n    this._realignInkBar = startWith.call(merge(dirChange, resize), null).subscribe(() => {\r\n      this._updatePagination();\r\n      this._alignInkBarToSelectedTab();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._realignInkBar.unsubscribe();\r\n  }\n/**\n * Callback for when the MutationObserver detects that the content has changed.\n * @return {?}\n */\n_onContentChanges() {\r\n    this._updatePagination();\r\n    this._alignInkBarToSelectedTab();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Updating the view whether pagination should be enabled or not\n * @return {?}\n */\n_updatePagination() {\r\n    this._checkPaginationEnabled();\r\n    this._checkScrollingControls();\r\n    this._updateTabScrollPosition();\r\n  }\n/**\n * When the focus index is set, we must manually send focus to the correct label\n * @param {?} value\n * @return {?}\n */\nset focusIndex(value: number) {\r\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\r\n\r\n    this._focusIndex = value;\r\n    this.indexFocused.emit(value);\r\n    this._setTabFocus(value);\r\n  }\n/**\n * Tracks which element has focus; used for keyboard navigation\n * @return {?}\n */\nget focusIndex(): number { return this._focusIndex; }\n/**\n * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\rproviding a valid index and return true.\n * @param {?} index\n * @return {?}\n */\n_isValidIndex(index: number): boolean {\r\n    if (!this._labelWrappers) { return true; }\r\n\r\n    const /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\r\n    return !!tab && !tab.disabled;\r\n  }\n/**\n * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\rscrolling is enabled.\n * @param {?} tabIndex\n * @return {?}\n */\n_setTabFocus(tabIndex: number) {\r\n    if (this._showPaginationControls) {\r\n      this._scrollToLabel(tabIndex);\r\n    }\r\n\r\n    if (this._labelWrappers && this._labelWrappers.length) {\r\n      this._labelWrappers.toArray()[tabIndex].focus();\r\n\r\n      // Do not let the browser manage scrolling to focus the element, this will be handled\r\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\r\n      // should be the full width minus the offset width.\r\n      const /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\r\n      const /** @type {?} */ dir = this._getLayoutDirection();\r\n\r\n      if (dir == 'ltr') {\r\n        containerEl.scrollLeft = 0;\r\n      } else {\r\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\r\n      }\r\n    }\r\n  }\n/**\n * Moves the focus towards the beginning or the end of the list depending on the offset provided.\rValid offsets are 1 and -1.\n * @param {?} offset\n * @return {?}\n */\n_moveFocus(offset: number) {\r\n    if (this._labelWrappers) {\r\n      const /** @type {?} */ tabs: MdTabLabelWrapper[] = this._labelWrappers.toArray();\r\n\r\n      for (let /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\r\n        if (this._isValidIndex(i)) {\r\n          this.focusIndex = i;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\n/**\n * Increment the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusNextTab(): void {\r\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\r\n  }\n/**\n * Decrement the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusPreviousTab(): void {\r\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\r\n  }\n/**\n * The layout direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\n/**\n * Performs the CSS transformation on the tab list that will cause the list to scroll.\n * @return {?}\n */\n_updateTabScrollPosition() {\r\n    const /** @type {?} */ scrollDistance = this.scrollDistance;\r\n    const /** @type {?} */ translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\r\n\r\n    this._renderer.setStyle(this._tabList.nativeElement, 'transform',\r\n        `translate3d(${translateX}px, 0, 0)`);\r\n  }\n/**\n * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n * @param {?} v\n * @return {?}\n */\nset scrollDistance(v: number) {\r\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\r\n\r\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\r\n    // transformation can move the header.\r\n    this._scrollDistanceChanged = true;\r\n    this._checkScrollingControls();\r\n  }\n/**\n * @return {?}\n */\nget scrollDistance(): number { return this._scrollDistance; }\n/**\n * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\rthe end of the list, respectively). The distance to scroll is computed to be a third of the\rlength of the tab list view window.\r\rThis is an expensive call that forces a layout reflow to compute box and scroll metrics and\rshould be called sparingly.\n * @param {?} scrollDir\n * @return {?}\n */\n_scrollHeader(scrollDir: ScrollDirection) {\r\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n\r\n    // Move the scroll distance one-third the length of the tab list's viewport.\r\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\r\n  }\n/**\n * Moves the tab list such that the desired tab label (marked by index) is moved into view.\r\rThis is an expensive call that forces a layout reflow to compute box and scroll metrics and\rshould be called sparingly.\n * @param {?} labelIndex\n * @return {?}\n */\n_scrollToLabel(labelIndex: number) {\r\n    const /** @type {?} */ selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\r\n\r\n    if (!selectedLabel) { return; }\r\n\r\n    // The view length is the visible width of the tab labels.\r\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n\r\n    let /** @type {?} */ labelBeforePos: number, /** @type {?} */ labelAfterPos: number;\r\n    if (this._getLayoutDirection() == 'ltr') {\r\n      labelBeforePos = selectedLabel.getOffsetLeft();\r\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\r\n    } else {\r\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\r\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\r\n    }\r\n\r\n    const /** @type {?} */ beforeVisiblePos = this.scrollDistance;\r\n    const /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\r\n\r\n    if (labelBeforePos < beforeVisiblePos) {\r\n      // Scroll header to move label to the before direction\r\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\r\n    } else if (labelAfterPos > afterVisiblePos) {\r\n      // Scroll header to move label to the after direction\r\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\r\n    }\r\n  }\n/**\n * Evaluate whether the pagination controls should be displayed. If the scroll width of the\rtab list is wider than the size of the header container, then the pagination controls should\rbe shown.\r\rThis is an expensive call that forces a layout reflow to compute box and scroll metrics and\rshould be called sparingly.\n * @return {?}\n */\n_checkPaginationEnabled() {\r\n    const /** @type {?} */ isEnabled =\r\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\r\n\r\n    if (!isEnabled) {\r\n      this.scrollDistance = 0;\r\n    }\r\n\r\n    if (isEnabled !== this._showPaginationControls) {\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    this._showPaginationControls = isEnabled;\r\n  }\n/**\n * Evaluate whether the before and after controls should be enabled or disabled.\rIf the header is at the beginning of the list (scroll distance is equal to 0) then disable the\rbefore button. If the header is at the end of the list (scroll distance is equal to the\rmaximum distance we can scroll), then disable the after button.\r\rThis is an expensive call that forces a layout reflow to compute box and scroll metrics and\rshould be called sparingly.\n * @return {?}\n */\n_checkScrollingControls() {\r\n    // Check if the pagination arrows should be activated.\r\n    this._disableScrollBefore = this.scrollDistance == 0;\r\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Determines what is the maximum length in pixels that can be set for the scroll distance. This\ris equal to the difference in width between the tab list container and tab header container.\r\rThis is an expensive call that forces a layout reflow to compute box and scroll metrics and\rshould be called sparingly.\n * @return {?}\n */\n_getMaxScrollDistance(): number {\r\n    const /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\r\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n    return (lengthOfTabList - viewLength) || 0;\r\n  }\n/**\n * Tells the ink-bar to align itself to the current label wrapper\n * @return {?}\n */\nprivate _alignInkBarToSelectedTab(): void {\r\n    const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\r\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\r\n        null;\r\n\r\n    this._inkBar.alignToElement(selectedLabelWrapper);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-tab-header, mat-tab-header',\r\n  templateUrl: 'tab-header.html',\r\n  styleUrls: ['tab-header.css'],\r\n  inputs: ['disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'class': 'mat-tab-header',\r\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\r\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\r\n  },\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_labelWrappers': [{ type: ContentChildren, args: [MdTabLabelWrapper, ] },],\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabListContainer': [{ type: ViewChild, args: ['tabListContainer', ] },],\n'_tabList': [{ type: ViewChild, args: ['tabList', ] },],\n'selectedIndex': [{ type: Input },],\n'selectFocusedIndex': [{ type: Output },],\n'indexFocused': [{ type: Output },],\n};\n}\n\nfunction MdTabHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabHeader.ctorParameters;\n/** @type {?} */\nMdTabHeader.propDecorators;\n/** @type {?} */\nMdTabHeader.prototype._labelWrappers;\n/** @type {?} */\nMdTabHeader.prototype._inkBar;\n/** @type {?} */\nMdTabHeader.prototype._tabListContainer;\n/** @type {?} */\nMdTabHeader.prototype._tabList;\n/**\n * The tab index that is focused.\n * @type {?}\n */\nMdTabHeader.prototype._focusIndex;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistance;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n * @type {?}\n */\nMdTabHeader.prototype._selectedIndexChanged;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n * @type {?}\n */\nMdTabHeader.prototype._realignInkBar;\n/**\n * Whether the controls for pagination should be displayed\n * @type {?}\n */\nMdTabHeader.prototype._showPaginationControls;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollAfter;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollBefore;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\rshould re-evaluate the scroll position.\n * @type {?}\n */\nMdTabHeader.prototype._tabLabelCount;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistanceChanged;\n/** @type {?} */\nMdTabHeader.prototype._selectedIndex;\n/**\n * Event emitted when the option is selected.\n * @type {?}\n */\nMdTabHeader.prototype.selectFocusedIndex;\n/**\n * Event emitted when a label is focused.\n * @type {?}\n */\nMdTabHeader.prototype.indexFocused;\n/** @type {?} */\nMdTabHeader.prototype._elementRef;\n/** @type {?} */\nMdTabHeader.prototype._renderer;\n/** @type {?} */\nMdTabHeader.prototype._changeDetectorRef;\n/** @type {?} */\nMdTabHeader.prototype._dir;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {OverlayRef} from '@angular/cdk/overlay';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\n/**\n * The instance of the component making up the content of the snack bar.\n */\ninstance: T;\n/**\n * The instance of the component making up the content of the snack bar.\r\\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction = new Subject<void>();\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\rdismissed before the duration passes.\n */\nprivate _durationTimeoutId: number;\n/**\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\r\n    this.containerInstance = containerInstance;\r\n    // Dismiss snackbar on action.\r\n    this.onAction().subscribe(() => this.dismiss());\r\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\r\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\r\n    if (!this._afterClosed.closed) {\r\n      this.containerInstance.exit();\r\n    }\r\n    clearTimeout(this._durationTimeoutId);\r\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\ncloseWithAction(): void {\r\n    if (!this._onAction.closed) {\r\n      this._onAction.next();\r\n      this._onAction.complete();\r\n    }\r\n  }\n/**\n * Dismisses the snack bar after some duration\n * @param {?} duration\n * @return {?}\n */\n_dismissAfter(duration: number): void {\r\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\r\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\r\n    if (!this._afterOpened.closed) {\r\n      this._afterOpened.next();\r\n      this._afterOpened.complete();\r\n    }\r\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\r\n    this._overlayRef.dispose();\r\n    this._afterClosed.next();\r\n    this._afterClosed.complete();\r\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\r\n    return this._afterClosed.asObservable();\r\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\r\n    return this.containerInstance._onEnter;\r\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\r\n    return this._onAction.asObservable();\r\n  }\r\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nMdSnackBarRef.prototype.instance;\n/**\n * The instance of the component making up the content of the snack bar.\r\\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\rdismissed before the duration passes.\n * @type {?}\n */\nMdSnackBarRef.prototype._durationTimeoutId;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\r\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\r\nimport {Direction} from '@angular/cdk/bidi';\r\n\r\nexport const /** @type {?} */ MD_SNACK_BAR_DATA = new InjectionToken<any>('MdSnackBarData');\r\n\r\n/** Possible values for horizontalPosition on MdSnackBarConfig. */\r\nexport type MdSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\r\n\r\n/** Possible values for verticalPosition on MdSnackBarConfig. */\r\nexport type MdSnackBarVerticalPosition = 'top' | 'bottom';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MdSnackBarConfig {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n */\npoliteness?: AriaLivePoliteness = 'assertive';\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n */\nannouncementMessage?: string = '';\n/**\n * The view container to place the overlay for the snack bar into.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n */\nduration?: number = 0;\n/**\n * Extra CSS classes to be added to the snack bar container.\n */\nextraClasses?: string[];\n/**\n * Text layout direction for the snack bar.\n */\ndirection?: Direction = 'ltr';\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * The horizontal position to place the snack bar.\n */\nhorizontalPosition?: MdSnackBarHorizontalPosition = 'center';\n/**\n * The vertical position to place the snack bar.\n */\nverticalPosition?: MdSnackBarVerticalPosition = 'bottom';\r\n}\n\nfunction MdSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMdSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n * @type {?}\n */\nMdSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMdSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMdSnackBarConfig.prototype.extraClasses;\n/**\n * Text layout direction for the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.direction;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdSnackBarConfig.prototype.data;\n/**\n * The horizontal position to place the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.horizontalPosition;\n/**\n * The vertical position to place the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.verticalPosition;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\r\nimport {MdSnackBarRef} from './snack-bar-ref';\r\nimport {MD_SNACK_BAR_DATA} from './snack-bar-config';\n/**\n * A component used to open as the default snack bar, matching material spec.\rThis should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * Data that was injected into the snack bar.\n */\ndata: { message: string, action: string };\n/**\n * @param {?} snackBarRef\n * @param {?} data\n */\nconstructor(\npublic snackBarRef: MdSnackBarRef<SimpleSnackBar>,\r\n     data: any) {\r\n    this.data = data;\r\n  }\n/**\n * Performs the action on the snack bar.\n * @return {?}\n */\naction(): void {\r\n    this.snackBarRef.closeWithAction();\r\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean {\r\n    return !!this.data.action;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'simple-snack-bar',\r\n  templateUrl: 'simple-snack-bar.html',\r\n  styleUrls: ['simple-snack-bar.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'class': 'mat-simple-snackbar',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSnackBarRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_SNACK_BAR_DATA, ] }, ]},\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * Data that was injected into the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.data;\n/** @type {?} */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Component,\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  ViewChild,\r\n  NgZone,\r\n  OnDestroy,\r\n  Renderer2,\r\n  ElementRef,\r\n  ChangeDetectionStrategy,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {\r\n  trigger,\r\n  state,\r\n  style,\r\n  transition,\r\n  animate,\r\n  AnimationEvent,\r\n} from '@angular/animations';\r\nimport {\r\n  BasePortalHost,\r\n  ComponentPortal,\r\n  PortalHostDirective,\r\n} from '@angular/cdk/portal';\r\nimport {first} from '@angular/cdk/rxjs';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdSnackBarConfig} from './snack-bar-config';\r\n\r\n\r\nexport type SnackBarState = 'visible' | 'hidden' | 'void';\r\n\r\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\r\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\r\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\r\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\r\\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * Whether the component has been destroyed.\n */\nprivate _destroyed = false;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\n_onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\n_onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nprivate _animationState: SnackBarState;\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef) {\r\n    super();\r\n  }\n/**\n * Gets the current animation state both combining one of the possibilities from\rSnackBarState and the vertical location.\n * @return {?}\n */\ngetAnimationState(): string {\r\n    return `${this._animationState}-${this.snackBarConfig.verticalPosition}`;\r\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    if (this._portalHost.hasAttached()) {\r\n      throw Error('Attempting to attach snack bar content after content is already attached');\r\n    }\r\n\r\n    if (this.snackBarConfig.extraClasses) {\r\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\r\n      // to pass in an array or a space-separated list.\r\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\r\n        this._renderer.addClass(this._elementRef.nativeElement, cssClass);\r\n      }\r\n    }\r\n\r\n    if (this.snackBarConfig.horizontalPosition === 'center') {\r\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-snack-bar-center');\r\n    }\r\n\r\n    if (this.snackBarConfig.verticalPosition === 'top') {\r\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-snack-bar-top');\r\n    }\r\n\r\n    return this._portalHost.attachComponentPortal(portal);\r\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @return {?}\n */\nattachTemplatePortal(): EmbeddedViewRef<any> {\r\n    throw Error('Not yet implemented');\r\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\r\n    if (event.toState === 'void' || event.toState.startsWith('hidden')) {\r\n      this._completeExit();\r\n    }\r\n\r\n    if (event.toState.startsWith('visible')) {\r\n      // Note: we shouldn't use `this` inside the zone callback,\r\n      // because it can cause a memory leak.\r\n      const /** @type {?} */ onEnter = this._onEnter;\r\n\r\n      this._ngZone.run(() => {\r\n        onEnter.next();\r\n        onEnter.complete();\r\n      });\r\n    }\r\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\r\n    if (!this._destroyed) {\r\n      this._animationState = 'visible';\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\r\n    this._animationState = 'hidden';\r\n    return this._onExit;\r\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\r\n    this._destroyed = true;\r\n    this._completeExit();\r\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\rerrors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\r\n    first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\r\n      this._onExit.next();\r\n      this._onExit.complete();\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'snack-bar-container',\r\n  templateUrl: 'snack-bar-container.html',\r\n  styleUrls: ['snack-bar-container.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  host: {\r\n    'role': 'alert',\r\n    'class': 'mat-snack-bar-container',\r\n    '[@state]': 'getAnimationState()',\r\n    '(@state.done)': 'onAnimationEnd($event)'\r\n  },\r\n  animations: [\r\n    trigger('state', [\r\n      // Animation from top.\r\n      state('visible-top', style({transform: 'translateY(0%)'})),\r\n      state('hidden-top', style({transform: 'translateY(-100%)'})),\r\n      transition('visible-top => hidden-top', animate(HIDE_ANIMATION)),\r\n      transition('void => visible-top', animate(SHOW_ANIMATION)),\r\n      // Animation from bottom.\r\n      state('visible-bottom', style({transform: 'translateY(0%)'})),\r\n      state('hidden-bottom', style({transform: 'translateY(100%)'})),\r\n      transition('visible-bottom => hidden-bottom', animate(HIDE_ANIMATION)),\r\n      transition('void => visible-bottom',\r\n        animate(SHOW_ANIMATION)),\r\n    ])\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * Whether the component has been destroyed.\n * @type {?}\n */\nMdSnackBarContainer.prototype._destroyed;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype._onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype._onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype._animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n/** @type {?} */\nMdSnackBarContainer.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\r\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\r\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\r\nimport {extendObject} from '@angular/material/core';\r\nimport {SimpleSnackBar} from './simple-snack-bar';\r\nimport {MD_SNACK_BAR_DATA, MdSnackBarConfig} from './snack-bar-config';\r\nimport {MdSnackBarContainer} from './snack-bar-container';\r\nimport {MdSnackBarRef} from './snack-bar-ref';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\rIf there is a parent snack-bar service, all operations should delegate to that parent\rvia `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any> | null = null;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> | null {\r\n    const /** @type {?} */ parent = this._parentSnackBar;\r\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any> | null) {\r\n    if (this._parentSnackBar) {\r\n      this._parentSnackBar._openedSnackBarRef = value;\r\n    } else {\r\n      this._snackBarRefAtThisLevel = value;\r\n    }\r\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _injector\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _injector: Injector,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\rcurrently opened snack bars.\r\r\\@param component Component to be instantiated.\r\\@param config Extra configuration for the snack bar.\n * @template T\n * @param {?} component\n * @param {?=} config\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\r\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\r\n    const /** @type {?} */ snackBarRef = this._attach(component, _config);\r\n\r\n    // When the snackbar is dismissed, clear the reference to it.\r\n    snackBarRef.afterDismissed().subscribe(() => {\r\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\r\n      if (this._openedSnackBarRef == snackBarRef) {\r\n        this._openedSnackBarRef = null;\r\n      }\r\n    });\r\n\r\n    if (this._openedSnackBarRef) {\r\n      // If a snack bar is already in view, dismiss it and enter the\r\n      // new snack bar after exit animation is complete.\r\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\r\n        snackBarRef.containerInstance.enter();\r\n      });\r\n      this._openedSnackBarRef.dismiss();\r\n    } else {\r\n      // If no snack bar is in view, enter the new snack bar.\r\n      snackBarRef.containerInstance.enter();\r\n    }\r\n\r\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\r\n    if (_config.duration && _config.duration > 0) {\r\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter( /** @type {?} */(( /** @type {?} */((_config)).duration))));\r\n    }\r\n\r\n    if (_config.announcementMessage) {\r\n      this._live.announce(_config.announcementMessage, _config.politeness);\r\n    }\r\n\r\n    this._openedSnackBarRef = snackBarRef;\r\n    return this._openedSnackBarRef;\r\n  }\n/**\n * Opens a snackbar with a message and an optional action.\r\\@param message The message to show in the snackbar.\r\\@param action The label for the snackbar action.\r\\@param config Additional configuration options for the snackbar.\n * @param {?} message\n * @param {?=} action\n * @param {?=} config\n * @return {?}\n */\nopen(message: string, action = '', config?: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar> {\r\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\r\n\r\n    // Since the user doesn't have access to the component, we can\r\n    // override the data to pass in our own message and action.\r\n    _config.data = {message, action};\r\n    _config.announcementMessage = message;\r\n\r\n    return this.openFromComponent(SimpleSnackBar, _config);\r\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\r\n    if (this._openedSnackBarRef) {\r\n      this._openedSnackBarRef.dismiss();\r\n    }\r\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\r\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\r\n    const /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\r\n    const /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\r\n    containerRef.instance.snackBarConfig = config;\r\n    return containerRef.instance;\r\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} config\n * @return {?}\n */\nprivate _attach<T>(component: ComponentType<T>, config: MdSnackBarConfig): MdSnackBarRef<T> {\r\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\r\n    const /** @type {?} */ container = this._attachSnackBarContainer(overlayRef, config);\r\n    const /** @type {?} */ snackBarRef = new MdSnackBarRef<T>(container, overlayRef);\r\n    const /** @type {?} */ injector = this._createInjector(config, snackBarRef);\r\n    const /** @type {?} */ portal = new ComponentPortal(component, undefined, injector);\r\n    const /** @type {?} */ contentRef = container.attachComponentPortal(portal);\r\n\r\n    // We can't pass this via the injector, because the injector is created earlier.\r\n    snackBarRef.instance = contentRef.instance;\r\n\r\n    return snackBarRef;\r\n  }\n/**\n * Creates a new overlay and places it in the correct location.\r\\@param config The user-specified snack bar config.\n * @param {?} config\n * @return {?}\n */\nprivate _createOverlay(config: MdSnackBarConfig): OverlayRef {\r\n    const /** @type {?} */ state = new OverlayConfig();\r\n    state.direction = config.direction;\r\n\r\n    let /** @type {?} */ positionStrategy = this._overlay.position().global();\r\n    // Set horizontal position.\r\n    const /** @type {?} */ isRtl = config.direction === 'rtl';\r\n    const /** @type {?} */ isLeft = (\r\n      config.horizontalPosition === 'left' ||\r\n      (config.horizontalPosition === 'start' && !isRtl) ||\r\n      (config.horizontalPosition === 'end' && isRtl));\r\n    const /** @type {?} */ isRight = !isLeft && config.horizontalPosition !== 'center';\r\n    if (isLeft) {\r\n      positionStrategy.left('0');\r\n    } else if (isRight) {\r\n      positionStrategy.right('0');\r\n    } else {\r\n      positionStrategy.centerHorizontally();\r\n    }\r\n    // Set horizontal position.\r\n    if (config.verticalPosition === 'top') {\r\n      positionStrategy.top('0');\r\n    } else {\r\n      positionStrategy.bottom('0');\r\n    }\r\n\r\n    state.positionStrategy = positionStrategy;\r\n    return this._overlay.create(state);\r\n  }\n/**\n * Creates an injector to be used inside of a snack bar component.\r\\@param config Config that was used to create the snack bar.\r\\@param snackBarRef Reference to the snack bar.\n * @template T\n * @param {?} config\n * @param {?} snackBarRef\n * @return {?}\n */\nprivate _createInjector<T>(\r\n      config: MdSnackBarConfig,\r\n      snackBarRef: MdSnackBarRef<T>): PortalInjector {\r\n\r\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const /** @type {?} */ injectionTokens = new WeakMap();\r\n\r\n    injectionTokens.set(MdSnackBarRef, snackBarRef);\r\n    injectionTokens.set(MD_SNACK_BAR_DATA, config.data);\r\n\r\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: Injector, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\rIf there is a parent snack-bar service, all operations should delegate to that parent\rvia `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._injector;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\r\\@param config The configuration to which the defaults will be applied.\r\\@returns The new configuration object with defaults applied.\n * @param {?=} config\n * @return {?}\n */\nfunction _applyConfigDefaults(config?: MdSnackBarConfig): MdSnackBarConfig {\r\n  return extendObject(new MdSnackBarConfig(), config);\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MdSnackBar} from './snack-bar';\r\nimport {MdSnackBarContainer} from './snack-bar-container';\r\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MdSnackBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    OverlayModule,\r\n    PortalModule,\r\n    CommonModule,\r\n    MdCommonModule,\r\n  ],\r\n  exports: [MdSnackBarContainer, MdCommonModule],\r\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\r\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\r\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MD_SNACK_BAR_DATA,MdSnackBarHorizontalPosition,MdSnackBarVerticalPosition,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar,MAT_SNACK_BAR_DATA,MatSnackBar,MatSnackBarConfig,MatSnackBarContainer,MatSnackBarModule,MatSnackBarRef} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, EventEmitter, Input, Output} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SortDirection} from './sort-direction';\r\nimport {getMdSortDuplicateMdSortableIdError, getMdSortHeaderMissingIdError} from './sort-errors';\r\n\r\nexport interface MdSortable {\r\n  id: string;\r\n  start: 'asc' | 'desc';\r\n  disableClear: boolean;\r\n}\r\n\r\nexport interface Sort {\r\n  active: string;\r\n  direction: SortDirection;\r\n}\n/**\n * Container for MdSortables to manage the sort state and provide default sort parameters.\n */\nexport class MdSort {\n/**\n * Collection of all registered sortables that this directive manages.\n */\nsortables = new Map<string, MdSortable>();\n/**\n * The id of the most recently sorted MdSortable.\n */\nactive: string;\n/**\n * The direction to set when an MdSortable is initially sorted.\rMay be overriden by the MdSortable's sort start.\n */\nstart: 'asc' | 'desc' = 'asc';\n/**\n * The sort direction of the currently active MdSortable.\n */\ndirection: SortDirection = '';\n/**\n * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\rMay be overriden by the MdSortable's disable clear input.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _matSortActive() { return this.active; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortActive(v) { this.active = v; }\n/**\n * @return {?}\n */\nget _matSortStart() { return this.start; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortStart(v) { this.start = v; }\n/**\n * @return {?}\n */\nget _matSortDirection() { return this.direction; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortDirection(v) { this.direction = v; }\n/**\n * @return {?}\n */\nget _matSortDisableClear() { return this.disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortDisableClear(v) { this.disableClear = v; }\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n */\nreadonly sortChange = new EventEmitter<Sort>();\n/**\n * @return {?}\n */\nget _matSortChange(): EventEmitter<Sort> { return this.sortChange; }\n/**\n * Register function to be used by the contained MdSortables. Adds the MdSortable to the\rcollection of MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nregister(sortable: MdSortable) {\r\n    if (!sortable.id) {\r\n      throw getMdSortHeaderMissingIdError();\r\n    }\r\n\r\n    if (this.sortables.has(sortable.id)) {\r\n      throw getMdSortDuplicateMdSortableIdError(sortable.id);\r\n    }\r\n    this.sortables.set(sortable.id, sortable);\r\n  }\n/**\n * Unregister function to be used by the contained MdSortables. Removes the MdSortable from the\rcollection of contained MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nderegister(sortable: MdSortable) {\r\n    this.sortables.delete(sortable.id);\r\n  }\n/**\n * Sets the active sort id and determines the new sort direction.\n * @param {?} sortable\n * @return {?}\n */\nsort(sortable: MdSortable) {\r\n    if (this.active != sortable.id) {\r\n      this.active = sortable.id;\r\n      this.direction = sortable.start ? sortable.start : this.start;\r\n    } else {\r\n      this.direction = this.getNextSortDirection(sortable);\r\n    }\r\n\r\n    this.sortChange.next({active: this.active, direction: this.direction});\r\n  }\n/**\n * Returns the next sort direction of the active sortable, checking for potential overrides.\n * @param {?} sortable\n * @return {?}\n */\ngetNextSortDirection(sortable: MdSortable): SortDirection {\r\n    if (!sortable) { return ''; }\r\n\r\n    // Get the sort direction cycle with the potential sortable overrides.\r\n    const /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\r\n    let /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\r\n\r\n    // Get and return the next direction in the cycle\r\n    let /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\r\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\r\n    return sortDirectionCycle[nextDirectionIndex];\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdSort], [matSort]',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input, args: ['mdSortActive', ] },],\n'start': [{ type: Input, args: ['mdSortStart', ] },],\n'direction': [{ type: Input, args: ['mdSortDirection', ] },],\n'disableClear': [{ type: Input, args: ['mdSortDisableClear', ] },],\n'_matSortActive': [{ type: Input, args: ['matSortActive', ] },],\n'_matSortStart': [{ type: Input, args: ['matSortStart', ] },],\n'_matSortDirection': [{ type: Input, args: ['matSortDirection', ] },],\n'_matSortDisableClear': [{ type: Input, args: ['matSortDisableClear', ] },],\n'sortChange': [{ type: Output, args: ['mdSortChange', ] },],\n'_matSortChange': [{ type: Output, args: ['matSortChange', ] },],\n};\n}\n\nfunction MdSort_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSort.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSort.ctorParameters;\n/** @type {?} */\nMdSort.propDecorators;\n/**\n * Collection of all registered sortables that this directive manages.\n * @type {?}\n */\nMdSort.prototype.sortables;\n/**\n * The id of the most recently sorted MdSortable.\n * @type {?}\n */\nMdSort.prototype.active;\n/**\n * The direction to set when an MdSortable is initially sorted.\rMay be overriden by the MdSortable's sort start.\n * @type {?}\n */\nMdSort.prototype.start;\n/**\n * The sort direction of the currently active MdSortable.\n * @type {?}\n */\nMdSort.prototype.direction;\n/** @type {?} */\nMdSort.prototype._disableClear;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n * @type {?}\n */\nMdSort.prototype.sortChange;\n}\n\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\r\n                               disableClear: boolean): SortDirection[] {\r\n  let /** @type {?} */ sortOrder: SortDirection[] = ['asc', 'desc'];\r\n  if (start == 'desc') { sortOrder.reverse(); }\r\n  if (!disableClear) { sortOrder.push(''); }\r\n\r\n  return sortOrder;\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {SortDirection} from './sort-direction';\n/**\n * To modify the labels and text displayed, create a new instance of MdSortHeaderIntl and\rinclude it in a custom provider.\n */\nexport class MdSortHeaderIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\rcomponents if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * ARIA label for the sorting button.\n */\nsortButtonLabel = (id: string) => {\r\n    return `Change sorting for ${id}`;\r\n  }\n/**\n * A label to describe the current sort (visible only to screenreaders).\n */\nsortDescriptionLabel = (id: string, direction: SortDirection) => {\r\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortHeaderIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeaderIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeaderIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\rcomponents if the labels have changed after initialization.\n * @type {?}\n */\nMdSortHeaderIntl.prototype.changes;\n/**\n * ARIA label for the sorting button.\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortButtonLabel;\n/**\n * A label to describe the current sort (visible only to screenreaders).\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortDescriptionLabel;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  Optional,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  trigger,\r\n  state,\r\n  style,\r\n  animate,\r\n  transition\r\n} from '@angular/animations';\r\nimport {CdkColumnDef} from '@angular/cdk/table';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {MdSort, MdSortable} from './sort';\r\nimport {MdSortHeaderIntl} from './sort-header-intl';\r\nimport {getMdSortHeaderNotContainedWithinMdSortError} from './sort-errors';\r\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\r\n\r\nconst /** @type {?} */ SORT_ANIMATION_TRANSITION =\r\n    AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\rarrow to display the current sort direction.\r\rMust be provided with an id and contained within a parent MdSort directive.\r\rIf used on header cells in a CdkTable, it will automatically default its id from its containing\rcolumn definition.\n */\nexport class MdSortHeader implements MdSortable {\nprivate _rerenderSubscription: Subscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\rthe column's name.\n */\nid: string;\n/**\n * Sets the position of the arrow that displays when sorted.\n */\narrowPosition: 'before' | 'after' = 'after';\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n */\nstart: 'asc' | 'desc';\n/**\n * Overrides the disable clear value of the containing MdSort for this MdSortable.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _id() { return this.id; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _id(v: string) { this.id = v; }\n/**\n * @param {?} _intl\n * @param {?} changeDetectorRef\n * @param {?} _sort\n * @param {?} _cdkColumnDef\n */\nconstructor(public _intl: MdSortHeaderIntl,\r\n              changeDetectorRef: ChangeDetectorRef,\npublic _sort: MdSort,\npublic _cdkColumnDef: CdkColumnDef) {\r\n    if (!_sort) {\r\n      throw getMdSortHeaderNotContainedWithinMdSortError();\r\n    }\r\n\r\n    this._rerenderSubscription = merge(_sort.sortChange, _intl.changes).subscribe(() => {\r\n      changeDetectorRef.markForCheck();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    if (!this.id && this._cdkColumnDef) {\r\n      this.id = this._cdkColumnDef.name;\r\n    }\r\n\r\n    this._sort.register(this);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._sort.deregister(this);\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\n/**\n * Whether this MdSortHeader is currently sorted in either ascending or descending order.\n * @return {?}\n */\n_isSorted() {\r\n    return this._sort.active == this.id && this._sort.direction;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: '[md-sort-header], [mat-sort-header]',\r\n  templateUrl: 'sort-header.html',\r\n  styleUrls: ['sort-header.css'],\r\n  host: {\r\n    '(click)': '_sort.sort(this)',\r\n    '[class.mat-sort-header-sorted]': '_isSorted()',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('indicator', [\r\n      state('asc', style({transform: 'translateY(0px)'})),\r\n      // 10px is the height of the sort indicator, minus the width of the pointers\r\n      state('desc', style({transform: 'translateY(10px)'})),\r\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\r\n    ]),\r\n    trigger('leftPointer', [\r\n      state('asc', style({transform: 'rotate(-45deg)'})),\r\n      state('desc', style({transform: 'rotate(45deg)'})),\r\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\r\n    ]),\r\n    trigger('rightPointer', [\r\n      state('asc', style({transform: 'rotate(45deg)'})),\r\n      state('desc', style({transform: 'rotate(-45deg)'})),\r\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\r\n    ])\r\n  ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSortHeaderIntl, },\n{type: ChangeDetectorRef, },\n{type: MdSort, decorators: [{ type: Optional }, ]},\n{type: CdkColumnDef, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input, args: ['md-sort-header', ] },],\n'arrowPosition': [{ type: Input },],\n'start': [{ type: Input, args: ['start', ] },],\n'disableClear': [{ type: Input },],\n'_id': [{ type: Input, args: ['mat-sort-header', ] },],\n};\n}\n\nfunction MdSortHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeader.ctorParameters;\n/** @type {?} */\nMdSortHeader.propDecorators;\n/** @type {?} */\nMdSortHeader.prototype._rerenderSubscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\rthe column's name.\n * @type {?}\n */\nMdSortHeader.prototype.id;\n/**\n * Sets the position of the arrow that displays when sorted.\n * @type {?}\n */\nMdSortHeader.prototype.arrowPosition;\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n * @type {?}\n */\nMdSortHeader.prototype.start;\n/** @type {?} */\nMdSortHeader.prototype._disableClear;\n/** @type {?} */\nMdSortHeader.prototype._intl;\n/** @type {?} */\nMdSortHeader.prototype._sort;\n/** @type {?} */\nMdSortHeader.prototype._cdkColumnDef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdSortHeader} from './sort-header';\r\nimport {MdSort} from './sort';\r\nimport {MdSortHeaderIntl} from './sort-header-intl';\r\nimport {CommonModule} from '@angular/common';\nexport class MdSortModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CommonModule],\r\n  exports: [MdSort, MdSortHeader],\r\n  declarations: [MdSort, MdSortHeader],\r\n  providers: [MdSortHeaderIntl]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSortModule,SortDirection,MdSortHeader,MdSortHeaderIntl,MdSortable,Sort,MdSort,MatSort,MatSortable,MatSortHeader,MatSortHeaderIntl,MatSortModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, TemplateRef} from '@angular/core';\r\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdStepLabel = CdkStepLabel;\nexport class MdStepLabel extends _MdStepLabel {\n/**\n * @param {?} template\n */\nconstructor(template: TemplateRef<any>) {\r\n    super(template);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdStepLabel], [matStepLabel]',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction MdStepLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepLabel.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {Component, Input, ViewEncapsulation} from '@angular/core';\r\nimport {MATERIAL_COMPATIBILITY_MODE} from '@angular/material/core';\r\nimport {MdStepLabel} from './step-label';\nexport class MdStepHeader {\n/**\n * Icon for the given step.\n */\nicon: string;\n/**\n * Label of the given step.\n */\nlabel: MdStepLabel | string;\n/**\n * Index of the given step.\n * @return {?}\n */\nget index() { return this._index; }\n/**\n * @param {?} value\n * @return {?}\n */\nset index(value: any) {\r\n    this._index = coerceNumberProperty(value);\r\n  }\nprivate _index: number;\n/**\n * Whether the given step is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: any) {\r\n    this._selected = coerceBooleanProperty(value);\r\n  }\nprivate _selected: boolean;\n/**\n * Whether the given step label is active.\n * @return {?}\n */\nget active() { return this._active; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: any) {\r\n    this._active = coerceBooleanProperty(value);\r\n  }\nprivate _active: boolean;\n/**\n * Whether the given step is optional.\n * @return {?}\n */\nget optional() { return this._optional; }\n/**\n * @param {?} value\n * @return {?}\n */\nset optional(value: any) {\r\n    this._optional = coerceBooleanProperty(value);\r\n  }\nprivate _optional: boolean;\n/**\n * Returns string label of given step if it is a text label.\n * @return {?}\n */\n_stringLabel(): string | null {\r\n    return this.label instanceof MdStepLabel ? null : this.label;\r\n  }\n/**\n * Returns MdStepLabel if the label of given step is a template label.\n * @return {?}\n */\n_templateLabel(): MdStepLabel | null {\r\n    return this.label instanceof MdStepLabel ? this.label : null;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-step-header, mat-step-header',\r\n  templateUrl: 'step-header.html',\r\n  styleUrls: ['step-header.css'],\r\n  host: {\r\n    'class': 'mat-step-header',\r\n    'role': 'tab',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'icon': [{ type: Input },],\n'label': [{ type: Input },],\n'index': [{ type: Input },],\n'selected': [{ type: Input },],\n'active': [{ type: Input },],\n'optional': [{ type: Input },],\n};\n}\n\nfunction MdStepHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepHeader.ctorParameters;\n/** @type {?} */\nMdStepHeader.propDecorators;\n/**\n * Icon for the given step.\n * @type {?}\n */\nMdStepHeader.prototype.icon;\n/**\n * Label of the given step.\n * @type {?}\n */\nMdStepHeader.prototype.label;\n/** @type {?} */\nMdStepHeader.prototype._index;\n/** @type {?} */\nMdStepHeader.prototype._selected;\n/** @type {?} */\nMdStepHeader.prototype._active;\n/** @type {?} */\nMdStepHeader.prototype._optional;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\r\nimport {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Inject,\r\n  Optional,\r\n  QueryList,\r\n  SkipSelf,\r\n  ViewChildren,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\r\nimport {\r\n  defaultErrorStateMatcher,\r\n  ErrorOptions,\r\n  ErrorStateMatcher, MATERIAL_COMPATIBILITY_MODE,\r\n  MD_ERROR_GLOBAL_OPTIONS,\r\n} from '@angular/material/core';\r\nimport {MdStepHeader} from './step-header';\r\nimport {MdStepLabel} from './step-label';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdStep = CdkStep;\r\nexport const /** @type {?} */ _MdStepper = CdkStepper;\nexport class MdStep extends _MdStep implements ErrorOptions {\n/**\n * Content for step label given by <ng-template matStepLabel> or <ng-template mdStepLabel>.\n */\nstepLabel: MdStepLabel;\n/**\n * Original ErrorStateMatcher that checks the validity of form control.\n */\nprivate _originalErrorStateMatcher: ErrorStateMatcher;\n/**\n * @param {?} mdStepper\n * @param {?} errorOptions\n */\nconstructor( mdStepper: MdStepper,\r\n                 errorOptions: ErrorOptions) {\r\n    super(mdStepper);\r\n    if (errorOptions && errorOptions.errorStateMatcher) {\r\n      this._originalErrorStateMatcher = errorOptions.errorStateMatcher;\r\n    } else {\r\n      this._originalErrorStateMatcher = defaultErrorStateMatcher;\r\n    }\r\n  }\n/**\n * Custom error state matcher that additionally checks for validity of interacted form.\n */\nerrorStateMatcher = (control: FormControl, form: FormGroupDirective | NgForm) => {\r\n    let originalErrorState = this._originalErrorStateMatcher(control, form);\r\n\r\n    // Custom error state checks for the validity of form that is not submitted or touched\r\n    // since user can trigger a form change by calling for another step without directly\r\n    // interacting with the current form.\r\n    let customErrorState =  control.invalid && this.interacted;\r\n\r\n    return originalErrorState || customErrorState;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-step, mat-step',\r\n  templateUrl: 'step.html',\r\n  providers: [{provide: MD_ERROR_GLOBAL_OPTIONS, useExisting: MdStep}],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdStepper, decorators: [{ type: Inject, args: [forwardRef(() => MdStepper), ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MD_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'stepLabel': [{ type: ContentChild, args: [MdStepLabel, ] },],\n};\n}\n\nfunction MdStep_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStep.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStep.ctorParameters;\n/** @type {?} */\nMdStep.propDecorators;\n/**\n * Content for step label given by <ng-template matStepLabel> or <ng-template mdStepLabel>.\n * @type {?}\n */\nMdStep.prototype.stepLabel;\n/**\n * Original ErrorStateMatcher that checks the validity of form control.\n * @type {?}\n */\nMdStep.prototype._originalErrorStateMatcher;\n/**\n * Custom error state matcher that additionally checks for validity of interacted form.\n * @type {?}\n */\nMdStep.prototype.errorStateMatcher;\n}\n\nexport class MdStepper extends _MdStepper {\n/**\n * The list of step headers of the steps in the stepper.\n */\n_stepHeader: QueryList<ElementRef>;\n/**\n * Steps that the stepper holds.\n */\n_steps: QueryList<MdStep>;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdStepper]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_stepHeader': [{ type: ViewChildren, args: [MdStepHeader, {read: ElementRef}, ] },],\n'_steps': [{ type: ContentChildren, args: [MdStep, ] },],\n};\n}\n\nfunction MdStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepper.ctorParameters;\n/** @type {?} */\nMdStepper.propDecorators;\n/**\n * The list of step headers of the steps in the stepper.\n * @type {?}\n */\nMdStepper.prototype._stepHeader;\n/**\n * Steps that the stepper holds.\n * @type {?}\n */\nMdStepper.prototype._steps;\n}\n\nexport class MdHorizontalStepper extends MdStepper { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-horizontal-stepper, mat-horizontal-stepper',\r\n  templateUrl: 'stepper-horizontal.html',\r\n  styleUrls: ['stepper.css'],\r\n  inputs: ['selectedIndex'],\r\n  host: {\r\n    'class': 'mat-stepper-horizontal',\r\n    'role': 'tablist',\r\n  },\r\n  animations: [\r\n    trigger('stepTransition', [\r\n      state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\r\n      state('current', style({transform: 'translate3d(0%, 0, 0)', visibility: 'visible'})),\r\n      state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\r\n      transition('* => *',\r\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\r\n    ])\r\n  ],\r\n  providers: [{provide: MdStepper, useExisting: MdHorizontalStepper}],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHorizontalStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHorizontalStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHorizontalStepper.ctorParameters;\n}\n\nexport class MdVerticalStepper extends MdStepper { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-vertical-stepper, mat-vertical-stepper',\r\n  templateUrl: 'stepper-vertical.html',\r\n  styleUrls: ['stepper.css'],\r\n  inputs: ['selectedIndex'],\r\n  host: {\r\n    'class': 'mat-stepper-vertical',\r\n    'role': 'tablist',\r\n  },\r\n  animations: [\r\n    trigger('stepTransition', [\r\n      state('previous', style({height: '0px', visibility: 'hidden'})),\r\n      state('next', style({height: '0px', visibility: 'hidden'})),\r\n      state('current', style({height: '*', visibility: 'visible'})),\r\n      transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\r\n    ])\r\n  ],\r\n  providers: [{provide: MdStepper, useExisting: MdVerticalStepper}],\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdVerticalStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdVerticalStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdVerticalStepper.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\r\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Renderer2,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {first} from 'rxjs/operator/first';\r\nimport {startWith} from 'rxjs/operator/startWith';\r\nimport {takeUntil} from 'rxjs/operator/takeUntil';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Throws an exception when two MdDrawer are matching the same position.\n * @param {?} position\n * @return {?}\n */\nexport function throwMdDuplicatedDrawerError(position: string) {\r\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\r\n}\n/**\n * Drawer toggle promise result.\r\\@deprecated\n */\nexport class MdDrawerToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\r\n}\n\nfunction MdDrawerToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerToggleResult.prototype.type;\n/** @type {?} */\nMdDrawerToggleResult.prototype.animationFinished;\n}\n\nexport class MdDrawerContent implements AfterContentInit {\n/**\n * Margins to be applied to the content. These are used to push / shrink the drawer content when a\rdrawer is open. We use margin rather than transform even for push mode because transform breaks\rfixed position elements inside of the transformed element.\n */\n_margins: {left: number, right: number} = {left: 0, right: 0};\n/**\n * @param {?} _changeDetectorRef\n * @param {?} _container\n */\nconstructor(\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _container: MdDrawerContainer) {\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._container._contentMargins.subscribe(margins => {\r\n      this._margins = margins;\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-drawer-content, mat-drawer-content',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    'class': 'mat-drawer-content',\r\n    '[style.marginLeft.px]': '_margins.left',\r\n    '[style.marginRight.px]': '_margins.right',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: MdDrawerContainer, decorators: [{ type: Inject, args: [forwardRef(() => MdDrawerContainer), ] }, ]},\n];\n}\n\nfunction MdDrawerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawerContent.ctorParameters;\n/**\n * Margins to be applied to the content. These are used to push / shrink the drawer content when a\rdrawer is open. We use margin rather than transform even for push mode because transform breaks\rfixed position elements inside of the transformed element.\n * @type {?}\n */\nMdDrawerContent.prototype._margins;\n/** @type {?} */\nMdDrawerContent.prototype._changeDetectorRef;\n/** @type {?} */\nMdDrawerContent.prototype._container;\n}\n\n/**\n * <md-drawer> component.\r\rThis component corresponds to a drawer that can be opened on the drawer container.\r\rPlease refer to README.md for examples on how to use it.\n */\nexport class MdDrawer implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\nprivate _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n */\nprivate _enableAnimations = false;\n/**\n * The side that the drawer is attached to.\n * @return {?}\n */\nget position() { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value) {\r\n    // Make sure we have a valid value.\r\n    value = value === 'end' ? 'end' : 'start';\r\n    if (value != this._position) {\r\n      this._position = value;\r\n      this.onAlignChanged.emit();\r\n      this.onPositionChanged.emit();\r\n    }\r\n  }\nprivate _position: 'start' | 'end' = 'start';\n/**\n * @deprecated\n * @return {?}\n */\nget align() { return this.position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) { this.position = value; }\n/**\n * Mode of the drawer; one of 'over', 'push' or 'side'.\n * @return {?}\n */\nget mode() { return this._mode; }\n/**\n * @param {?} value\n * @return {?}\n */\nset mode(value) {\r\n    this._mode = value;\r\n    this._modeChanged.next();\r\n  }\nprivate _mode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the drawer is opened.\n */\nprivate _opened: boolean = false;\n/**\n * Emits whenever the drawer has started animating.\n */\n_animationStarted = new EventEmitter<void>();\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n */\n_isAnimating = false;\n/**\n * Current state of the sidenav animation.\n */\n_animationState: 'open-instant' | 'open' | 'void' = 'void';\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\rcompatibility and should be removed next time we do drawer breaking changes.\r\\@deprecated\n */\nprivate _currentTogglePromise: Promise<MdDrawerToggleResult> | null;\n/**\n * Event emitted when the drawer is fully opened.\n */\nonOpen = new EventEmitter<MdDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer is fully closed.\n */\nonClose = new EventEmitter<MdDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer's position changes.\n */\nonPositionChanged = new EventEmitter<void>();\n/**\n * @deprecated\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * An observable that emits when the drawer mode changes. This is used by the drawer container to\rto know when to when the mode changes so it can adapt the margins on the content.\n */\n_modeChanged = new Subject();\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\r\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\r\n    return this.opened && this.mode !== 'side';\r\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _doc\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _doc: any) {\r\n    this.onOpen.subscribe(() => {\r\n      if (this._doc) {\r\n        this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\r\n      }\r\n\r\n      if (this.isFocusTrapEnabled && this._focusTrap) {\r\n        this._focusTrap.focusInitialElementWhenReady();\r\n      }\r\n    });\r\n\r\n    this.onClose.subscribe(() => this._restoreFocus());\r\n  }\n/**\n * If focus is currently inside the drawer, restores it to where it was before the drawer\ropened.\n * @return {?}\n */\nprivate _restoreFocus() {\r\n    let /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\r\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\r\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\r\n        this._elementFocusedBeforeDrawerWasOpened.focus();\r\n      } else {\r\n        this._elementRef.nativeElement.blur();\r\n      }\r\n    }\r\n\r\n    this._elementFocusedBeforeDrawerWasOpened = null;\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\r\n    this._enableAnimations = true;\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    if (this._focusTrap) {\r\n      this._focusTrap.destroy();\r\n    }\r\n  }\n/**\n * Whether the drawer is opened. We overload this because we trigger an event when it\rstarts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\r\n    this.toggle(coerceBooleanProperty(v));\r\n  }\n/**\n * Open the drawer.\n * @return {?}\n */\nopen(): Promise<MdDrawerToggleResult> {\r\n    return this.toggle(true);\r\n  }\n/**\n * Close the drawer.\n * @return {?}\n */\nclose(): Promise<MdDrawerToggleResult> {\r\n    return this.toggle(false);\r\n  }\n/**\n * Toggle this drawer.\r\\@param isOpen Whether the drawer should be open.\n * @param {?=} isOpen\n * @return {?}\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdDrawerToggleResult> {\r\n    if (!this._isAnimating) {\r\n      this._opened = isOpen;\r\n\r\n      if (isOpen) {\r\n        this._animationState = this._enableAnimations ? 'open' : 'open-instant';\r\n      } else {\r\n        this._animationState = 'void';\r\n      }\r\n\r\n      this._currentTogglePromise = new Promise(resolve => {\r\n        first.call(isOpen ? this.onOpen : this.onClose).subscribe(resolve);\r\n      });\r\n\r\n      if (this._focusTrap) {\r\n        this._focusTrap.enabled = this.isFocusTrapEnabled;\r\n      }\r\n    }\r\n\r\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\r\n    // It should be removed next time we do breaking changes in the drawer.\r\n    return /** @type {?} */(( this._currentTogglePromise));\r\n  }\n/**\n * Handles the keyboard events.\r\\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\r\n    if (event.keyCode === ESCAPE && !this.disableClose) {\r\n      this.close();\r\n      event.stopPropagation();\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_onAnimationStart() {\r\n    this._isAnimating = true;\r\n    this._animationStarted.emit();\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onAnimationEnd(event: AnimationEvent) {\r\n    const {fromState, toState} = event;\r\n\r\n    if (toState === 'open' && fromState === 'void') {\r\n      this.onOpen.emit(new MdDrawerToggleResult('open', true));\r\n    } else if (toState === 'void' && fromState === 'open') {\r\n      this.onClose.emit(new MdDrawerToggleResult('close', true));\r\n    }\r\n\r\n    // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\r\n    // the end if animations are disabled. Make this call async to ensure that it still fires\r\n    // at the appropriate time.\r\n    Promise.resolve().then(() => {\r\n      this._isAnimating = false;\r\n      this._currentTogglePromise = null;\r\n    });\r\n  }\n/**\n * @return {?}\n */\nget _width() {\r\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-drawer, mat-drawer',\r\n  template: '<ng-content></ng-content>',\r\n  animations: [\r\n    trigger('transform', [\r\n      state('open, open-instant', style({\r\n        transform: 'translate3d(0, 0, 0)',\r\n        visibility: 'visible',\r\n      })),\r\n      state('void', style({\r\n        visibility: 'hidden',\r\n      })),\r\n      transition('void => open-instant', animate('0ms')),\r\n      transition('void <=> open, open-instant => void',\r\n          animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\r\n    ])\r\n  ],\r\n  host: {\r\n    'class': 'mat-drawer',\r\n    '[@transform]': '_animationState',\r\n    '(@transform.start)': '_onAnimationStart()',\r\n    '(@transform.done)': '_onAnimationEnd($event)',\r\n    '(keydown)': 'handleKeydown($event)',\r\n    // must prevent the browser from aligning text based on value\r\n    '[attr.align]': 'null',\r\n    '[class.mat-drawer-end]': 'position === \"end\"',\r\n    '[class.mat-drawer-over]': 'mode === \"over\"',\r\n    '[class.mat-drawer-push]': 'mode === \"push\"',\r\n    '[class.mat-drawer-side]': 'mode === \"side\"',\r\n    'tabIndex': '-1',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input },],\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onPositionChanged': [{ type: Output, args: ['positionChanged', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdDrawer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawer.ctorParameters;\n/** @type {?} */\nMdDrawer.propDecorators;\n/** @type {?} */\nMdDrawer.prototype._focusTrap;\n/** @type {?} */\nMdDrawer.prototype._elementFocusedBeforeDrawerWasOpened;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n * @type {?}\n */\nMdDrawer.prototype._enableAnimations;\n/** @type {?} */\nMdDrawer.prototype._position;\n/** @type {?} */\nMdDrawer.prototype._mode;\n/** @type {?} */\nMdDrawer.prototype._disableClose;\n/**\n * Whether the drawer is opened.\n * @type {?}\n */\nMdDrawer.prototype._opened;\n/**\n * Emits whenever the drawer has started animating.\n * @type {?}\n */\nMdDrawer.prototype._animationStarted;\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n * @type {?}\n */\nMdDrawer.prototype._isAnimating;\n/**\n * Current state of the sidenav animation.\n * @type {?}\n */\nMdDrawer.prototype._animationState;\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\rcompatibility and should be removed next time we do drawer breaking changes.\r\\@deprecated\n * @type {?}\n */\nMdDrawer.prototype._currentTogglePromise;\n/**\n * Event emitted when the drawer is fully opened.\n * @type {?}\n */\nMdDrawer.prototype.onOpen;\n/**\n * Event emitted when the drawer is fully closed.\n * @type {?}\n */\nMdDrawer.prototype.onClose;\n/**\n * Event emitted when the drawer's position changes.\n * @type {?}\n */\nMdDrawer.prototype.onPositionChanged;\n/**\n * @deprecated\n * @type {?}\n */\nMdDrawer.prototype.onAlignChanged;\n/**\n * An observable that emits when the drawer mode changes. This is used by the drawer container to\rto know when to when the mode changes so it can adapt the margins on the content.\n * @type {?}\n */\nMdDrawer.prototype._modeChanged;\n/** @type {?} */\nMdDrawer.prototype._elementRef;\n/** @type {?} */\nMdDrawer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDrawer.prototype._doc;\n}\n\n/**\n * <md-drawer-container> component.\r\rThis is the parent component to one or two <md-drawer>s that validates the state internally\rand coordinates the backdrop and content styling.\n */\nexport class MdDrawerContainer implements AfterContentInit, OnDestroy {\r\n   _drawers: QueryList<MdDrawer>;\r\n\r\n   _content: MdDrawerContent;\n/**\n * The drawer child with the `start` position.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The drawer child with the `end` position.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the drawer backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The drawer at the start/end position, independent of direction.\n */\nprivate _start: MdDrawer | null;\nprivate _end: MdDrawer | null;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\rThey're used as aliases for the above to set the left/right style properly.\rIn LTR, _left == _start and _right == _end.\rIn RTL, _left == _end and _right == _start.\n */\nprivate _left: MdDrawer | null;\nprivate _right: MdDrawer | null;\n/**\n * Subscription to the Directionality change EventEmitter.\n */\nprivate _dirChangeSubscription = Subscription.EMPTY;\r\n\r\n  _contentMargins = new Subject<{left: number, right: number}>();\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\r\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\r\n    // properties to point to the proper start/end.\r\n    if (_dir != null) {\r\n      this._dirChangeSubscription = _dir.change.subscribe(() => this._validateDrawers());\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    startWith.call(this._drawers.changes, null).subscribe(() => {\r\n      this._validateDrawers();\r\n      this._drawers.forEach((drawer: MdDrawer) => {\r\n        this._watchDrawerToggle(drawer);\r\n        this._watchDrawerPosition(drawer);\r\n        this._watchDrawerMode(drawer);\r\n      });\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._dirChangeSubscription.unsubscribe();\r\n  }\n/**\n * Calls `open` of both start and end drawers\n * @return {?}\n */\nopen(): void {\r\n    this._drawers.forEach(drawer => drawer.open());\r\n  }\n/**\n * Calls `close` of both start and end drawers\n * @return {?}\n */\nclose(): void {\r\n    this._drawers.forEach(drawer => drawer.close());\r\n  }\n/**\n * Subscribes to drawer events in order to set a class on the main container element when the\rdrawer is open and the backdrop is visible. This ensures any overflow on the container element\ris properly hidden.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerToggle(drawer: MdDrawer): void {\r\n    takeUntil.call(drawer._animationStarted, this._drawers.changes).subscribe(() => {\r\n      // Set the transition class on the container so that the animations occur. This should not\r\n      // be set initially because animations should only be triggered via a change in state.\r\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-transition');\r\n      this._updateContentMargins();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    if (drawer.mode !== 'side') {\r\n      takeUntil.call(merge(drawer.onOpen, drawer.onClose), this._drawers.changes).subscribe(() =>\r\n          this._setContainerClass(drawer.opened));\r\n    }\r\n  }\n/**\n * Subscribes to drawer onPositionChanged event in order to re-validate drawers when the position\rchanges.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerPosition(drawer: MdDrawer): void {\r\n    if (!drawer) {\r\n      return;\r\n    }\r\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\r\n    // since both drawers may be swapping positions at the same time.\r\n    takeUntil.call(drawer.onPositionChanged, this._drawers.changes).subscribe(() => {\r\n      first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\r\n        this._validateDrawers();\r\n      });\r\n    });\r\n  }\n/**\n * Subscribes to changes in drawer mode so we can run change detection.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerMode(drawer: MdDrawer): void {\r\n    if (drawer) {\r\n      takeUntil.call(drawer._modeChanged, this._drawers.changes).subscribe(() => {\r\n        this._updateContentMargins();\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n  }\n/**\n * Toggles the 'mat-drawer-opened' class on the main 'md-drawer-container' element.\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setContainerClass(isAdd: boolean): void {\r\n    if (isAdd) {\r\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-opened');\r\n    } else {\r\n      this._renderer.removeClass(this._element.nativeElement, 'mat-drawer-opened');\r\n    }\r\n  }\n/**\n * Validate the state of the drawer children components.\n * @return {?}\n */\nprivate _validateDrawers() {\r\n    this._start = this._end = null;\r\n\r\n    // Ensure that we have at most one start and one end drawer.\r\n    this._drawers.forEach(drawer => {\r\n      if (drawer.position == 'end') {\r\n        if (this._end != null) {\r\n          throwMdDuplicatedDrawerError('end');\r\n        }\r\n        this._end = drawer;\r\n      } else {\r\n        if (this._start != null) {\r\n          throwMdDuplicatedDrawerError('start');\r\n        }\r\n        this._start = drawer;\r\n      }\r\n    });\r\n\r\n    this._right = this._left = null;\r\n\r\n    // Detect if we're LTR or RTL.\r\n    if (this._dir == null || this._dir.value == 'ltr') {\r\n      this._left = this._start;\r\n      this._right = this._end;\r\n    } else {\r\n      this._left = this._end;\r\n      this._right = this._start;\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\r\n    this.backdropClick.emit();\r\n    this._closeModalDrawer();\r\n  }\n/**\n * @return {?}\n */\n_closeModalDrawer() {\r\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\r\n    [this._start, this._end]\r\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\r\n      .forEach(drawer => /** @type {?} */(( drawer)).close());\r\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\r\n    return (this._isDrawerOpen(this._start) && /** @type {?} */(( this._start)).mode != 'side')\r\n        || (this._isDrawerOpen(this._end) && /** @type {?} */(( this._end)).mode != 'side');\r\n  }\n/**\n * @param {?} drawer\n * @return {?}\n */\nprivate _isDrawerOpen(drawer: MdDrawer | null): boolean {\r\n    return drawer != null && drawer.opened;\r\n  }\n/**\n * Recalculates and updates the inline styles for the content. Note that this should be used\rsparingly, because it causes a reflow.\n * @return {?}\n */\nprivate _updateContentMargins() {\r\n    // 1. For drawers in `over` mode, they don't affect the content.\r\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\r\n    //    left margin (for left drawer) or right margin (for right the drawer).\r\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\r\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\r\n    //    margin from the other side.\r\n\r\n    let /** @type {?} */ left = 0;\r\n    let /** @type {?} */ right = 0;\r\n\r\n    if (this._left && this._left.opened) {\r\n      if (this._left.mode == 'side') {\r\n        left += this._left._width;\r\n      } else if (this._left.mode == 'push') {\r\n        let /** @type {?} */ width = this._left._width;\r\n        left += width;\r\n        right -= width;\r\n      }\r\n    }\r\n\r\n    if (this._right && this._right.opened) {\r\n      if (this._right.mode == 'side') {\r\n        right += this._right._width;\r\n      } else if (this._right.mode == 'push') {\r\n        let /** @type {?} */ width = this._right._width;\r\n        right += width;\r\n        left -= width;\r\n      }\r\n    }\r\n\r\n    this._contentMargins.next({left, right});\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-drawer-container, mat-drawer-container',\r\n  templateUrl: 'drawer-container.html',\r\n  styleUrls: [\r\n    'drawer.css',\r\n    'drawer-transitions.css',\r\n  ],\r\n  host: {\r\n    'class': 'mat-drawer-container',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MdDrawer, ] },],\n'_content': [{ type: ContentChild, args: [MdDrawerContent, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdDrawerContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawerContainer.ctorParameters;\n/** @type {?} */\nMdDrawerContainer.propDecorators;\n/** @type {?} */\nMdDrawerContainer.prototype._drawers;\n/** @type {?} */\nMdDrawerContainer.prototype._content;\n/**\n * Event emitted when the drawer backdrop is clicked.\n * @type {?}\n */\nMdDrawerContainer.prototype.backdropClick;\n/**\n * The drawer at the start/end position, independent of direction.\n * @type {?}\n */\nMdDrawerContainer.prototype._start;\n/** @type {?} */\nMdDrawerContainer.prototype._end;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\rThey're used as aliases for the above to set the left/right style properly.\rIn LTR, _left == _start and _right == _end.\rIn RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdDrawerContainer.prototype._left;\n/** @type {?} */\nMdDrawerContainer.prototype._right;\n/**\n * Subscription to the Directionality change EventEmitter.\n * @type {?}\n */\nMdDrawerContainer.prototype._dirChangeSubscription;\n/** @type {?} */\nMdDrawerContainer.prototype._contentMargins;\n/** @type {?} */\nMdDrawerContainer.prototype._dir;\n/** @type {?} */\nMdDrawerContainer.prototype._element;\n/** @type {?} */\nMdDrawerContainer.prototype._renderer;\n/** @type {?} */\nMdDrawerContainer.prototype._ngZone;\n/** @type {?} */\nMdDrawerContainer.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy, ChangeDetectorRef,\r\n  Component, ContentChild,\r\n  ContentChildren, forwardRef, Inject, Input,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {MdDrawer, MdDrawerContainer, MdDrawerContent} from './drawer';\r\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nexport class MdSidenavContent extends MdDrawerContent {\n/**\n * @param {?} changeDetectorRef\n * @param {?} container\n */\nconstructor(\r\n      changeDetectorRef: ChangeDetectorRef,\r\n       container: MdSidenavContainer) {\r\n    super(changeDetectorRef, container);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-sidenav-content, mat-sidenav-content',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    'class': 'mat-drawer-content mat-sidenav-content',\r\n    '[style.marginLeft.px]': '_margins.left',\r\n    '[style.marginRight.px]': '_margins.right',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: MdSidenavContainer, decorators: [{ type: Inject, args: [forwardRef(() => MdSidenavContainer), ] }, ]},\n];\n}\n\nfunction MdSidenavContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContent.ctorParameters;\n}\n\nexport class MdSidenav extends MdDrawer {\n/**\n * Whether the sidenav is fixed in the viewport.\n * @return {?}\n */\nget fixedInViewport() { return this._fixedInViewport; }\n/**\n * @param {?} value\n * @return {?}\n */\nset fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\nprivate _fixedInViewport = false;\n/**\n * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\rmode.\n * @return {?}\n */\nget fixedTopGap() { return this._fixedTopGap; }\n/**\n * @param {?} value\n * @return {?}\n */\nset fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\nprivate _fixedTopGap = 0;\n/**\n * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\rfixed mode.\n * @return {?}\n */\nget fixedBottomGap() { return this._fixedBottomGap; }\n/**\n * @param {?} value\n * @return {?}\n */\nset fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\nprivate _fixedBottomGap = 0;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-sidenav, mat-sidenav',\r\n  template: '<ng-content></ng-content>',\r\n  animations: [\r\n    trigger('transform', [\r\n      state('open, open-instant', style({\r\n        transform: 'translate3d(0, 0, 0)',\r\n        visibility: 'visible',\r\n      })),\r\n      state('void', style({\r\n        visibility: 'hidden',\r\n      })),\r\n      transition('void => open-instant', animate('0ms')),\r\n      transition('void <=> open, open-instant => void',\r\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\r\n    ])\r\n  ],\r\n  host: {\r\n    'class': 'mat-drawer mat-sidenav',\r\n    'tabIndex': '-1',\r\n    '[@transform]': '_animationState',\r\n    '(@transform.start)': '_onAnimationStart()',\r\n    '(@transform.done)': '_onAnimationEnd($event)',\r\n    '(keydown)': 'handleKeydown($event)',\r\n    // must prevent the browser from aligning text based on value\r\n    '[attr.align]': 'null',\r\n    '[class.mat-drawer-end]': 'position === \"end\"',\r\n    '[class.mat-drawer-over]': 'mode === \"over\"',\r\n    '[class.mat-drawer-push]': 'mode === \"push\"',\r\n    '[class.mat-drawer-side]': 'mode === \"side\"',\r\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\r\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\r\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fixedInViewport': [{ type: Input },],\n'fixedTopGap': [{ type: Input },],\n'fixedBottomGap': [{ type: Input },],\n};\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n/** @type {?} */\nMdSidenav.propDecorators;\n/** @type {?} */\nMdSidenav.prototype._fixedInViewport;\n/** @type {?} */\nMdSidenav.prototype._fixedTopGap;\n/** @type {?} */\nMdSidenav.prototype._fixedBottomGap;\n}\n\nexport class MdSidenavContainer extends MdDrawerContainer {\r\n   _drawers;\r\n\r\n   _content;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-sidenav-container, mat-sidenav-container',\r\n  templateUrl: 'sidenav-container.html',\r\n  styleUrls: [\r\n    'drawer.css',\r\n    'drawer-transitions.css',\r\n  ],\r\n  host: {\r\n    'class': 'mat-drawer-container mat-sidenav-container',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MdSidenav, ] },],\n'_content': [{ type: ContentChild, args: [MdSidenavContent, ] },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._drawers;\n/** @type {?} */\nMdSidenavContainer.prototype._content;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MdDrawer, MdDrawerContainer, MdDrawerContent} from './drawer';\r\nimport {MdSidenav, MdSidenavContainer, MdSidenavContent} from './sidenav';\nexport class MdSidenavModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CommonModule, MdCommonModule, A11yModule, OverlayModule],\r\n  exports: [\r\n    MdCommonModule,\r\n    MdDrawer,\r\n    MdDrawerContainer,\r\n    MdDrawerContent,\r\n    MdSidenav,\r\n    MdSidenavContainer,\r\n    MdSidenavContent,\r\n  ],\r\n  declarations: [\r\n    MdDrawer,\r\n    MdDrawerContainer,\r\n    MdDrawerContent,\r\n    MdSidenav,\r\n    MdSidenavContainer,\r\n    MdSidenavContent,\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSidenavModule,throwMdDuplicatedDrawerError,MdDrawerToggleResult,MdDrawerContent,MdDrawer,MdDrawerContainer,MdSidenavContent,MdSidenav,MdSidenavContainer,MatDrawerToggleResult,MatDrawer,MatDrawerContainer,MatSidenav,MatSidenavContainer,MatSidenavModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  applyCssTransform,\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  HammerInput,\r\n  HasTabIndex,\r\n  MATERIAL_COMPATIBILITY_MODE,\r\n  MdRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex,\r\n  RippleRef,\r\n} from '@angular/material/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\n\r\n// Increasing integer for generating unique ids for slide-toggle components.\r\nlet /** @type {?} */ nextUniqueId = 0;\r\n\r\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdSlideToggle),\r\n  multi: true\r\n};\n/**\n * Change event object emitted by a MdSlideToggle.\n */\nexport class MdSlideToggleChange {\r\n  source: MdSlideToggle;\r\n  checked: boolean;\r\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSlideToggleBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdSlideToggleBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleBase.prototype._renderer;\n/** @type {?} */\nMdSlideToggleBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdSlideToggleMixinBase =\r\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MdSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nexport class MdSlideToggle extends _MdSlideToggleMixinBase implements OnDestroy, AfterContentInit,\r\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId: string = `md-slide-toggle-${++nextUniqueId}`;\nprivate _slideRenderer: SlideToggleRenderer;\nprivate _required: boolean = false;\nprivate _checked: boolean = false;\n/**\n * Reference to the focus state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Used to set the aria-label attribute on the underlying input element.\n */\nariaLabel: string | null = null;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n */\nariaLabelledby: string | null = null;\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the slide-toggle element is checked or not\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\r\n    this._checked = !!value;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n */\nchange: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Reference to the underlying input element.\n */\n_inputElement: ElementRef;\n/**\n * Reference to the ripple directive on the thumb container.\n */\n_ripple: MdRipple;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _platform\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n * @param {?} tabIndex\n */\nconstructor(elementRef: ElementRef,\r\n              renderer: Renderer2,\nprivate _platform: Platform,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\r\n               tabIndex: string) {\r\n    super(renderer, elementRef);\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\r\n\r\n    this._focusMonitor\r\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\r\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\r\n  }\n/**\n * This function will called if the underlying input changed its value through user interaction.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the component's `change` output.\r\n    event.stopPropagation();\r\n\r\n    // Sync the value from the underlying input element with the slide-toggle component.\r\n    this.checked = this._inputElement.nativeElement.checked;\r\n\r\n    // Emit our custom change event if the native input emitted one.\r\n    // It is important to only emit it, if the native input triggered one, because we don't want\r\n    // to trigger a change event, when the `checked` variable changes programmatically.\r\n    this._emitChangeEvent();\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\r\n    // In some situations the user will release the mouse on the label element. The label element\r\n    // redirects the click to the underlying input element and will result in a value change.\r\n    // Prevent the default behavior if dragging, because the value will be set after drag.\r\n    if (this._slideRenderer.dragging) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `slide-toggle` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\r\n    this.checked = !!value;\r\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\r\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\r\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\r\n    this.checked = !this.checked;\r\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\r\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\r\n      // For keyboard focus show a persistent ripple as focus indicator.\r\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\r\n    } else if (!focusOrigin) {\r\n      this.onTouched();\r\n\r\n      // Fade out and clear the focus ripple if one is currently present.\r\n      if (this._focusRipple) {\r\n        this._focusRipple.fadeOut();\r\n        this._focusRipple = null;\r\n      }\r\n    }\r\n  }\n/**\n * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n * @return {?}\n */\nprivate _emitChangeEvent() {\r\n    let /** @type {?} */ event = new MdSlideToggleChange();\r\n    event.source = this;\r\n    event.checked = this.checked;\r\n    this.change.emit(event);\r\n    this.onChange(this.checked);\r\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\r\n    if (!this.disabled) {\r\n      this._slideRenderer.startThumbDrag(this.checked);\r\n    }\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\r\n    if (this._slideRenderer.dragging) {\r\n      this._slideRenderer.updateThumbPosition(event.deltaX);\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\r\n    if (this._slideRenderer.dragging) {\r\n      let /** @type {?} */ _previousChecked = this.checked;\r\n      this.checked = this._slideRenderer.dragPercentage > 50;\r\n\r\n      if (_previousChecked !== this.checked) {\r\n        this._emitChangeEvent();\r\n      }\r\n\r\n      // The drag should be stopped outside of the current event handler, because otherwise the\r\n      // click event will be fired before and will revert the drag change.\r\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\r\n    }\r\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\r\n    // This method is getting called whenever the label of the slide-toggle changes.\r\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\r\n    // that has been recognized by the cdkObserveContent directive.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-slide-toggle, mat-slide-toggle',\r\n  host: {\r\n    'class': 'mat-slide-toggle',\r\n    '[id]': 'id',\r\n    '[class.mat-checked]': 'checked',\r\n    '[class.mat-disabled]': 'disabled',\r\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\r\n  },\r\n  templateUrl: 'slide-toggle.html',\r\n  styleUrls: ['slide-toggle.css'],\r\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'required': [{ type: Input },],\n'checked': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._platform;\n/** @type {?} */\nMdSlideToggle.prototype._focusMonitor;\n/** @type {?} */\nMdSlideToggle.prototype._changeDetectorRef;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n/**\n * Reference to the thumb HTMLElement.\n */\nprivate _thumbEl: HTMLElement;\n/**\n * Reference to the thumb bar HTMLElement.\n */\nprivate _thumbBarEl: HTMLElement;\n/**\n * Width of the thumb bar of the slide-toggle.\n */\nprivate _thumbBarWidth: number;\n/**\n * Previous checked state before drag started.\n */\nprivate _previousChecked: boolean;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n */\ndragPercentage: number;\n/**\n * Whether the thumb is currently being dragged.\n */\ndragging: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} platform\n */\nconstructor(elementRef: ElementRef, platform: Platform) {\r\n    // We only need to interact with these elements when we're on the browser, so only grab\r\n    // the reference in that case.\r\n    if (platform.isBrowser) {\r\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\r\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\r\n    }\r\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\r\n    if (this.dragging) { return; }\r\n\r\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\r\n    this._thumbEl.classList.add('mat-dragging');\r\n\r\n    this._previousChecked = checked;\r\n    this.dragging = true;\r\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\r\n    if (!this.dragging) { return false; }\r\n\r\n    this.dragging = false;\r\n    this._thumbEl.classList.remove('mat-dragging');\r\n\r\n    // Reset the transform because the component will take care of the thumb position after drag.\r\n    applyCssTransform(this._thumbEl, '');\r\n\r\n    return this.dragPercentage > 50;\r\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\r\n    this.dragPercentage = this._getDragPercentage(distance);\r\n    // Calculate the moved distance based on the thumb bar width.\r\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\r\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\r\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\r\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\r\n\r\n    // When the toggle was initially checked, then we have to start the drag at the end.\r\n    if (this._previousChecked) {\r\n      percentage += 100;\r\n    }\r\n\r\n    return Math.max(0, Math.min(percentage, 100));\r\n  }\r\n\r\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle,MAT_SLIDE_TOGGLE_VALUE_ACCESSOR,MatSlideToggle,MatSlideToggleBase,MatSlideToggleChange,MatSlideToggleModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {NgModule} from '@angular/core';\r\nimport {\r\n  GestureConfig,\r\n  MdCommonModule,\r\n  MdRippleModule,\r\n} from '@angular/material/core';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {MdSlideToggle} from './slide-toggle';\nexport class MdSlideToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdRippleModule, MdCommonModule, PlatformModule, ObserversModule, A11yModule],\r\n  exports: [MdSlideToggle, MdCommonModule],\r\n  declarations: [MdSlideToggle],\r\n  providers: [\r\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSlideToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggleModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  Renderer2,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  HammerInput,\r\n  mixinColor,\r\n  mixinDisabled,\r\n} from '@angular/material/core';\r\nimport {FocusOrigin, FocusMonitor} from '@angular/cdk/a11y';\r\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\rthe default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\rThis allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdSlider),\r\n  multi: true\r\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number | null;\r\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSliderBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdSliderBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderBase.prototype._renderer;\n/** @type {?} */\nMdSliderBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdSliderMixinBase = mixinColor(mixinDisabled(MdSliderBase), 'accent');\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\rbehavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\r\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) {\r\n    this._invert = coerceBooleanProperty(value);\r\n  }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() { return this._max; }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\r\n    this._max = coerceNumberProperty(v, this._max);\r\n    this._percent = this._calculatePercentage(this._value);\r\n\r\n    // Since this also modifies the percentage, we need to let the change detection know.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() { return this._min; }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\r\n    this._min = coerceNumberProperty(v, this._min);\r\n\r\n    // If the value wasn't explicitly set by the user, set it to the min.\r\n    if (this._value === null) {\r\n      this.value = this._min;\r\n    }\r\n    this._percent = this._calculatePercentage(this._value);\r\n\r\n    // Since this also modifies the percentage, we need to let the change detection know.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\r\n    this._step = coerceNumberProperty(v, this._step);\r\n\r\n    if (this._step % 1 !== 0) {\r\n      this._roundLabelTo = /** @type {?} */(( this._step.toString().split('.').pop())).length;\r\n    }\r\n\r\n    // Since this could modify the label, we need to notify the change detection.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\rEx: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\r\n    if (value === 'auto') {\r\n      this._tickInterval = 'auto';\r\n    } else if (typeof value === 'number' || typeof value === 'string') {\r\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\r\n    } else {\r\n      this._tickInterval = 0;\r\n    }\r\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\r\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\r\n    if (this._value === null) {\r\n      this.value = this._min;\r\n    }\r\n    return this._value;\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number | null) {\r\n    if (v !== this._value) {\r\n      this._value = coerceNumberProperty(v, this._value || 0);\r\n      this._percent = this._calculatePercentage(this._value);\r\n\r\n      // Since this also modifies the percentage, we need to let the change detection know.\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\nprivate _value: number | null = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) {\r\n    this._vertical = coerceBooleanProperty(value);\r\n  }\nprivate _vertical = false;\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string | number {\r\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\r\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\r\n    // every change detection cycle.\r\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\r\n      return this.value.toFixed(this._roundLabelTo);\r\n    }\r\n\r\n    return this.value || 0;\r\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\rUsed to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\rUsed to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\r(i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\r\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\r\n    // top. However from a y-axis standpoint this is inverted.\r\n    return this.vertical ? !this.invert : this.invert;\r\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\r\n    return this.percent === 0;\r\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\relements.\n * @return {?}\n */\nget _thumbGap() {\r\n    if (this.disabled) {\r\n      return DISABLED_THUMB_GAP;\r\n    }\r\n    if (this._isMinValue && !this.thumbLabel) {\r\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\r\n    }\r\n    return 0;\r\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\r\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\r\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\r\n    return {\r\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\r\n    };\r\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\r\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\r\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\r\n    return {\r\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\r\n    };\r\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\r\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\r\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\r\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\r\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\r\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\r\n    return {\r\n      'transform': `translate${axis}(${sign}${offset}%)`\r\n    };\r\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\r\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\r\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\r\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\r\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\r\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\r\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\r\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\r\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\r\n    let /** @type {?} */ styles: { [key: string]: string } = {\r\n      'backgroundSize': backgroundSize,\r\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\r\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\r\n    };\r\n\r\n    if (this._isMinValue && this._thumbGap) {\r\n      let /** @type {?} */ side = this.vertical ?\r\n          (this._invertAxis ? 'Bottom' : 'Top') :\r\n          (this._invertAxis ? 'Right' : 'Left');\r\n      styles[`padding${side}`] = `${this._thumbGap}px`;\r\n    }\r\n\r\n    return styles;\r\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\r\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\r\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\r\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\r\n    let /** @type {?} */ invertOffset =\r\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\r\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\r\n    return {\r\n      'transform': `translate${axis}(-${offset}%)`\r\n    };\r\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect | null = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * Subscription to the Directionality change EventEmitter.\n */\nprivate _dirChangeSubscription = Subscription.EMPTY;\n/**\n * The value of the slider when the slide start event fires.\n */\nprivate _valueOnSlideStart: number | null;\n/**\n * Reference to the inner slider wrapper element.\n */\nprivate _sliderWrapper: ElementRef;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\rfrom the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\r\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\r\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\r\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\r\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\r\n              elementRef: ElementRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\r\n    super(renderer, elementRef);\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    this._focusMonitor\r\n        .monitor(this._elementRef.nativeElement, this._renderer, true)\r\n        .subscribe((origin: FocusOrigin) => {\r\n          this._isActive = !!origin && origin !== 'keyboard';\r\n          this._changeDetectorRef.detectChanges();\r\n        });\r\n    if (this._dir) {\r\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n    this._dirChangeSubscription.unsubscribe();\r\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\r\n    // ticks and determine where on the slider click and slide events happen.\r\n    this._sliderDimensions = this._getSliderDimensions();\r\n    this._updateTickIntervalPercent();\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    let /** @type {?} */ oldValue = this.value;\r\n    this._isSliding = false;\r\n    this._focusHostElement();\r\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\r\n\r\n    /* Emit a change and input event if the value changed. */\r\n    if (oldValue != this.value) {\r\n      this._emitInputEvent();\r\n      this._emitChangeEvent();\r\n    }\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\r\n    // state, call the slide start handler manually.\r\n    if (!this._isSliding) {\r\n      this._onSlideStart(null);\r\n    }\r\n\r\n    // Prevent the slide from selecting anything else.\r\n    event.preventDefault();\r\n\r\n    let /** @type {?} */ oldValue = this.value;\r\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\r\n\r\n    // Native range elements always emit `input` events when the value changed while sliding.\r\n    if (oldValue != this.value) {\r\n      this._emitInputEvent();\r\n    }\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput | null) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // Simulate mouseenter in case this is a mobile device.\r\n    this._onMouseenter();\r\n\r\n    this._isSliding = true;\r\n    this._focusHostElement();\r\n    this._valueOnSlideStart = this.value;\r\n\r\n    if (event) {\r\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\r\n      event.preventDefault();\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\r\n    this._isSliding = false;\r\n\r\n    if (this._valueOnSlideStart != this.value) {\r\n      this._emitChangeEvent();\r\n    }\r\n    this._valueOnSlideStart = null;\r\n  }\n/**\n * @return {?}\n */\n_onFocus() {\r\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\r\n    // ticks and determine where on the slider click and slide events happen.\r\n    this._sliderDimensions = this._getSliderDimensions();\r\n    this._updateTickIntervalPercent();\r\n  }\n/**\n * @return {?}\n */\n_onBlur() {\r\n    this.onTouched();\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\r\n    if (this.disabled) { return; }\r\n\r\n    let /** @type {?} */ oldValue = this.value;\r\n\r\n    switch (event.keyCode) {\r\n      case PAGE_UP:\r\n        this._increment(10);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._increment(-10);\r\n        break;\r\n      case END:\r\n        this.value = this.max;\r\n        break;\r\n      case HOME:\r\n        this.value = this.min;\r\n        break;\r\n      case LEFT_ARROW:\r\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\r\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\r\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\r\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\r\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\r\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\r\n        // sighted users, therefore we do not swap the meaning.\r\n        this._increment(this._direction == 'rtl' ? 1 : -1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._increment(1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\r\n        this._increment(this._direction == 'rtl' ? -1 : 1);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._increment(-1);\r\n        break;\r\n      default:\r\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\r\n        // it.\r\n        return;\r\n    }\r\n\r\n    if (oldValue != this.value) {\r\n      this._emitInputEvent();\r\n      this._emitChangeEvent();\r\n    }\r\n\r\n    this._isSliding = true;\r\n    event.preventDefault();\r\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\r\n    this._isSliding = false;\r\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\r\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\r\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\r\n    if (!this._sliderDimensions) {\r\n      return;\r\n    }\r\n\r\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\r\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\r\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\r\n\r\n    // The exact value is calculated from the event and used to find the closest snap value.\r\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\r\n    if (this._invertMouseCoords) {\r\n      percent = 1 - percent;\r\n    }\r\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\r\n\r\n    // This calculation finds the closest step by finding the closest whole number divisible by the\r\n    // step relative to the min.\r\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\r\n    // The value needs to snap to the min and max.\r\n    this.value = this._clamp(closestValue, this.min, this.max);\r\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitChangeEvent() {\r\n    this._controlValueAccessorChangeFn(this.value);\r\n    this.change.emit(this._createChangeEvent());\r\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\r\n    this.input.emit(this._createChangeEvent());\r\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\r\n    if (!this.tickInterval || !this._sliderDimensions) {\r\n      return;\r\n    }\r\n\r\n    if (this.tickInterval == 'auto') {\r\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\r\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\r\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\r\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\r\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\r\n    } else {\r\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\r\n    }\r\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\r\n    let /** @type {?} */ event = new MdSliderChange();\r\n\r\n    event.source = this;\r\n    event.value = value;\r\n\r\n    return event;\r\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number | null) {\r\n    return ((value || 0) - this.min) / (this.max - this.min);\r\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\r\n    return this.min + percentage * (this.max - this.min);\r\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\r\n    return Math.max(min, Math.min(value, max));\r\n  }\n/**\n * Get the bounding client rect of the slider track element.\rThe track is used rather than the native element to ignore the extra space that the thumb can\rtake up.\n * @return {?}\n */\nprivate _getSliderDimensions() {\r\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\r\n  }\n/**\n * Focuses the native element.\rCurrently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\nprivate _focusHostElement() {\r\n    this._elementRef.nativeElement.focus();\r\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\r\\@param value\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\r\n    this.value = value;\r\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\rImplemented as part of ControlValueAccessor.\r\\@param fn Callback to be registered.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\rImplemented as part of ControlValueAccessor.\r\\@param fn Callback to be registered.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\n/**\n * Sets whether the component should be disabled.\rImplemented as part of ControlValueAccessor.\r\\@param isDisabled\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-slider, mat-slider',\r\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\r\n  host: {\r\n    '(focus)': '_onFocus()',\r\n    '(blur)': '_onBlur()',\r\n    '(click)': '_onClick($event)',\r\n    '(keydown)': '_onKeydown($event)',\r\n    '(keyup)': '_onKeyup()',\r\n    '(mouseenter)': '_onMouseenter()',\r\n    '(slide)': '_onSlide($event)',\r\n    '(slideend)': '_onSlideEnd()',\r\n    '(slidestart)': '_onSlideStart($event)',\r\n    'class': 'mat-slider',\r\n    'role': 'slider',\r\n    'tabindex': '0',\r\n    '[attr.aria-disabled]': 'disabled',\r\n    '[attr.aria-valuemax]': 'max',\r\n    '[attr.aria-valuemin]': 'min',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\r\n    '[class.mat-slider-disabled]': 'disabled',\r\n    '[class.mat-slider-has-ticks]': 'tickInterval',\r\n    '[class.mat-slider-horizontal]': '!vertical',\r\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\r\n    '[class.mat-slider-sliding]': '_isSliding',\r\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\r\n    '[class.mat-slider-vertical]': 'vertical',\r\n    '[class.mat-slider-min-value]': '_isMinValue',\r\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\r\n  },\r\n  templateUrl: 'slider.html',\r\n  styleUrls: ['slider.css'],\r\n  inputs: ['disabled', 'color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n'_sliderWrapper': [{ type: ViewChild, args: ['sliderWrapper', ] },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\rUsed to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\rUsed to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/**\n * Subscription to the Directionality change EventEmitter.\n * @type {?}\n */\nMdSlider.prototype._dirChangeSubscription;\n/**\n * The value of the slider when the slide start event fires.\n * @type {?}\n */\nMdSlider.prototype._valueOnSlideStart;\n/**\n * Reference to the inner slider wrapper element.\n * @type {?}\n */\nMdSlider.prototype._sliderWrapper;\n/** @type {?} */\nMdSlider.prototype._focusMonitor;\n/** @type {?} */\nMdSlider.prototype._changeDetectorRef;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {GestureConfig, MdCommonModule} from '@angular/material/core';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {MdSlider} from './slider';\nexport class MdSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CommonModule, MdCommonModule, BidiModule, A11yModule],\r\n  exports: [MdSlider, MdCommonModule],\r\n  declarations: [MdSlider],\r\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {MATERIAL_COMPATIBILITY_MODE} from '@angular/material/core';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MdPaginatorIntl} from './paginator-intl';\n/**\n * The default page size if there is no page size and there are no provided page size options.\n */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\rdifferent page size or navigates to another page.\n */\nexport class PageEvent {\n/**\n * The current page index.\n */\npageIndex: number;\n/**\n * The current page size\n */\npageSize: number;\n/**\n * The current total number of items being paged\n */\nlength: number;\r\n}\n\nfunction PageEvent_tsickle_Closure_declarations() {\n/**\n * The current page index.\n * @type {?}\n */\nPageEvent.prototype.pageIndex;\n/**\n * The current page size\n * @type {?}\n */\nPageEvent.prototype.pageSize;\n/**\n * The current total number of items being paged\n * @type {?}\n */\nPageEvent.prototype.length;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\rpage, user-selectable options to change that size, what items are being shown, and\rnavigational button to go to the previous or next page.\n */\nexport class MdPaginator implements OnInit, OnDestroy {\nprivate _initialized: boolean;\nprivate _intlChanges: Subscription;\n/**\n * The zero-based page index of the displayed list of items. Defaulted to 0.\n * @return {?}\n */\nget pageIndex(): number { return this._pageIndex; }\n/**\n * @param {?} pageIndex\n * @return {?}\n */\nset pageIndex(pageIndex: number) {\r\n    this._pageIndex = pageIndex;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  _pageIndex: number = 0;\n/**\n * The length of the total number of items that are being paginated. Defaulted to 0.\n * @return {?}\n */\nget length(): number { return this._length; }\n/**\n * @param {?} length\n * @return {?}\n */\nset length(length: number) {\r\n    this._length = length;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  _length: number = 0;\n/**\n * Number of items to display on a page. By default set to 50.\n * @return {?}\n */\nget pageSize(): number { return this._pageSize; }\n/**\n * @param {?} pageSize\n * @return {?}\n */\nset pageSize(pageSize: number) {\r\n    this._pageSize = pageSize;\r\n    this._updateDisplayedPageSizeOptions();\r\n  }\nprivate _pageSize: number;\n/**\n * The set of provided page size options to display to the user.\n * @return {?}\n */\nget pageSizeOptions(): number[] { return this._pageSizeOptions; }\n/**\n * @param {?} pageSizeOptions\n * @return {?}\n */\nset pageSizeOptions(pageSizeOptions: number[]) {\r\n    this._pageSizeOptions = pageSizeOptions;\r\n    this._updateDisplayedPageSizeOptions();\r\n  }\nprivate _pageSizeOptions: number[] = [];\n/**\n * Event emitted when the paginator changes the page size or page index.\n */\npage = new EventEmitter<PageEvent>();\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n */\n_displayedPageSizeOptions: number[];\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n */\nconstructor(public _intl: MdPaginatorIntl,\nprivate _changeDetectorRef: ChangeDetectorRef) {\r\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    this._initialized = true;\r\n    this._updateDisplayedPageSizeOptions();\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n  }\n/**\n * Advances to the next page if it exists.\n * @return {?}\n */\nnextPage() {\r\n    if (!this.hasNextPage()) { return; }\r\n    this.pageIndex++;\r\n    this._emitPageEvent();\r\n  }\n/**\n * Move back to the previous page if it exists.\n * @return {?}\n */\npreviousPage() {\r\n    if (!this.hasPreviousPage()) { return; }\r\n    this.pageIndex--;\r\n    this._emitPageEvent();\r\n  }\n/**\n * Whether there is a previous page.\n * @return {?}\n */\nhasPreviousPage() {\r\n    return this.pageIndex >= 1 && this.pageSize != 0;\r\n  }\n/**\n * Whether there is a next page.\n * @return {?}\n */\nhasNextPage() {\r\n    const /** @type {?} */ numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\r\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\r\n  }\n/**\n * Changes the page size so that the first item displayed on the page will still be\rdisplayed using the new page size.\r\rFor example, if the page size is 10 and on the second page (items indexed 10-19) then\rswitching so that the page size is 5 will set the third page as the current page so\rthat the 10th item will still be displayed.\n * @param {?} pageSize\n * @return {?}\n */\n_changePageSize(pageSize: number) {\r\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\r\n    // containing the previous page's first item.\r\n    const /** @type {?} */ startIndex = this.pageIndex * this.pageSize;\r\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\r\n\r\n    this.pageSize = pageSize;\r\n    this._emitPageEvent();\r\n  }\n/**\n * Updates the list of page size options to display to the user. Includes making sure that\rthe page size is an option and that the list is sorted.\n * @return {?}\n */\nprivate _updateDisplayedPageSizeOptions() {\r\n    if (!this._initialized) { return; }\r\n\r\n    // If no page size is provided, use the first page size option or the default page size.\r\n    if (!this.pageSize) {\r\n      this._pageSize = this.pageSizeOptions.length != 0 ?\r\n          this.pageSizeOptions[0] :\r\n          DEFAULT_PAGE_SIZE;\r\n    }\r\n\r\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\r\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\r\n      this._displayedPageSizeOptions.push(this.pageSize);\r\n    }\r\n\r\n    // Sort the numbers using a number-specific sort function.\r\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Emits an event notifying that a change of the paginator's properties has been triggered.\n * @return {?}\n */\nprivate _emitPageEvent() {\r\n    this.page.next({\r\n      pageIndex: this.pageIndex,\r\n      pageSize: this.pageSize,\r\n      length: this.length\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-paginator, mat-paginator',\r\n  templateUrl: 'paginator.html',\r\n  styleUrls: ['paginator.css'],\r\n  host: {\r\n    'class': 'mat-paginator',\r\n  },\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdPaginatorIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pageIndex': [{ type: Input },],\n'length': [{ type: Input },],\n'pageSize': [{ type: Input },],\n'pageSizeOptions': [{ type: Input },],\n'page': [{ type: Output },],\n};\n}\n\nfunction MdPaginator_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginator.ctorParameters;\n/** @type {?} */\nMdPaginator.propDecorators;\n/** @type {?} */\nMdPaginator.prototype._initialized;\n/** @type {?} */\nMdPaginator.prototype._intlChanges;\n/** @type {?} */\nMdPaginator.prototype._pageIndex;\n/** @type {?} */\nMdPaginator.prototype._length;\n/** @type {?} */\nMdPaginator.prototype._pageSize;\n/** @type {?} */\nMdPaginator.prototype._pageSizeOptions;\n/**\n * Event emitted when the paginator changes the page size or page index.\n * @type {?}\n */\nMdPaginator.prototype.page;\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n * @type {?}\n */\nMdPaginator.prototype._displayedPageSizeOptions;\n/** @type {?} */\nMdPaginator.prototype._intl;\n/** @type {?} */\nMdPaginator.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MdButtonModule} from '@angular/material/button';\r\nimport {MdSelectModule} from '@angular/material/select';\r\nimport {MdTooltipModule} from '@angular/material/tooltip';\r\nimport {MdPaginator} from './paginator';\r\nimport {MdPaginatorIntl} from './paginator-intl';\nexport class MdPaginatorModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    CommonModule,\r\n    MdButtonModule,\r\n    MdSelectModule,\r\n    MdTooltipModule,\r\n  ],\r\n  exports: [MdPaginator],\r\n  declarations: [MdPaginator],\r\n  providers: [MdPaginatorIntl],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdPaginatorModule,PageEvent,MdPaginator,MdPaginatorIntl,MatPaginator,MatPaginatorIntl,MatPaginatorModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n/**\n * <md-progress-bar> component.\n */\nexport class MdProgressBar {\n/**\n * Color of the progress bar.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\nprivate _value: number = 0;\n/**\n * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) { this._value = clamp(v || 0); }\nprivate _bufferValue: number = 0;\n/**\n * Buffer value of the progress bar. Defaults to zero.\n * @return {?}\n */\nget bufferValue() { return this._bufferValue; }\n/**\n * @param {?} v\n * @return {?}\n */\nset bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n/**\n * Mode of the progress bar.\r\rInput must be one of these values: determinate, indeterminate, buffer, query, defaults to\r'determinate'.\rMirrored to mode attribute.\n */\nmode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n/**\n * Gets the current transform value for the progress bar's primary indicator.\n * @return {?}\n */\n_primaryTransform() {\r\n    let /** @type {?} */ scale = this.value / 100;\r\n    return {transform: `scaleX(${scale})`};\r\n  }\n/**\n * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\rprogress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n * @return {?}\n */\n_bufferTransform() {\r\n    if (this.mode == 'buffer') {\r\n      let /** @type {?} */ scale = this.bufferValue / 100;\r\n      return {transform: `scaleX(${scale})`};\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-progress-bar, mat-progress-bar',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'aria-valuemin': '0',\r\n    'aria-valuemax': '100',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.mode]': 'mode',\r\n    '[class.mat-primary]': 'color == \"primary\"',\r\n    '[class.mat-accent]': 'color == \"accent\"',\r\n    '[class.mat-warn]': 'color == \"warn\"',\r\n    'class': 'mat-progress-bar',\r\n  },\r\n  templateUrl: 'progress-bar.html',\r\n  styleUrls: ['progress-bar.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MdProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBar.ctorParameters;\n/** @type {?} */\nMdProgressBar.propDecorators;\n/**\n * Color of the progress bar.\n * @type {?}\n */\nMdProgressBar.prototype.color;\n/** @type {?} */\nMdProgressBar.prototype._value;\n/** @type {?} */\nMdProgressBar.prototype._bufferValue;\n/**\n * Mode of the progress bar.\r\rInput must be one of these values: determinate, indeterminate, buffer, query, defaults to\r'determinate'.\rMirrored to mode attribute.\n * @type {?}\n */\nMdProgressBar.prototype.mode;\n}\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v: number, min = 0, max = 100) {\r\n  return Math.max(min, Math.min(max, v));\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MdProgressBar} from './progress-bar';\nexport class MdProgressBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CommonModule, MdCommonModule],\r\n  exports: [MdProgressBar, MdCommonModule],\r\n  declarations: [MdProgressBar],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBarModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdProgressBarModule,MdProgressBar,MatProgressBar,MatProgressBarModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  OnDestroy,\r\n  Input,\r\n  ElementRef,\r\n  NgZone,\r\n  Renderer2,\r\n  Directive,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nconst MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport const PROGRESS_SPINNER_STROKE_WIDTH = 10;\r\n\r\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\r\n\r\ntype EasingFn = (currentTime: number, startValue: number,\r\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-progress-spinner, mat-progress-spinner',\r\n  host: {'class': 'mat-progress-spinner'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdProgressSpinnerBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdProgressSpinnerBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerBase.prototype._renderer;\n/** @type {?} */\nMdProgressSpinnerBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdProgressSpinnerMixinBase = mixinColor(MdProgressSpinnerBase, 'primary');\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner extends _MdProgressSpinnerMixinBase\r\n    implements OnDestroy, CanColor {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number | null;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n */\nstrokeWidth: number = PROGRESS_SPINNER_STROKE_WIDTH;\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\rbecause voiceover does not report the progress indicator as indeterminate if the aria min\rand/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\r\n    return this.mode == 'determinate' ? 0 : null;\r\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\r\n    return this.mode == 'determinate' ? 100 : null;\r\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\r\n    return this._interdeterminateInterval;\r\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number | null) {\r\n    if (this._interdeterminateInterval) {\r\n      clearInterval(this._interdeterminateInterval);\r\n    }\r\n\r\n    this._interdeterminateInterval = interval;\r\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\r\n    this._cleanupIndeterminateAnimation();\r\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\r\n    if (this.mode == 'determinate') {\r\n      return this._value;\r\n    }\r\n\r\n    return 0;\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\r\n    if (v != null && this.mode == 'determinate') {\r\n      let /** @type {?} */ newValue = clamp(v);\r\n      this._animateCircle(this.value || 0, newValue);\r\n      this._value = newValue;\r\n    }\r\n  }\n/**\n * Mode of the progress circle\r\rInput must be one of the values from ProgressMode, defaults to 'determinate'.\rmode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() { return this._mode; }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\r\n    if (mode !== this._mode) {\r\n      if (mode === 'indeterminate') {\r\n        this._startIndeterminateAnimation();\r\n      } else {\r\n        this._cleanupIndeterminateAnimation();\r\n        this._animateCircle(0, this._value);\r\n      }\r\n      this._mode = mode;\r\n    }\r\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _ngZone\n */\nconstructor(renderer: Renderer2,\r\n              elementRef: ElementRef,\nprivate _ngZone: NgZone) {\r\n    super(renderer, elementRef);\r\n  }\n/**\n * Animates the circle from one percentage value to another.\r\r\\@param animateFrom The percentage of the circle filled starting the animation.\r\\@param animateTo The percentage of the circle filled ending the animation.\r\\@param ease The easing function to manage the pace of change in the animation.\r\\@param duration The length of time to show the animation, in milliseconds.\r\\@param rotation The starting angle of the circle fill, with 0° represented at the top center\r   of the circle.\n * @param {?} animateFrom\n * @param {?} animateTo\n * @param {?=} ease\n * @param {?=} duration\n * @param {?=} rotation\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\r\n                        duration = DURATION_DETERMINATE, rotation = 0) {\r\n\r\n    let /** @type {?} */ id = ++this._lastAnimationId;\r\n    let /** @type {?} */ startTime = Date.now();\r\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\r\n\r\n    // No need to animate it if the values are the same\r\n    if (animateTo === animateFrom) {\r\n      this._renderArc(animateTo, rotation);\r\n    } else {\r\n      let /** @type {?} */ animation = () => {\r\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\r\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\r\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\r\n            duration;\r\n\r\n        this._renderArc(\r\n          ease(elapsedTime, animateFrom, changeInValue, duration),\r\n          rotation\r\n        );\r\n\r\n        // Prevent overlapping animations by checking if a new animation has been called for and\r\n        // if the animation has lasted longer than the animation duration.\r\n        if (id === this._lastAnimationId && elapsedTime < duration) {\r\n          requestAnimationFrame(animation);\r\n        }\r\n      };\r\n\r\n      // Run the animation outside of Angular's zone, in order to avoid\r\n      // hitting ZoneJS and change detection on each frame.\r\n      this._ngZone.runOutsideAngular(animation);\r\n    }\r\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\r\n    let /** @type {?} */ rotationStartPoint = 0;\r\n    let /** @type {?} */ start = startIndeterminate;\r\n    let /** @type {?} */ end = endIndeterminate;\r\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\r\n    let /** @type {?} */ animate = () => {\r\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\r\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\r\n      rotationStartPoint = (rotationStartPoint + end) % 100;\r\n      let /** @type {?} */ temp = start;\r\n      start = -end;\r\n      end = -temp;\r\n    };\r\n\r\n    if (!this.interdeterminateInterval) {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\r\n        animate();\r\n      });\r\n    }\r\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\r\n    this.interdeterminateInterval = null;\r\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\rDOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\r\n    if (this._path) {\r\n      const /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\r\n      this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-progress-spinner, mat-progress-spinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'class': 'mat-progress-spinner',\r\n    '[attr.aria-valuemin]': '_ariaValueMin',\r\n    '[attr.aria-valuemax]': '_ariaValueMax',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.mode]': 'mode',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-spinner.html',\r\n  styleUrls: ['progress-spinner.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'strokeWidth': [{ type: Input },],\n'value': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n * @type {?}\n */\nMdProgressSpinner.prototype.strokeWidth;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n}\n\n/**\n * <md-spinner> component.\r\rThis is a component definition to be used as a convenience reference to create an\rindeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\r\n    super(renderer, elementRef, ngZone);\r\n    this.mode = 'indeterminate';\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-spinner, mat-spinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'mode': 'indeterminate',\r\n    'class': 'mat-spinner mat-progress-spinner',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-spinner.html',\r\n  styleUrls: ['progress-spinner.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\r\n  return Math.max(0, Math.min(100, v));\r\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\r\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\r\n\r\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\r\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\r\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\r\n                    changeInValue: number, duration: number) {\r\n  return changeInValue * currentTime / duration + startValue;\r\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\r\n                      changeInValue: number, duration: number) {\r\n  let /** @type {?} */ time = currentTime / duration;\r\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\r\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\r\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\r\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\r\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\rcoordinates on the circle, and then to cartesian coordinates in the viewport.\r\r\\@param currentValue The current percentage value of the progress circle, the percentage of the\r   circle to fill.\r\\@param rotation The starting point of the circle with 0 being the 0 degree point.\r\\@param strokeWidth Stroke width of the progress spinner arc.\r\\@return A string for an SVG path representing a circle filled from the starting point to the\r   percentage value provided.\n * @param {?} currentValue\n * @param {?} rotation\n * @param {?} strokeWidth\n * @return {?}\n */\nfunction getSvgArc(currentValue: number, rotation: number, strokeWidth: number): string {\r\n  let /** @type {?} */ startPoint = rotation || 0;\r\n  let /** @type {?} */ radius = 50;\r\n  let /** @type {?} */ pathRadius = radius - strokeWidth;\r\n\r\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\r\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\r\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\r\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\r\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\r\n  let /** @type {?} */ largeArcFlag: number;\r\n\r\n  if (endAngle < 0) {\r\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\r\n  } else {\r\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\r\n  }\r\n\r\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n  forwardRef,\r\n  ViewChild,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n} from '@angular/core';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\nimport {\r\n  RippleRef,\r\n  UniqueSelectionDispatcher,\r\n  MdRipple, MATERIAL_COMPATIBILITY_MODE,\r\n} from '@angular/material/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {mixinDisabled, CanDisable} from '@angular/material/core';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\r\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\n\r\n// Increasing integer for generating unique ids for radio components.\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\rallows it to support [(ngModel)] and ngControl.\r\\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdRadioGroup),\r\n  multi: true\r\n};\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton | null;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\r\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioGroupBase { }\r\nexport const /** @type {?} */ _MdRadioGroupMixinBase = mixinDisabled(MdRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup extends _MdRadioGroupMixinBase\r\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\ra corresponding radio button with a matching value. If there is *not* such a corresponding\rradio button, this value persists to be applied in case a new radio button is added with a\rmatching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${nextUniqueId++}`;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton | null = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nprivate _labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio group is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Whether the radio group is required.\n */\nprivate _required: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\r\\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\rChange events are only emitted when the value changes due to user interaction with\ra radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton>;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\r\n    this._name = value;\r\n    this._updateRadioButtonNames();\r\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\r\\@deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\r\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\r\n    // label relative to the checkbox. As such, they are inverted.\r\n    return this.labelPosition == 'after' ? 'start' : 'end';\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\r\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\r\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @return {?}\n */\nget labelPosition() {\r\n    return this._labelPosition;\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset labelPosition(v) {\r\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\r\n    this._markRadiosForCheck();\r\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\r\n    if (this._value != newValue) {\r\n      // Set this before proceeding to ensure no circular loop occurs with selection.\r\n      this._value = newValue;\r\n\r\n      this._updateSelectedRadioFromValue();\r\n      this._checkSelectedRadioButton();\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\r\n    if (this._selected && !this._selected.checked) {\r\n      this._selected.checked = true;\r\n    }\r\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton | null) {\r\n    this._selected = selected;\r\n    this.value = selected ? selected.value : null;\r\n    this._checkSelectedRadioButton();\r\n  }\n/**\n * Whether the radio group is disabled\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._markRadiosForCheck();\r\n  }\n/**\n * Whether the radio group is required\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this._markRadiosForCheck();\r\n  }\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\r\n    super();\r\n  }\n/**\n * Initialize properties once content children are available.\rThis allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\r\n    // Mark this component as initialized in AfterContentInit because the initial value can\r\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\r\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\r\n    this._isInitialized = true;\r\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\rradio buttons upon their blur.\n * @return {?}\n */\n_touch() {\r\n    if (this.onTouched) {\r\n      this.onTouched();\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\r\n    if (this._radios) {\r\n      this._radios.forEach(radio => {\r\n        radio.name = this.name;\r\n      });\r\n    }\r\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\r\n    // If the value already matches the selected radio, do nothing.\r\n    const /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\r\n\r\n    if (this._radios != null && !isAlreadySelected) {\r\n      this._selected = null;\r\n      this._radios.forEach(radio => {\r\n        radio.checked = this.value == radio.value;\r\n        if (radio.checked) {\r\n          this._selected = radio;\r\n        }\r\n      });\r\n    }\r\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\r\n    if (this._isInitialized) {\r\n      const /** @type {?} */ event = new MdRadioChange();\r\n      event.source = this._selected;\r\n      event.value = this._value;\r\n      this.change.emit(event);\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_markRadiosForCheck() {\r\n    if (this._radios) {\r\n      this._radios.forEach(radio => radio._markForCheck());\r\n    }\r\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\r\\@param value\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\r\n    this.value = value;\r\n    this._changeDetector.markForCheck();\r\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\rImplemented as part of ControlValueAccessor.\r\\@param fn Callback to be registered.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\rImplemented as part of ControlValueAccessor.\r\\@param fn Callback to be registered.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\r\\@param isDisabled Whether the control should be disabled.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n    this._changeDetector.markForCheck();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-radio-group, mat-radio-group',\r\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\r\n  host: {\r\n    'role': 'radiogroup',\r\n    'class': 'mat-radio-group',\r\n  },\r\n  inputs: ['disabled'],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\ra corresponding radio button with a matching value. If there is *not* such a corresponding\rradio button, this value persists to be applied in case a new radio button is added with a\rmatching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype._labelPosition;\n/**\n * Whether the radio group is disabled.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * Whether the radio group is required.\n * @type {?}\n */\nMdRadioGroup.prototype._required;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\r\\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\rChange events are only emitted when the value changes due to user interaction with\ra radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/** @type {?} */\nMdRadioGroup.prototype._changeDetector;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdRadioButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButtonBase.prototype._renderer;\n/** @type {?} */\nMdRadioButtonBase.prototype._elementRef;\n}\n\r\n// As per Material design specifications the selection control radio should use the accent color\r\n// palette by default. https://material.io/guidelines/components/selection-controls.html\r\nexport const /** @type {?} */ _MdRadioButtonMixinBase = mixinColor(mixinDisableRipple(MdRadioButtonBase), 'accent');\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton extends _MdRadioButtonMixinBase\r\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\nprivate _uniqueId: string = `md-radio-${++nextUniqueId}`;\n/**\n * The unique ID for the radio button.\n */\nid: string = this._uniqueId;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\r\n    return this._checked;\r\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\r\n    if (this._checked != newCheckedState) {\r\n      this._checked = newCheckedState;\r\n\r\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\r\n        this.radioGroup.selected = this;\r\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\r\n        // When unchecking the selected radio button, update the selected radio\r\n        // property on the group.\r\n        this.radioGroup.selected = null;\r\n      }\r\n\r\n      if (newCheckedState) {\r\n        // Notify all radio buttons with the same name to un-check.\r\n        this._radioDispatcher.notify(this.id, this.name);\r\n      }\r\n      this._changeDetector.markForCheck();\r\n    }\r\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\r\n    return this._value;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\r\n    if (this._value != value) {\r\n      this._value = value;\r\n      if (this.radioGroup != null) {\r\n        if (!this.checked) {\r\n          // Update checked when the value changed to match the radio group's value\r\n          this.checked = this.radioGroup.value == value;\r\n        }\r\n        if (this.checked) {\r\n          this.radioGroup.selected = this;\r\n        }\r\n      }\r\n    }\r\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\r\\@deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\r\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\r\n    // label relative to the checkbox. As such, they are inverted.\r\n    return this.labelPosition == 'after' ? 'start' : 'end';\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\r\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\r\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\r\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\r\n    this._labelPosition = value;\r\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\r\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\n/**\n * Whether the radio button is required.\n * @return {?}\n */\nget required(): boolean {\r\n    return this._required || (this.radioGroup && this.radioGroup.required);\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\rChange events are only emitted when the value changes due to user interaction with\rthe radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Whether this radio is required.\n */\nprivate _required: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Unregister function for _radioDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _changeDetector\n * @param {?} _focusMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\r\n              elementRef: ElementRef,\r\n              renderer: Renderer2,\nprivate _changeDetector: ChangeDetectorRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\r\n    super(renderer, elementRef);\r\n\r\n    // Assertions. Ideally these should be stripped out by the compiler.\r\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\r\n    this.radioGroup = radioGroup;\r\n\r\n    this._removeUniqueSelectionListener =\r\n      _radioDispatcher.listen((id: string, name: string) => {\r\n        if (id != this.id && name == this.name) {\r\n          this.checked = false;\r\n        }\r\n      });\r\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\r\n  }\n/**\n * Marks the radio button as needing checking for change detection.\rThis method is exposed because the parent radio group will directly\rupdate bound properties of the radio button.\n * @return {?}\n */\n_markForCheck() {\r\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\r\n    // update radio button's status\r\n    this._changeDetector.markForCheck();\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    if (this.radioGroup) {\r\n      // If the radio is inside a radio group, determine if it should be checked\r\n      this.checked = this.radioGroup.value === this._value;\r\n      // Copy name from parent radio group\r\n      this.name = this.radioGroup.name;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\r\n    this._focusMonitor\r\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\r\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\r\n    this._removeUniqueSelectionListener();\r\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\r\n    const /** @type {?} */ event = new MdRadioChange();\r\n    event.source = this;\r\n    event.value = this._value;\r\n    this.change.emit(event);\r\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `radio-button` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\rClicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the `change` output.\r\n    event.stopPropagation();\r\n\r\n    const /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\r\n    this.checked = true;\r\n    this._emitChangeEvent();\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\r\n      this.radioGroup._touch();\r\n      if (groupValueChanged) {\r\n        this.radioGroup._emitChangeEvent();\r\n      }\r\n    }\r\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\r\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\r\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\r\n    } else if (!focusOrigin) {\r\n      if (this.radioGroup) {\r\n        this.radioGroup._touch();\r\n      }\r\n\r\n      if (this._focusRipple) {\r\n        this._focusRipple.fadeOut();\r\n        this._focusRipple = null;\r\n      }\r\n    }\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-radio-button, mat-radio-button',\r\n  templateUrl: 'radio.html',\r\n  styleUrls: ['radio.css'],\r\n  inputs: ['color', 'disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  host: {\r\n    'class': 'mat-radio-button',\r\n    '[class.mat-radio-checked]': 'checked',\r\n    '[class.mat-radio-disabled]': 'disabled',\r\n    '[attr.id]': 'id',\r\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\r\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\r\n    // the focus to the native element.\r\n    '(focus)': '_inputElement.nativeElement.focus()',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: FocusMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/** @type {?} */\nMdRadioButton.prototype._uniqueId;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\rChange events are only emitted when the value changes due to user interaction with\rthe radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Whether this radio is required.\n * @type {?}\n */\nMdRadioButton.prototype._required;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * Unregister function for _radioDispatcher *\n * @type {?}\n */\nMdRadioButton.prototype._removeUniqueSelectionListener;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._changeDetector;\n/** @type {?} */\nMdRadioButton.prototype._focusMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {VIEWPORT_RULER_PROVIDER} from '@angular/cdk/overlay';\r\nimport {\r\n  MdRippleModule,\r\n  MdCommonModule,\r\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\r\n} from '@angular/material/core';\r\nimport {MdRadioGroup, MdRadioButton} from './radio';\r\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdRadioModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CommonModule, MdRippleModule, MdCommonModule, A11yModule],\r\n  exports: [MdRadioGroup, MdRadioButton, MdCommonModule],\r\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER],\r\n  declarations: [MdRadioGroup, MdRadioButton],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton,MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MatRadioButton,MatRadioButtonBase,MatRadioChange,MatRadioGroup,MatRadioGroupBase,MatRadioModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  ConnectedOverlayDirective,\r\n  Overlay,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n  ViewportRuler,\r\n} from '@angular/cdk/overlay';\r\nimport {filter, first, startWith} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  isDevMode,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Renderer2,\r\n  Self,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {\r\n  CanDisable,\r\n  HasTabIndex,\r\n  MdOptgroup,\r\n  MdOption,\r\n  MdOptionSelectionChange,\r\n  mixinDisabled,\r\n  mixinTabIndex,\r\n} from '@angular/material/core';\r\nimport {MdFormFieldControl} from '@angular/material/form-field';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {fadeInContent, transformPanel} from './select-animations';\r\nimport {\r\n  getMdSelectDynamicMultipleError,\r\n  getMdSelectNonArrayValueError,\r\n  getMdSelectNonFunctionValueError,\r\n} from './select-errors';\r\n\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n/**\n * Distance between the panel edge and the option text in\rmulti-selection mode.\r\r(SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\rThe padding is multiplied by 1.5 because the checkbox's margin is half the padding.\rThe checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\rthis value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n */\nexport const MD_SELECT_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('md-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\n/**\n * \\@docs-private\n */\nexport const MD_SELECT_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MD_SELECT_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\r\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectBase.prototype._renderer;\n/** @type {?} */\nMdSelectBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdSelectMixinBase = mixinTabIndex(mixinDisabled(MdSelectBase));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nexport class MdSelectTrigger {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-select-trigger, mat-select-trigger'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectTrigger.ctorParameters;\n}\n\nexport class MdSelect extends _MdSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\r\n    ControlValueAccessor, CanDisable, HasTabIndex, MdFormFieldControl<any> {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription = Subscription.EMPTY;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription = Subscription.EMPTY;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * Unique id for this input.\n */\nprivate _uid = `mat-select-${nextUniqueId++}`;\n/**\n * The last measured value for the trigger's client bounding rect.\n */\n_triggerRect: ClientRect;\n/**\n * The aria-describedby attribute on the select for improved a11y.\n */\n_ariaDescribedby: string;\n/**\n * The cached font-size of the trigger element.\n */\n_triggerFontSize = 0;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager<MdOption>;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n */\n_scrollStrategy = this._scrollStrategyFactory();\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\rThis must be adjusted to align the selected option text over the trigger text.\rwhen the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\ris aligned with with the top \"start\" of the origin by default (overlapping\rthe trigger completely). If the panel cannot fit below the trigger, it\rwill fall back to a position above the trigger.\n */\n_positions = [\r\n    {\r\n      originX: 'start',\r\n      originY: 'top',\r\n      overlayX: 'start',\r\n      overlayY: 'top',\r\n    },\r\n    {\r\n      originX: 'start',\r\n      originY: 'bottom',\r\n      overlayX: 'start',\r\n      overlayY: 'bottom',\r\n    },\r\n  ];\n/**\n * Stream that emits whenever the state of the select changes such that the wrapping `MdFormField`\rneeds to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * Whether the select is focused.\n */\nfocused = false;\n/**\n * A name for this control that can be used by `md-form-field`.\n */\ncontrolType = 'mat-select';\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * User-supplied override of the trigger element.\n */\ncustomTrigger: MdSelectTrigger;\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\r\n    this._placeholder = value;\r\n    this.stateChanges.next();\r\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\r\n    if (this._selectionModel) {\r\n      throw getMdSelectDynamicMultipleError();\r\n    }\r\n\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\ris a value from an option. The second is a value from the selection. A boolean\rshould be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    if (typeof fn !== 'function') {\r\n      throw getMdSelectNonFunctionValueError();\r\n    }\r\n    this._compareWith = fn;\r\n    if (this._selectionModel) {\r\n      // A different comparator means the selection could change.\r\n      this._initializeSelection();\r\n    }\r\n  }\n/**\n * Value of the select control.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\r\n    this.writeValue(newValue);\r\n    this._value = newValue;\r\n  }\nprivate _value: any;\n/**\n * Whether ripples for all options in the select are disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\r\n    this._disableRipple = coerceBooleanProperty(value);\r\n    this._setOptionDisableRipple();\r\n  }\nprivate _disableRipple: boolean = false;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {\r\n    this._id = value || this._uid;\r\n    this.stateChanges.next();\r\n  }\nprivate _id: string;\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\r\n    return merge(...this.options.map(option => option.onSelectionChange));\r\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\rto facilitate the two-way binding for the `value` input.\r\\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _ngZone\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n * @param {?} tabIndex\n * @param {?} _scrollStrategyFactory\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _ngZone: NgZone,\r\n    renderer: Renderer2,\r\n    elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic ngControl: NgControl,\r\n     tabIndex: string,\nprivate _scrollStrategyFactory) {\r\n\r\n    super(renderer, elementRef);\r\n\r\n    if (this.ngControl) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n\r\n    // Force setter to be called in case id was not specified.\r\n    this.id = this.id;\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, undefined, false);\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._initKeyManager();\r\n\r\n    this._changeSubscription = startWith.call(this.options.changes, null).subscribe(() => {\r\n      this._resetOptions();\r\n      this._initializeSelection();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._dropSubscriptions();\r\n    this._changeSubscription.unsubscribe();\r\n    this._tabSubscription.unsubscribe();\r\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\r\n    this.panelOpen ? this.close() : this.open();\r\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\r\n    if (this.disabled || !this.options.length) {\r\n      return;\r\n    }\r\n\r\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\r\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\r\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\r\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\r\n\r\n    this._calculateOverlayPosition();\r\n    this._panelOpen = true;\r\n    this._changeDetectorRef.markForCheck();\r\n\r\n    // Set the font size on the panel element once it exists.\r\n    first.call(this._ngZone.onStable).subscribe(() => {\r\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\r\n          this.overlayDir.overlayRef.overlayElement) {\r\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\r\n      }\r\n    });\r\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\r\n    if (this._panelOpen) {\r\n      this._panelOpen = false;\r\n      this._changeDetectorRef.markForCheck();\r\n      this.focus();\r\n    }\r\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\rrequired to integrate with Angular's core forms API.\r\r\\@param value New value to be written to the model.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\r\n    if (this.options) {\r\n      this._setSelectionByValue(value);\r\n    }\r\n  }\n/**\n * Saves a callback function to be invoked when the select's value\rchanges from user input. Part of the ControlValueAccessor interface\rrequired to integrate with Angular's core forms API.\r\r\\@param fn Callback to be triggered when the value changes.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\rby the user. Part of the ControlValueAccessor interface required\rto integrate with Angular's core forms API.\r\r\\@param fn Callback to be triggered when the component has been touched.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\r\n    this._onTouched = fn;\r\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\rto integrate with Angular's core forms API.\r\r\\@param isDisabled Sets whether the component is disabled.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n    this.stateChanges.next();\r\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\r\n    return this._panelOpen;\r\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\r\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\r\n    if (!this._selectionModel || this._selectionModel.isEmpty()) {\r\n      return '';\r\n    }\r\n\r\n    if (this._multiple) {\r\n      const /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\r\n\r\n      if (this._isRtl()) {\r\n        selectedOptions.reverse();\r\n      }\r\n\r\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\r\n      return selectedOptions.join(', ');\r\n    }\r\n\r\n    return this._selectionModel.selected[0].viewValue;\r\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\r\n    return this._dir ? this._dir.value === 'rtl' : false;\r\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\r\n    if (!this.disabled) {\r\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\r\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\r\n        this.open();\r\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\r\n        this._handleArrowKey(event);\r\n      }\r\n    }\r\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === HOME || event.keyCode === END) {\r\n      event.preventDefault();\r\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\r\n                               this._keyManager.setLastItemActive();\r\n    } else {\r\n      this._keyManager.onKeydown(event);\r\n    }\r\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\remits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\r\n    if (this.panelOpen) {\r\n      this._focusCorrectOption();\r\n      this.onOpen.emit();\r\n    } else {\r\n      this.onClose.emit();\r\n      this._panelDoneAnimating = false;\r\n      this.overlayDir.offsetX = 0;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\rset so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\r\n    this._panelDoneAnimating = this.panelOpen;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * @return {?}\n */\n_onFocus() {\r\n    if (!this.disabled) {\r\n      this.focused = true;\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\r\"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\r\n    if (!this.disabled && !this.panelOpen) {\r\n      this.focused = false;\r\n      this._onTouched();\r\n      this._changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\r\n    this._calculateOverlayOffsetX();\r\n    this._setScrollTop();\r\n  }\n/**\n * Whether the select has a value.\n * @return {?}\n */\nget empty(): boolean {\r\n    return !this._selectionModel || this._selectionModel.isEmpty();\r\n  }\n/**\n * Whether the select is in an error state.\n * @return {?}\n */\nget errorState(): boolean {\r\n    const /** @type {?} */ isInvalid = this.ngControl && this.ngControl.invalid;\r\n    const /** @type {?} */ isTouched = this.ngControl && this.ngControl.touched;\r\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\r\n        (this._parentForm && this._parentForm.submitted);\r\n\r\n    return !!(isInvalid && (isTouched || isSubmitted));\r\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\rthe overlay pane is attached or the scroll container element will not yet be\rpresent in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\r\n    const /** @type {?} */ scrollContainer =\r\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel'); /** @type {?} */((\r\n    scrollContainer)).scrollTop = this._scrollTop;\r\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\r\n    });\r\n  }\n/**\n * Sets the selected option based on a value. If no option can be\rfound with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\r\n    const /** @type {?} */ isArray = Array.isArray(value);\r\n\r\n    if (this.multiple && value && !isArray) {\r\n      throw getMdSelectNonArrayValueError();\r\n    }\r\n\r\n    this._clearSelection();\r\n\r\n    if (isArray) {\r\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\r\n      this._sortValues();\r\n    } else {\r\n      const /** @type {?} */ correspondingOption = this._selectValue(value, isUserInput);\r\n\r\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n      // mode, because we don't know what option the user interacted with last.\r\n      if (correspondingOption) {\r\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\r\n      }\r\n    }\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Finds and selects and option based on its value.\r\\@returns Option that has the corresponding value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _selectValue(value: any, isUserInput = false): MdOption | undefined {\r\n    const /** @type {?} */ correspondingOption = this.options.find((option: MdOption) => {\r\n      try {\r\n        // Treat null as a special reset value.\r\n        return option.value != null && this._compareWith(option.value,  value);\r\n      } catch ( /** @type {?} */error) {\r\n        if (isDevMode()) {\r\n          // Notify developers of errors in their comparator.\r\n          console.warn(error);\r\n        }\r\n        return false;\r\n      }\r\n    });\r\n\r\n    if (correspondingOption) {\r\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\r\n      this._selectionModel.select(correspondingOption);\r\n      this.stateChanges.next();\r\n    }\r\n\r\n    return correspondingOption;\r\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\r\\@param skip Option that should not be deselected.\n * @param {?=} skip\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\r\n    this._selectionModel.clear();\r\n    this.options.forEach(option => {\r\n      if (option !== skip) {\r\n        option.deselect();\r\n      }\r\n    });\r\n    this.stateChanges.next();\r\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\r\n    this._keyManager = new FocusKeyManager<MdOption>(this.options).withTypeAhead();\r\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\r\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\r\n    this._dropSubscriptions();\r\n    this._listenToOptions();\r\n    this._setOptionIds();\r\n    this._setOptionMultiple();\r\n    this._setOptionDisableRipple();\r\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\r\n    this._optionSubscription = filter.call(this.optionSelectionChanges,\r\n      event => event.isUserInput).subscribe(event => {\r\n        this._onSelect(event.source);\r\n\r\n        if (!this.multiple) {\r\n          this.close();\r\n        }\r\n      });\r\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\r\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\r\n\r\n    // TODO(crisbeto): handle blank/null options inside multi-select.\r\n    if (this.multiple) {\r\n      this._selectionModel.toggle(option);\r\n      this.stateChanges.next();\r\n      wasSelected ? option.deselect() : option.select();\r\n      this._sortValues();\r\n    } else {\r\n      this._clearSelection(option.value == null ? undefined : option);\r\n\r\n      if (option.value == null) {\r\n        this._propagateChanges(option.value);\r\n      } else {\r\n        this._selectionModel.select(option);\r\n        this.stateChanges.next();\r\n      }\r\n    }\r\n\r\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\r\n      this._propagateChanges();\r\n    }\r\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\rorder that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\r\n    if (this._multiple) {\r\n      this._selectionModel.clear();\r\n\r\n      this.options.forEach(option => {\r\n        if (option.selected) {\r\n          this._selectionModel.select(option);\r\n        }\r\n      });\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\r\n    this._optionSubscription.unsubscribe();\r\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\r\n    let /** @type {?} */ valueToEmit: any = null;\r\n\r\n    if (Array.isArray(this.selected)) {\r\n      valueToEmit = this.selected.map(option => option.value);\r\n    } else {\r\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\r\n    }\r\n\r\n    this._value = valueToEmit;\r\n    this._onChange(valueToEmit);\r\n    this.change.emit(new MdSelectChange(this, valueToEmit));\r\n    this.valueChange.emit(valueToEmit);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\r\n    this._optionIds = this.options.map(option => option.id).join(' ');\r\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\rin order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\r\n    if (this.multiple) {\r\n      Promise.resolve(null).then(() => {\r\n        this.options.forEach(option => option.multiple = this.multiple);\r\n      });\r\n    }\r\n  }\n/**\n * Sets the `disableRipple` property on each option.\n * @return {?}\n */\nprivate _setOptionDisableRipple() {\r\n    if (this.options) {\r\n      this.options.forEach(option => option.disableRipple = this.disableRipple);\r\n    }\r\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\rthe first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\r\n    if (this._selectionModel.isEmpty()) {\r\n      this._keyManager.setFirstItemActive();\r\n    } else {\r\n      this._keyManager.setActiveItem( /** @type {?} */((this._getOptionIndex(this._selectionModel.selected[0]))));\r\n    }\r\n  }\n/**\n * Focuses the select element.\n * @return {?}\n */\nfocus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number | undefined {\r\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\r\n      return result === undefined ? (option === current ? index : undefined) : result;\r\n    }, undefined);\r\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\r\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n\r\n    const /** @type {?} */ items = this._getItemCount();\r\n    const /** @type {?} */ panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n    const /** @type {?} */ scrollContainerHeight = items * itemHeight;\r\n\r\n    // The farthest the panel can be scrolled before it hits the bottom\r\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\r\n\r\n    // If no value is selected we open the popup to the first item.\r\n    let /** @type {?} */ selectedOptionOffset =\r\n        this.empty ? 0 : /** @type {?} */(( this._getOptionIndex(this._selectionModel.selected[0])));\r\n\r\n    selectedOptionOffset += MdOption.countGroupLabelsBeforeOption(selectedOptionOffset,\r\n        this.options, this.optionGroups);\r\n\r\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\r\n    // center of the overlay panel rather than the top.\r\n    const /** @type {?} */ scrollBuffer = panelHeight / 2;\r\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\r\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\r\n\r\n    this._checkOverlayWithinViewport(maxScroll);\r\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\r\rAttempts to center the selected option in the panel. If the option is\rtoo high or too low in the panel to be scrolled to the center, it clamps the\rscroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\r\n                          maxScroll: number): number {\r\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n    const /** @type {?} */ optionOffsetFromScrollTop = itemHeight * selectedIndex;\r\n    const /** @type {?} */ halfOptionHeight = itemHeight / 2;\r\n\r\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\r\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\r\n    // the center of the overlay panel. Half the option height must be re-added to the\r\n    // scrollTop so the option is centered based on its middle, not its top edge.\r\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\r\n    return clampValue(0, optimalScrollPosition, maxScroll);\r\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string | null {\r\n    // If an ariaLabelledby value has been set, the select should not overwrite the\r\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\r\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\r\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\rThis must be adjusted to align the selected option text over the trigger text when\rthe panel opens. Will change based on LTR or RTL text direction. Note that the offset\rcan't be calculated until the panel has been attached, because we need to know the\rcontent width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\r\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\r\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\r\n    const /** @type {?} */ isRtl = this._isRtl();\r\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\r\n                                         SELECT_PANEL_PADDING_X * 2;\r\n    let /** @type {?} */ offsetX: number;\r\n\r\n    // Adjust the offset, depending on the option padding.\r\n    if (this.multiple) {\r\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\r\n    } else {\r\n      let /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\r\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\r\n    }\r\n\r\n    // Invert the offset in LTR.\r\n    if (!isRtl) {\r\n      offsetX *= -1;\r\n    }\r\n\r\n    // Determine how much the select overflows on each side.\r\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\r\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\r\n                          + (isRtl ? 0 : paddingWidth);\r\n\r\n    // If the element overflows on either side, reduce the offset to allow it to fit.\r\n    if (leftOverflow > 0) {\r\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n    } else if (rightOverflow > 0) {\r\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n    }\r\n\r\n    // Set the offset directly in order to avoid having to go through change detection and\r\n    // potentially triggering \"changed after it was checked\" errors.\r\n    this.overlayDir.offsetX = offsetX;\r\n    this.overlayDir.overlayRef.updatePosition();\r\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\rtop start corner of the trigger. It has to be adjusted in order for the\rselected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\r\n                                  maxScroll: number): number {\r\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n    const /** @type {?} */ optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n    const /** @type {?} */ maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\r\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\r\n\r\n    if (this._scrollTop === 0) {\r\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\r\n    } else if (this._scrollTop === maxScroll) {\r\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\r\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\r\n\r\n      // The first item is partially out of the viewport. Therefore we need to calculate what\r\n      // portion of it is shown in the viewport and account for it in our offset.\r\n      let /** @type {?} */ partialItemHeight =\r\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\r\n\r\n      // Because the panel height is longer than the height of the options alone,\r\n      // there is always extra padding at the top or bottom of the panel. When\r\n      // scrolled to the very bottom, this padding is at the top of the panel and\r\n      // must be added to the offset.\r\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\r\n    } else {\r\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\r\n      // its offset will be the scroll buffer minus the half height that was added to\r\n      // center it.\r\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\r\n    }\r\n\r\n    // The final offset is the option's offset from the top, adjusted for the height\r\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\r\n    // direction up the page.\r\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\r\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\rIf it will not fit, tries to adjust the scroll position and the associated\ry-offset so the panel can open fully on-screen. If it still won't fit,\rsets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\r\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\r\n\r\n    const /** @type {?} */ topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\r\n    const /** @type {?} */ bottomSpaceAvailable =\r\n        viewportRect.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\r\n\r\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\r\n    const /** @type {?} */ totalPanelHeight =\r\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\r\n\r\n    if (panelHeightBottom > bottomSpaceAvailable) {\r\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\r\n    } else if (panelHeightTop > topSpaceAvailable) {\r\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\r\n    } else {\r\n      this._transformOrigin = this._getOriginBasedOnOption();\r\n    }\r\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\r\n    // Browsers ignore fractional scroll offsets, so we need to round.\r\n    const /** @type {?} */ distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\r\n\r\n    // Scrolls the panel up by the distance it was extending past the boundary, then\r\n    // adjusts the offset by that amount to move the panel up into the viewport.\r\n    this._scrollTop -= distanceBelowViewport;\r\n    this._offsetY -= distanceBelowViewport;\r\n    this._transformOrigin = this._getOriginBasedOnOption();\r\n\r\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\r\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\r\n    // effect.\r\n    if (this._scrollTop <= 0) {\r\n      this._scrollTop = 0;\r\n      this._offsetY = 0;\r\n      this._transformOrigin = `50% bottom 0px`;\r\n    }\r\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\r\n                           maxScroll: number) {\r\n    // Browsers ignore fractional scroll offsets, so we need to round.\r\n    const /** @type {?} */ distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\r\n\r\n    // Scrolls the panel down by the distance it was extending past the boundary, then\r\n    // adjusts the offset by that amount to move the panel down into the viewport.\r\n    this._scrollTop += distanceAboveViewport;\r\n    this._offsetY += distanceAboveViewport;\r\n    this._transformOrigin = this._getOriginBasedOnOption();\r\n\r\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\r\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\r\n    // to take effect.\r\n    if (this._scrollTop >= maxScroll) {\r\n      this._scrollTop = maxScroll;\r\n      this._offsetY = 0;\r\n      this._transformOrigin = `50% top 0px`;\r\n      return;\r\n    }\r\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\r\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n    const /** @type {?} */ optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n    const /** @type {?} */ originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\r\n    return `50% ${originY}px 0px`;\r\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\r\n    if (this._multiple) {\r\n      event.preventDefault();\r\n      this.open();\r\n    } else {\r\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\r\n\r\n      // Cycle though the select options even when the select is closed,\r\n      // matching the behavior of the native select element.\r\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\r\n      // however the key manager only supports up/down at the moment.\r\n      this._keyManager.onKeydown(event);\r\n\r\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\r\n\r\n      if (currentActiveItem !== prevActiveItem) {\r\n        this._clearSelection();\r\n        this._setSelectionByValue(currentActiveItem.value, true);\r\n        this._propagateChanges();\r\n      }\r\n    }\r\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\r\n    return this.options.length + this.optionGroups.length;\r\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @return {?}\n */\nonContainerClick() {\r\n    this.focus();\r\n    this.open();\r\n  }\n/**\n * @return {?}\n */\nget shouldPlaceholderFloat() { return this._panelOpen || !this.empty; }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-select, mat-select',\r\n  templateUrl: 'select.html',\r\n  styleUrls: ['select.css'],\r\n  inputs: ['disabled', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'role': 'listbox',\r\n    '[attr.id]': 'id',\r\n    '[attr.tabindex]': 'tabIndex',\r\n    '[attr.aria-label]': '_ariaLabel',\r\n    '[attr.aria-labelledby]': 'ariaLabelledby',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-owns]': '_optionIds',\r\n    '[attr.aria-multiselectable]': 'multiple',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[class.mat-select-disabled]': 'disabled',\r\n    '[class.mat-select-invalid]': 'errorState',\r\n    '[class.mat-select-required]': 'required',\r\n    'class': 'mat-select',\r\n    '(keydown)': '_handleClosedKeydown($event)',\r\n    '(focus)': '_onFocus()',\r\n    '(blur)': '_onBlur()',\r\n  },\r\n  animations: [\r\n    transformPanel,\r\n    fadeInContent\r\n  ],\r\n  providers: [{provide: MdFormFieldControl, useExisting: MdSelect}],\r\n  exportAs: 'mdSelect, matSelect',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MD_SELECT_SCROLL_STRATEGY, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'customTrigger': [{ type: ContentChild, args: [MdSelectTrigger, ] },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'value': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMdSelect.prototype._compareWith;\n/**\n * Unique id for this input.\n * @type {?}\n */\nMdSelect.prototype._uid;\n/**\n * The last measured value for the trigger's client bounding rect.\n * @type {?}\n */\nMdSelect.prototype._triggerRect;\n/**\n * The aria-describedby attribute on the select for improved a11y.\n * @type {?}\n */\nMdSelect.prototype._ariaDescribedby;\n/**\n * The cached font-size of the trigger element.\n * @type {?}\n */\nMdSelect.prototype._triggerFontSize;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n * @type {?}\n */\nMdSelect.prototype._scrollStrategy;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\rThis must be adjusted to align the selected option text over the trigger text.\rwhen the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\ris aligned with with the top \"start\" of the origin by default (overlapping\rthe trigger completely). If the panel cannot fit below the trigger, it\rwill fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Stream that emits whenever the state of the select changes such that the wrapping `MdFormField`\rneeds to run change detection.\n * @type {?}\n */\nMdSelect.prototype.stateChanges;\n/**\n * Whether the select is focused.\n * @type {?}\n */\nMdSelect.prototype.focused;\n/**\n * A name for this control that can be used by `md-form-field`.\n * @type {?}\n */\nMdSelect.prototype.controlType;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMdSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMdSelect.prototype.panelClass;\n/**\n * User-supplied override of the trigger element.\n * @type {?}\n */\nMdSelect.prototype.customTrigger;\n/** @type {?} */\nMdSelect.prototype._value;\n/** @type {?} */\nMdSelect.prototype._disableRipple;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/** @type {?} */\nMdSelect.prototype._id;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\rto facilitate the two-way binding for the `value` input.\r\\@docs-private\n * @type {?}\n */\nMdSelect.prototype.valueChange;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._ngZone;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._parentForm;\n/** @type {?} */\nMdSelect.prototype._parentFormGroup;\n/** @type {?} */\nMdSelect.prototype.ngControl;\n/** @type {?} */\nMdSelect.prototype._scrollStrategyFactory;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\r\n  return Math.min(Math.max(min, n), max);\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MdSelect, MdSelectTrigger, MD_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\r\nimport {MdCommonModule, MdOptionModule} from '@angular/material/core';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\nexport class MdSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    MdOptionModule,\r\n    MdCommonModule,\r\n  ],\r\n  exports: [MdSelect, MdSelectTrigger, MdOptionModule, MdCommonModule],\r\n  declarations: [MdSelect, MdSelectTrigger],\r\n  providers: [MD_SELECT_SCROLL_STRATEGY_PROVIDER]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSelectModule,SELECT_PANEL_MAX_HEIGHT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_ITEM_HEIGHT_EM,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_VIEWPORT_PADDING,MD_SELECT_SCROLL_STRATEGY,MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_SELECT_SCROLL_STRATEGY_PROVIDER,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelectTrigger,MdSelect,transformPanel,fadeInContent,MAT_SELECT_SCROLL_STRATEGY,MAT_SELECT_SCROLL_STRATEGY_PROVIDER,MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MatSelect,MatSelectBase,MatSelectChange,MatSelectModule,MatSelectTrigger} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\r\nimport {AriaDescriber} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {\r\n  OriginConnectionPosition,\r\n  Overlay,\r\n  OverlayConnectionPosition,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {ComponentPortal} from '@angular/cdk/portal';\r\nimport {first} from '@angular/cdk/rxjs';\r\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Renderer2,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n\r\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nexport const SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nexport function getMdTooltipInvalidPositionError(position: string) {\r\n  return Error(`Tooltip position \"${position}\" is invalid.`);\r\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n */\nexport const MD_TOOLTIP_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('md-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\r\n}\n/**\n * \\@docs-private\n */\nexport const MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MD_TOOLTIP_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\r\n};\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\rhiding of a tooltip provided position (defaults to below the element).\r\rhttps://material.google.com/components/tooltips.html\n */\nexport class MdTooltip implements OnDestroy {\r\n  _overlayRef: OverlayRef | null;\r\n  _tooltipInstance: TooltipComponent | null;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\nprivate _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\r\n    if (value !== this._position) {\r\n      this._position = value;\r\n\r\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\r\n      // the tooltip.\r\n      if (this._tooltipInstance) {\r\n        this._disposeTooltip();\r\n      }\r\n    }\r\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n\r\n    // If tooltip is disabled, hide immediately.\r\n    if (this._disabled) {\r\n      this.hide(0);\r\n    }\r\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n/**\n * The default delay in ms before showing the tooltip after show is called\n */\nshowDelay = 0;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n */\nhideDelay = 0;\nprivate _message = '';\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\r\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\r\n\r\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\r\n    this._message = value != null ? `${value}`.trim() : '';\r\n    this._updateTooltipMessage();\r\n    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\r\n  }\n/**\n * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n * @return {?}\n */\nget tooltipClass() { return this._tooltipClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\r\n    this._tooltipClass = value;\r\n    if (this._tooltipInstance) {\r\n      this._setTooltipClass(this._tooltipClass);\r\n    }\r\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMessage(): string { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMessage(v: string) { this.message = v; }\n/**\n * @return {?}\n */\nget _matMessage() { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMessage(v) { this.message = v; }\n/**\n * @return {?}\n */\nget _matPosition() { return this.position; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matPosition(v) { this.position = v; }\n/**\n * @return {?}\n */\nget _matDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matHideDelay() { return this.hideDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matHideDelay(v) { this.hideDelay = v; }\n/**\n * @return {?}\n */\nget _matShowDelay() { return this.showDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matShowDelay(v) { this.showDelay = v; }\n/**\n * @return {?}\n */\nget _matClass() { return this.tooltipClass; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matClass(v) { this.tooltipClass = v; }\nprivate _enterListener: Function;\nprivate _leaveListener: Function;\n/**\n * @param {?} renderer\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _platform\n * @param {?} _ariaDescriber\n * @param {?} _scrollStrategy\n * @param {?} _dir\n */\nconstructor(\r\n    renderer: Renderer2,\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _platform: Platform,\nprivate _ariaDescriber: AriaDescriber,\nprivate _scrollStrategy,\nprivate _dir: Directionality) {\r\n\r\n    // The mouse events shouldn't be bound on iOS devices, because\r\n    // they can prevent the first tap from firing its click event.\r\n    if (!_platform.IOS) {\r\n      this._enterListener =\r\n        renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\r\n      this._leaveListener =\r\n        renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\r\n    }\r\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\r\n    if (this._tooltipInstance) {\r\n      this._disposeTooltip();\r\n    }\r\n    // Clean up the event listeners set in the constructor\r\n    if (!this._platform.IOS) {\r\n      this._enterListener();\r\n      this._leaveListener();\r\n    }\r\n\r\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\r\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\r\n    if (this.disabled || !this.message) { return; }\r\n\r\n    if (!this._tooltipInstance) {\r\n      this._createTooltip();\r\n    }\r\n\r\n    this._setTooltipClass(this._tooltipClass);\r\n    this._updateTooltipMessage(); /** @type {?} */((\r\n    this._tooltipInstance)).show(this._position, delay);\r\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\r\n    if (this._tooltipInstance) {\r\n      this._tooltipInstance.hide(delay);\r\n    }\r\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\r\n    this._isTooltipVisible() ? this.hide() : this.show();\r\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\r\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\r\n  }\n/**\n * Handles the keydown events on the host element.\n * @param {?} e\n * @return {?}\n */\n_handleKeydown(e: KeyboardEvent) {\r\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\r\n      e.stopPropagation();\r\n      this.hide(0);\r\n    }\r\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\r\n    let /** @type {?} */ overlayRef = this._createOverlay();\r\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\r\n\r\n    this._tooltipInstance = overlayRef.attach(portal).instance; /** @type {?} */((\r\n\r\n    // Dispose the overlay when finished the shown tooltip.\r\n    this._tooltipInstance)).afterHidden().subscribe(() => {\r\n      // Check first if the tooltip has already been removed through this components destroy.\r\n      if (this._tooltipInstance) {\r\n        this._disposeTooltip();\r\n      }\r\n    });\r\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\r\n    const /** @type {?} */ origin = this._getOrigin();\r\n    const /** @type {?} */ position = this._getOverlayPosition();\r\n\r\n    // Create connected position strategy that listens for scroll events to reposition.\r\n    // After position changes occur and the overlay is clipped by a parent scrollable then\r\n    // close the tooltip.\r\n    const /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\r\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\r\n    strategy.onPositionChange.subscribe(change => {\r\n      if (change.scrollableViewProperties.isOverlayClipped &&\r\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\r\n        this.hide(0);\r\n      }\r\n    });\r\n\r\n    const /** @type {?} */ config = new OverlayConfig({\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      positionStrategy: strategy,\r\n      panelClass: TOOLTIP_PANEL_CLASS,\r\n      scrollStrategy: this._scrollStrategy()\r\n    });\r\n\r\n    this._overlayRef = this._overlay.create(config);\r\n\r\n    return this._overlayRef;\r\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n\r\n    this._tooltipInstance = null;\r\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\r\n    if (this.position == 'above' || this.position == 'below') {\r\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\r\n    }\r\n\r\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\r\n    if (this.position == 'left' ||\r\n        this.position == 'before' && isDirectionLtr ||\r\n        this.position == 'after' && !isDirectionLtr) {\r\n      return {originX: 'start', originY: 'center'};\r\n    }\r\n\r\n    if (this.position == 'right' ||\r\n        this.position == 'after' && isDirectionLtr ||\r\n        this.position == 'before' && !isDirectionLtr) {\r\n      return {originX: 'end', originY: 'center'};\r\n    }\r\n\r\n    throw getMdTooltipInvalidPositionError(this.position);\r\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\r\n    if (this.position == 'above') {\r\n      return {overlayX: 'center', overlayY: 'bottom'};\r\n    }\r\n\r\n    if (this.position == 'below') {\r\n      return {overlayX: 'center', overlayY: 'top'};\r\n    }\r\n\r\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\r\n    if (this.position == 'left' ||\r\n        this.position == 'before' && isLtr ||\r\n        this.position == 'after' && !isLtr) {\r\n      return {overlayX: 'end', overlayY: 'center'};\r\n    }\r\n\r\n    if (this.position == 'right' ||\r\n        this.position == 'after' && isLtr ||\r\n        this.position == 'before' && !isLtr) {\r\n      return {overlayX: 'start', overlayY: 'center'};\r\n    }\r\n\r\n    throw getMdTooltipInvalidPositionError(this.position);\r\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @return {?}\n */\nprivate _updateTooltipMessage() {\r\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\r\n    // calculate the correct positioning based on the size of the text.\r\n    if (this._tooltipInstance) {\r\n      this._tooltipInstance.message = this.message;\r\n      this._tooltipInstance._markForCheck();\r\n\r\n      first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\r\n        if (this._tooltipInstance) { /** @type {?} */((\r\n          this._overlayRef)).updatePosition();\r\n        }\r\n      });\r\n    }\r\n  }\n/**\n * Updates the tooltip class\n * @param {?} tooltipClass\n * @return {?}\n */\nprivate _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\r\n    if (this._tooltipInstance) {\r\n      this._tooltipInstance.tooltipClass = tooltipClass;\r\n      this._tooltipInstance._markForCheck();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\r\n  host: {\r\n    '(longpress)': 'show()',\r\n    '(focus)': 'show()',\r\n    '(blur)': 'hide(0)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\r\n  },\r\n  exportAs: 'mdTooltip, matTooltip',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Platform, },\n{type: AriaDescriber, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_TOOLTIP_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['mdTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['mdTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['mdTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['mdTooltip', ] },],\n'tooltipClass': [{ type: Input, args: ['mdTooltipClass', ] },],\n'_deprecatedMessage': [{ type: Input, args: ['md-tooltip', ] },],\n'_matMessage': [{ type: Input, args: ['matTooltip', ] },],\n'_matPosition': [{ type: Input, args: ['matTooltipPosition', ] },],\n'_matDisabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n'_matClass': [{ type: Input, args: ['matTooltipClass', ] },],\n};\n}\n\nfunction MdTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltip.ctorParameters;\n/** @type {?} */\nMdTooltip.propDecorators;\n/** @type {?} */\nMdTooltip.prototype._overlayRef;\n/** @type {?} */\nMdTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMdTooltip.prototype._position;\n/** @type {?} */\nMdTooltip.prototype._disabled;\n/** @type {?} */\nMdTooltip.prototype._tooltipClass;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMdTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMdTooltip.prototype.hideDelay;\n/** @type {?} */\nMdTooltip.prototype._message;\n/** @type {?} */\nMdTooltip.prototype._enterListener;\n/** @type {?} */\nMdTooltip.prototype._leaveListener;\n/** @type {?} */\nMdTooltip.prototype._overlay;\n/** @type {?} */\nMdTooltip.prototype._elementRef;\n/** @type {?} */\nMdTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMdTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMdTooltip.prototype._ngZone;\n/** @type {?} */\nMdTooltip.prototype._platform;\n/** @type {?} */\nMdTooltip.prototype._ariaDescriber;\n/** @type {?} */\nMdTooltip.prototype._scrollStrategy;\n/** @type {?} */\nMdTooltip.prototype._dir;\n}\n\r\n\r\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\r\\@docs-private\n */\nexport class TooltipComponent {\n/**\n * Message to display in the tooltip\n */\nmessage: string;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n */\ntooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * The timeout ID of any current timer set to show the tooltip\n */\n_showTimeoutId: number;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n */\n_hideTimeoutId: number;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n */\n_visibility: TooltipVisibility = 'initial';\n/**\n * Whether interactions on the page should close the tooltip\n */\nprivate _closeOnInteraction: boolean = false;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n */\n_transformOrigin: string = 'bottom';\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n */\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\r\\@param position Position of the tooltip.\r\\@param delay Amount of milliseconds to the delay showing the tooltip.\n * @param {?} position\n * @param {?} delay\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\r\n    // Cancel the delayed hide if it is scheduled\r\n    if (this._hideTimeoutId) {\r\n      clearTimeout(this._hideTimeoutId);\r\n    }\r\n\r\n    this._setTransformOrigin(position);\r\n    this._showTimeoutId = setTimeout(() => {\r\n      this._visibility = 'visible';\r\n\r\n      // Mark for check so if any parent component has set the\r\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\r\n      this._markForCheck();\r\n    }, delay);\r\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\r\\@param delay Amount of milliseconds to delay showing the tooltip.\n * @param {?} delay\n * @return {?}\n */\nhide(delay: number): void {\r\n    // Cancel the delayed show if it is scheduled\r\n    if (this._showTimeoutId) {\r\n      clearTimeout(this._showTimeoutId);\r\n    }\r\n\r\n    this._hideTimeoutId = setTimeout(() => {\r\n      this._visibility = 'hidden';\r\n\r\n      // Mark for check so if any parent component has set the\r\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\r\n      this._markForCheck();\r\n    }, delay);\r\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\r\n    return this._onHide.asObservable();\r\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\r\n    return this._visibility === 'visible';\r\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\r\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\r\n    switch (value) {\r\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\r\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\r\n      case 'left':   this._transformOrigin = 'right'; break;\r\n      case 'right':  this._transformOrigin = 'left'; break;\r\n      case 'above':  this._transformOrigin = 'bottom'; break;\r\n      case 'below':  this._transformOrigin = 'top'; break;\r\n      default: throw getMdTooltipInvalidPositionError(value);\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_animationStart() {\r\n    this._closeOnInteraction = false;\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_animationDone(event: AnimationEvent): void {\r\n    const /** @type {?} */ toState = /** @type {?} */(( event.toState as TooltipVisibility));\r\n\r\n    if (toState === 'hidden' && !this.isVisible()) {\r\n      this._onHide.next();\r\n    }\r\n\r\n    if (toState === 'visible' || toState === 'hidden') {\r\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\r\n      // the end if animations are disabled. Make this call async to ensure that it still fires\r\n      // at the appropriate time.\r\n      Promise.resolve().then(() => this._closeOnInteraction = true);\r\n    }\r\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\rmaterial design spec.\rhttps://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\r\n    if (this._closeOnInteraction) {\r\n      this.hide(0);\r\n    }\r\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\rMainly used for rendering the initial text before positioning a tooltip, which\rcan be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-tooltip-component, mat-tooltip-component',\r\n  templateUrl: 'tooltip.html',\r\n  styleUrls: ['tooltip.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('state', [\r\n      state('initial, void, hidden', style({transform: 'scale(0)'})),\r\n      state('visible', style({transform: 'scale(1)'})),\r\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\r\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\r\n    ])\r\n  ],\r\n  host: {\r\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\r\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\r\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\r\n    '(body:click)': 'this._handleBodyInteraction()',\r\n    'aria-hidden': 'true',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nTooltipComponent.prototype.tooltipClass;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,TOOLTIP_PANEL_CLASS,getMdTooltipInvalidPositionError,MD_TOOLTIP_SCROLL_STRATEGY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER,MdTooltip,TooltipVisibility,TooltipComponent,MatTooltip,MatTooltipModule,MAT_TOOLTIP_SCROLL_STRATEGY,MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER, MdTooltip, TooltipComponent} from './tooltip';\nexport class MdTooltipModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    MdCommonModule,\r\n    PlatformModule,\r\n    A11yModule,\r\n  ],\r\n  exports: [MdTooltip, TooltipComponent, MdCommonModule],\r\n  declarations: [MdTooltip, TooltipComponent],\r\n  entryComponents: [TooltipComponent],\r\n  providers: [MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER, ARIA_DESCRIBER_PROVIDER],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltipModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\n/**\n * To modify the labels and text displayed, create a new instance of MdPaginatorIntl and\rinclude it in a custom provider\n */\nexport class MdPaginatorIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\rcomponents if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the page size selector.\n */\nitemsPerPageLabel = 'Items per page:';\n/**\n * A label for the button that increments the current page.\n */\nnextPageLabel = 'Next page';\n/**\n * A label for the button that decrements the current page.\n */\npreviousPageLabel = 'Previous page';\n/**\n * A label for the range of items within the current page and the length of the whole list.\n */\ngetRangeLabel = (page: number, pageSize: number, length: number) => {\r\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\r\n\r\n    length = Math.max(length, 0);\r\n\r\n    const startIndex = page * pageSize;\r\n\r\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\r\n    const endIndex = startIndex < length ?\r\n        Math.min(startIndex + pageSize, length) :\r\n        startIndex + pageSize;\r\n\r\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\rcomponents if the labels have changed after initialization.\n * @type {?}\n */\nMdPaginatorIntl.prototype.changes;\n/**\n * A label for the page size selector.\n * @type {?}\n */\nMdPaginatorIntl.prototype.itemsPerPageLabel;\n/**\n * A label for the button that increments the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.nextPageLabel;\n/**\n * A label for the button that decrements the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.previousPageLabel;\n/**\n * A label for the range of items within the current page and the length of the whole list.\n * @type {?}\n */\nMdPaginatorIntl.prototype.getRangeLabel;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport{\r\n  trigger,\r\n  state,\r\n  style,\r\n  animate,\r\n  transition,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Below are all the animations for the md-menu component.\r\n * Animation duration and timing values are based on:\r\n * https://material.io/guidelines/components/menus.html#menus-usage\r\n */\r\n\r\n\r\n/**\r\n * This animation controls the menu panel's entry and exit from the page.\r\n *\r\n * When the menu panel is added to the DOM, it scales in and fades in its border.\r\n *\r\n * When the menu panel is removed from the DOM, it simply fades out after a brief\r\n * delay to display the ripple.\r\n */\r\n\r\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\r\nexport const /** @type {?} */ transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\r\n  state('void', style({\r\n    opacity: 0,\r\n    // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\r\n    // as of 4.2, which causes the animation to be skipped if it starts from 0.\r\n    transform: 'scale(0.01, 0.01)'\r\n  })),\r\n  state('enter-start', style({\r\n    opacity: 1,\r\n    transform: 'scale(1, 0.5)'\r\n  })),\r\n  state('enter', style({\r\n    transform: 'scale(1, 1)'\r\n  })),\r\n  transition('void => enter-start', animate('100ms linear')),\r\n  transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\r\n  transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\r\n]);\n/**\n * This animation fades in the background color and content of the menu panel\rafter its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\r\n  state('showing', style({opacity: 1})),\r\n  transition('void => *', [\r\n    style({opacity: 0}),\r\n    animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\r\n  ])\r\n]);\r\n","\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid md-menu instance\r\\@docs-private\n * @return {?}\n */\nexport function throwMdMenuMissingError() {\r\n  throw Error(`md-menu-trigger: must pass in an md-menu instance.\r\n\r\n    Example:\r\n      <md-menu #menu=\"mdMenu\"></md-menu>\r\n      <button [mdMenuTriggerFor]=\"menu\"></button>`);\r\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\rIn other words, it doesn't match 'before' or 'after'.\r\\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionX() {\r\n  throw Error(`x-position value must be either 'before' or after'.\r\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>`);\r\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\rIn other words, it doesn't match 'above' or 'below'.\r\\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionY() {\r\n  throw Error(`y-position value must be either 'above' or below'.\r\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {FocusableOption} from '@angular/cdk/a11y';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanDisable, MATERIAL_COMPATIBILITY_MODE, mixinDisabled} from '@angular/material/core';\r\nimport {Subject} from 'rxjs/Subject';\n/**\n * \\@docs-private\n */\nexport class MdMenuItemBase {}\r\nexport const /** @type {?} */ _MdMenuItemMixinBase = mixinDisabled(MdMenuItemBase);\n/**\n * This directive is intended to be used inside an md-menu tag.\rIt exists mostly to set the role attribute.\n */\nexport class MdMenuItem extends _MdMenuItemMixinBase implements FocusableOption, CanDisable,\r\n  OnDestroy {\n/**\n * Stream that emits when the menu item is hovered.\n */\nhover: Subject<MdMenuItem> = new Subject();\n/**\n * Whether the menu item is highlighted.\n */\n_highlighted: boolean = false;\n/**\n * Whether the menu item acts as a trigger for a sub-menu.\n */\n_triggersSubmenu: boolean = false;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\r\n    super();\r\n  }\n/**\n * Focuses the menu item.\n * @return {?}\n */\nfocus(): void {\r\n    this._getHostElement().focus();\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this.hover.complete();\r\n  }\n/**\n * Used to set the `tabindex`.\n * @return {?}\n */\n_getTabIndex(): string {\r\n    return this.disabled ? '-1' : '0';\r\n  }\n/**\n * Returns the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\r\n    return this._elementRef.nativeElement;\r\n  }\n/**\n * Prevents the default element actions if it is disabled.\n * @param {?} event\n * @return {?}\n */\n_checkDisabled(event: Event): void {\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\n/**\n * Emits to the hover stream.\n * @return {?}\n */\n_emitHoverEvent() {\r\n    if (!this.disabled) {\r\n      this.hover.next(this);\r\n    }\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: '[md-menu-item], [mat-menu-item]',\r\n  inputs: ['disabled'],\r\n  host: {\r\n    'role': 'menuitem',\r\n    'class': 'mat-menu-item',\r\n    '[class.mat-menu-item-highlighted]': '_highlighted',\r\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\r\n    '[attr.tabindex]': '_getTabIndex()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '(click)': '_checkDisabled($event)',\r\n    '(mouseenter)': '_emitHoverEvent()',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  templateUrl: 'menu-item.html',\r\n  exportAs: 'mdMenuItem, matMenuItem',\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdMenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuItem.ctorParameters;\n/**\n * Stream that emits when the menu item is hovered.\n * @type {?}\n */\nMdMenuItem.prototype.hover;\n/**\n * Whether the menu item is highlighted.\n * @type {?}\n */\nMdMenuItem.prototype._highlighted;\n/**\n * Whether the menu item acts as a trigger for a sub-menu.\n * @type {?}\n */\nMdMenuItem.prototype._triggersSubmenu;\n/** @type {?} */\nMdMenuItem.prototype._elementRef;\n}\n\r\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {AnimationEvent} from '@angular/animations';\r\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\r\nimport {RxChain, startWith, switchMap} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {fadeInItems, transformMenu} from './menu-animations';\r\nimport {throwMdMenuInvalidPositionX, throwMdMenuInvalidPositionY} from './menu-errors';\r\nimport {MdMenuItem} from './menu-item';\r\nimport {MdMenuPanel} from './menu-panel';\r\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\r\n\r\n\r\n/** Default `md-menu` options that can be overridden. */\r\nexport interface MdMenuDefaultOptions {\r\n  xPosition: MenuPositionX;\r\n  yPosition: MenuPositionY;\r\n  overlapTrigger: boolean;\r\n}\n/**\n * Injection token to be used to override the default options for `md-menu`.\n */\nexport const MD_MENU_DEFAULT_OPTIONS =\r\n    new InjectionToken<MdMenuDefaultOptions>('md-menu-default-options');\n/**\n * Start elevation for the menu panel.\r\\@docs-private\n */\nconst MD_MENU_BASE_ELEVATION = 2;\nexport class MdMenu implements AfterContentInit, MdMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager<MdMenuItem>;\nprivate _xPosition: MenuPositionX = this._defaultOptions.xPosition;\nprivate _yPosition: MenuPositionY = this._defaultOptions.yPosition;\nprivate _previousElevation: string;\n/**\n * Subscription to tab events on the menu panel\n */\nprivate _tabSubscription = Subscription.EMPTY;\n/**\n * Config object to be passed into the menu's ngClass\n */\n_classList: any = {};\n/**\n * Current state of the panel animation.\n */\n_panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n/**\n * Parent menu of the current menu panel.\n */\nparentMenu: MdMenuPanel | undefined;\n/**\n * Layout direction of the menu.\n */\ndirection: Direction;\n/**\n * Position of the menu in the X axis.\n * @return {?}\n */\nget xPosition() { return this._xPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset xPosition(value: MenuPositionX) {\r\n    if (value !== 'before' && value !== 'after') {\r\n      throwMdMenuInvalidPositionX();\r\n    }\r\n    this._xPosition = value;\r\n    this.setPositionClasses();\r\n  }\n/**\n * Position of the menu in the Y axis.\n * @return {?}\n */\nget yPosition() { return this._yPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset yPosition(value: MenuPositionY) {\r\n    if (value !== 'above' && value !== 'below') {\r\n      throwMdMenuInvalidPositionY();\r\n    }\r\n    this._yPosition = value;\r\n    this.setPositionClasses();\r\n  }\r\n\r\n   templateRef: TemplateRef<any>;\n/**\n * List of the items inside of a menu.\n */\nitems: QueryList<MdMenuItem>;\n/**\n * Whether the menu should overlap its trigger.\n */\noverlapTrigger = this._defaultOptions.overlapTrigger;\n/**\n * This method takes classes set on the host md-menu element and applies them on the\rmenu template that displays in the overlay container.  Otherwise, it's difficult\rto style the containing menu from outside the component.\r\\@param classes list of class names\n * @param {?} classes\n * @return {?}\n */\nset classList(classes: string) {\r\n    if (classes && classes.length) {\r\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\r\n        obj[className] = true;\r\n        return obj;\r\n      }, {});\r\n\r\n      this._elementRef.nativeElement.className = '';\r\n      this.setPositionClasses();\r\n    }\r\n  }\n/**\n * Event emitted when the menu is closed.\n */\nclose = new EventEmitter<void | 'click' | 'keydown'>();\n/**\n * @param {?} _elementRef\n * @param {?} _defaultOptions\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _defaultOptions: MdMenuDefaultOptions) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._keyManager = new FocusKeyManager<MdMenuItem>(this.items).withWrap();\r\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._tabSubscription.unsubscribe();\r\n    this.close.emit();\r\n    this.close.complete();\r\n  }\n/**\n * Stream that emits whenever the hovered menu item changes.\n * @return {?}\n */\nhover(): Observable<MdMenuItem> {\r\n    return RxChain.from(this.items.changes)\r\n      .call(startWith, this.items)\r\n      .call(switchMap, (items: MdMenuItem[]) => merge(...items.map(item => item.hover)))\r\n      .result();\r\n  }\n/**\n * Handle a keyboard event from the menu, delegating to the appropriate action.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\r\n    switch (event.keyCode) {\r\n      case ESCAPE:\r\n        this.close.emit('keydown');\r\n        event.stopPropagation();\r\n      break;\r\n      case LEFT_ARROW:\r\n        if (this.parentMenu && this.direction === 'ltr') {\r\n          this.close.emit('keydown');\r\n        }\r\n      break;\r\n      case RIGHT_ARROW:\r\n        if (this.parentMenu && this.direction === 'rtl') {\r\n          this.close.emit('keydown');\r\n        }\r\n      break;\r\n      default:\r\n        this._keyManager.onKeydown(event);\r\n    }\r\n  }\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\rto focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\r\n    this._keyManager.setFirstItemActive();\r\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\rfolds out from the correct direction.\n * @param {?=} posX\n * @param {?=} posY\n * @return {?}\n */\nsetPositionClasses(posX = this.xPosition, posY = this.yPosition): void {\r\n    this._classList['mat-menu-before'] = posX === 'before';\r\n    this._classList['mat-menu-after'] = posX === 'after';\r\n    this._classList['mat-menu-above'] = posY === 'above';\r\n    this._classList['mat-menu-below'] = posY === 'below';\r\n  }\n/**\n * Sets the menu panel elevation.\r\\@param depth Number of parent menus that come before the menu.\n * @param {?} depth\n * @return {?}\n */\nsetElevation(depth: number): void {\r\n    // The elevation starts at the base and increases by one for each level.\r\n    const /** @type {?} */ newElevation = `mat-elevation-z${MD_MENU_BASE_ELEVATION + depth}`;\r\n    const /** @type {?} */ customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\r\n\r\n    if (!customElevation || customElevation === this._previousElevation) {\r\n      if (this._previousElevation) {\r\n        this._classList[this._previousElevation] = false;\r\n      }\r\n\r\n      this._classList[newElevation] = true;\r\n      this._previousElevation = newElevation;\r\n    }\r\n  }\n/**\n * Starts the enter animation.\n * @return {?}\n */\n_startAnimation() {\r\n    this._panelAnimationState = 'enter-start';\r\n  }\n/**\n * Resets the panel animation to its initial state.\n * @return {?}\n */\n_resetAnimation() {\r\n    this._panelAnimationState = 'void';\r\n  }\n/**\n * Callback that is invoked when the panel animation completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\r\n    // After the initial expansion is done, trigger the second phase of the enter animation.\r\n    if (event.toState === 'enter-start') {\r\n      this._panelAnimationState = 'enter';\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-menu, mat-menu',\r\n  templateUrl: 'menu.html',\r\n  styleUrls: ['menu.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  animations: [\r\n    transformMenu,\r\n    fadeInItems\r\n  ],\r\n  exportAs: 'mdMenu, matMenu'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_MENU_DEFAULT_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'xPosition': [{ type: Input },],\n'yPosition': [{ type: Input },],\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MdMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MdMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenu.ctorParameters;\n/** @type {?} */\nMdMenu.propDecorators;\n/** @type {?} */\nMdMenu.prototype._keyManager;\n/** @type {?} */\nMdMenu.prototype._xPosition;\n/** @type {?} */\nMdMenu.prototype._yPosition;\n/** @type {?} */\nMdMenu.prototype._previousElevation;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMdMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMdMenu.prototype._classList;\n/**\n * Current state of the panel animation.\n * @type {?}\n */\nMdMenu.prototype._panelAnimationState;\n/**\n * Parent menu of the current menu panel.\n * @type {?}\n */\nMdMenu.prototype.parentMenu;\n/**\n * Layout direction of the menu.\n * @type {?}\n */\nMdMenu.prototype.direction;\n/** @type {?} */\nMdMenu.prototype.templateRef;\n/**\n * List of the items inside of a menu.\n * @type {?}\n */\nMdMenu.prototype.items;\n/**\n * Whether the menu should overlap its trigger.\n * @type {?}\n */\nMdMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMdMenu.prototype.close;\n/** @type {?} */\nMdMenu.prototype._elementRef;\n/** @type {?} */\nMdMenu.prototype._defaultOptions;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  ConnectedPositionStrategy,\r\n  HorizontalConnectionPos,\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n  VerticalConnectionPos,\r\n} from '@angular/cdk/overlay';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {filter, RxChain} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  Self,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MdMenu} from './menu-directive';\r\nimport {throwMdMenuMissingError} from './menu-errors';\r\nimport {MdMenuItem} from './menu-item';\r\nimport {MdMenuPanel} from './menu-panel';\r\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n/**\n * Injection token that determines the scroll handling while the menu is open.\n */\nexport const MD_MENU_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('md-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\n/**\n * \\@docs-private\n */\nexport const MD_MENU_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MD_MENU_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\n/**\n * Default top padding of the menu panel.\n */\nexport const MENU_PANEL_TOP_PADDING = 8;\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\rresponsible for toggling the display of the provided menu instance.\n */\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\nprivate _portal: TemplatePortal<any>;\nprivate _overlayRef: OverlayRef | null = null;\nprivate _menuOpen: boolean = false;\nprivate _closeSubscription = Subscription.EMPTY;\nprivate _positionSubscription = Subscription.EMPTY;\nprivate _hoverSubscription = Subscription.EMPTY;\nprivate _openedByMouse: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMdMenuTriggerFor(): MdMenuPanel {\r\n    return this.menu;\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMdMenuTriggerFor(v: MdMenuPanel) {\r\n    this.menu = v;\r\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMatMenuTriggerFor(): MdMenuPanel {\r\n    return this.menu;\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMatMenuTriggerFor(v: MdMenuPanel) {\r\n    this.menu = v;\r\n  }\n/**\n * @return {?}\n */\nget _matMenuTriggerFor(): MdMenuPanel {\r\n    return this.menu;\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMenuTriggerFor(v: MdMenuPanel) {\r\n    this.menu = v;\r\n  }\n/**\n * References the menu instance that the trigger is associated with.\n */\nmenu: MdMenuPanel;\n/**\n * Event emitted when the associated menu is opened.\n */\nonMenuOpen = new EventEmitter<void>();\n/**\n * Event emitted when the associated menu is closed.\n */\nonMenuClose = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _parentMenu\n * @param {?} _menuItemInstance\n * @param {?} _dir\n */\nconstructor(private _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _parentMenu: MdMenu,\nprivate _menuItemInstance: MdMenuItem,\nprivate _dir: Directionality) {\r\n\r\n    if (_menuItemInstance) {\r\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\r\n    this._checkMenu();\r\n\r\n    this.menu.close.subscribe(reason => {\r\n      this.closeMenu();\r\n\r\n      // If a click closed the menu, we should close the entire chain of nested menus.\r\n      if (reason === 'click' && this._parentMenu) {\r\n        this._parentMenu.close.emit(reason);\r\n      }\r\n    });\r\n\r\n    if (this.triggersSubmenu()) {\r\n      // Subscribe to changes in the hovered item in order to toggle the panel.\r\n      this._hoverSubscription = filter\r\n          .call(this._parentMenu.hover(), active => active === this._menuItemInstance)\r\n          .subscribe(() => {\r\n            this._openedByMouse = true;\r\n            this.openMenu();\r\n          });\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n\r\n    this._cleanUpSubscriptions();\r\n  }\n/**\n * Whether the menu is open.\n * @return {?}\n */\nget menuOpen(): boolean {\r\n    return this._menuOpen;\r\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\nget dir(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\n/**\n * Whether the menu triggers a sub-menu or a top-level one.\n * @return {?}\n */\ntriggersSubmenu(): boolean {\r\n    return !!(this._menuItemInstance && this._parentMenu);\r\n  }\n/**\n * Toggles the menu between the open and closed states.\n * @return {?}\n */\ntoggleMenu(): void {\r\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\r\n  }\n/**\n * Opens the menu.\n * @return {?}\n */\nopenMenu(): void {\r\n    if (!this._menuOpen) {\r\n      this._createOverlay().attach(this._portal);\r\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.menu.close.emit());\r\n      this._initMenu();\r\n\r\n      if (this.menu instanceof MdMenu) {\r\n        this.menu._startAnimation();\r\n      }\r\n    }\r\n  }\n/**\n * Closes the menu.\n * @return {?}\n */\ncloseMenu(): void {\r\n    if (this._overlayRef && this.menuOpen) {\r\n      this._resetMenu();\r\n      this._overlayRef.detach();\r\n      this._closeSubscription.unsubscribe();\r\n      this.menu.close.emit();\r\n\r\n      if (this.menu instanceof MdMenu) {\r\n        this.menu._resetAnimation();\r\n      }\r\n    }\r\n  }\n/**\n * Focuses the menu trigger.\n * @return {?}\n */\nfocus() {\r\n    this._element.nativeElement.focus();\r\n  }\n/**\n * This method sets the menu state to open and focuses the first item if\rthe menu was opened via the keyboard.\n * @return {?}\n */\nprivate _initMenu(): void {\r\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\r\n    this.menu.direction = this.dir;\r\n    this._setMenuElevation();\r\n    this._setIsMenuOpen(true);\r\n\r\n    // Should only set focus if opened via the keyboard, so keyboard users can\r\n    // can easily navigate menu items. According to spec, mouse users should not\r\n    // see the focus style.\r\n    if (!this._openedByMouse) {\r\n      this.menu.focusFirstItem();\r\n    }\r\n  }\n/**\n * Updates the menu elevation based on the amount of parent menus that it has.\n * @return {?}\n */\nprivate _setMenuElevation(): void {\r\n    if (this.menu.setElevation) {\r\n      let /** @type {?} */ depth = 0;\r\n      let /** @type {?} */ parentMenu = this.menu.parentMenu;\r\n\r\n      while (parentMenu) {\r\n        depth++;\r\n        parentMenu = parentMenu.parentMenu;\r\n      }\r\n\r\n      this.menu.setElevation(depth);\r\n    }\r\n  }\n/**\n * This method resets the menu when it's closed, most importantly restoring\rfocus to the menu trigger if the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _resetMenu(): void {\r\n    this._setIsMenuOpen(false);\r\n\r\n    // Focus only needs to be reset to the host element if the menu was opened\r\n    // by the keyboard and manually shifted to the first menu item.\r\n    if (!this._openedByMouse) {\r\n      this.focus();\r\n    }\r\n\r\n    this._openedByMouse = false;\r\n  }\n/**\n * @param {?} isOpen\n * @return {?}\n */\nprivate _setIsMenuOpen(isOpen: boolean): void {\r\n    this._menuOpen = isOpen;\r\n    this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\r\n\r\n    if (this.triggersSubmenu()) {\r\n      this._menuItemInstance._highlighted = isOpen;\r\n    }\r\n  }\n/**\n * This method checks that a valid instance of MdMenu has been passed into\rmdMenuTriggerFor. If not, an exception is thrown.\n * @return {?}\n */\nprivate _checkMenu() {\r\n    if (!this.menu) {\r\n      throwMdMenuMissingError();\r\n    }\r\n  }\n/**\n * This method creates the overlay from the provided menu's template and saves its\rOverlayRef so that it can be attached to the DOM when openMenu is called.\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\r\n    if (!this._overlayRef) {\r\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\r\n      const /** @type {?} */ config = this._getOverlayConfig();\r\n      this._subscribeToPositions( /** @type {?} */((config.positionStrategy as ConnectedPositionStrategy)));\r\n      this._overlayRef = this._overlay.create(config);\r\n    }\r\n\r\n    return this._overlayRef;\r\n  }\n/**\n * This method builds the configuration object needed to create the overlay, the OverlayState.\r\\@returns OverlayConfig\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayConfig {\r\n    return new OverlayConfig({\r\n      positionStrategy: this._getPosition(),\r\n      hasBackdrop: !this.triggersSubmenu(),\r\n      backdropClass: 'cdk-overlay-transparent-backdrop',\r\n      direction: this.dir,\r\n      scrollStrategy: this._scrollStrategy()\r\n    });\r\n  }\n/**\n * Listens to changes in the position of the overlay and sets the correct classes\ron the menu based on the new position. This ensures the animation origin is always\rcorrect, even if a fallback position is used for the overlay.\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy): void {\r\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\r\n      const /** @type {?} */ posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\r\n      const /** @type {?} */ posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\r\n\r\n      this.menu.setPositionClasses(posX, posY);\r\n    });\r\n  }\n/**\n * This method builds the position strategy for the overlay, so the menu is properly connected\rto the trigger.\r\\@returns ConnectedPositionStrategy\n * @return {?}\n */\nprivate _getPosition(): ConnectedPositionStrategy {\r\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\r\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\r\n\r\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\r\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\r\n\r\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\r\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\r\n    let /** @type {?} */ offsetY = 0;\r\n\r\n    if (this.triggersSubmenu()) {\r\n      // When the menu is a sub-menu, it should always align itself\r\n      // to the edges of the trigger, instead of overlapping it.\r\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\r\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\r\n\r\n      // TODO(crisbeto): this should be a function, once the overlay supports it.\r\n      // Right now it will be wrong for the fallback positions.\r\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\r\n    } else if (!this.menu.overlapTrigger) {\r\n      originY = overlayY === 'top' ? 'bottom' : 'top';\r\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\r\n    }\r\n\r\n    return this._overlay.position()\r\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\r\n        .withDirection(this.dir)\r\n        .withOffsetY(offsetY)\r\n        .withFallbackPosition(\r\n            {originX: originFallbackX, originY},\r\n            {overlayX: overlayFallbackX, overlayY})\r\n        .withFallbackPosition(\r\n            {originX, originY: originFallbackY},\r\n            {overlayX, overlayY: overlayFallbackY})\r\n        .withFallbackPosition(\r\n            {originX: originFallbackX, originY: originFallbackY},\r\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY});\r\n  }\n/**\n * Cleans up the active subscriptions.\n * @return {?}\n */\nprivate _cleanUpSubscriptions(): void {\r\n    this._closeSubscription.unsubscribe();\r\n    this._positionSubscription.unsubscribe();\r\n    this._hoverSubscription.unsubscribe();\r\n  }\n/**\n * Returns a stream that emits whenever an action that should close the menu occurs.\n * @return {?}\n */\nprivate _menuClosingActions() {\r\n    const /** @type {?} */ backdrop = /** @type {?} */(( this._overlayRef)).backdropClick();\r\n    const /** @type {?} */ parentClose = this._parentMenu ? this._parentMenu.close : observableOf(null);\r\n    const /** @type {?} */ hover = this._parentMenu ? RxChain.from(this._parentMenu.hover())\r\n        .call(filter, active => active !== this._menuItemInstance)\r\n        .call(filter, () => this._menuOpen)\r\n        .result() : observableOf(null);\r\n\r\n    return merge(backdrop, parentClose, hover);\r\n  }\n/**\n * Handles mouse presses on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleMousedown(event: MouseEvent): void {\r\n    if (!isFakeMousedownFromScreenReader(event)) {\r\n      this._openedByMouse = true;\r\n\r\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\r\n      // we should prevent focus from moving onto it via click to avoid the\r\n      // highlight from lingering on the menu item.\r\n      if (this.triggersSubmenu()) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\n/**\n * Handles key presses on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\r\n    const /** @type {?} */ keyCode = event.keyCode;\r\n\r\n    if (this.triggersSubmenu() && (\r\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\r\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\r\n      this.openMenu();\r\n    }\r\n  }\n/**\n * Handles click events on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: MouseEvent): void {\r\n    if (this.triggersSubmenu()) {\r\n      // Stop event propagation to avoid closing the parent menu.\r\n      event.stopPropagation();\r\n      this.openMenu();\r\n    } else {\r\n      this.toggleMenu();\r\n    }\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `[md-menu-trigger-for], [mat-menu-trigger-for],\r\n             [mdMenuTriggerFor], [matMenuTriggerFor]`,\r\n  host: {\r\n    'aria-haspopup': 'true',\r\n    '(mousedown)': '_handleMousedown($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(click)': '_handleClick($event)',\r\n  },\r\n  exportAs: 'mdMenuTrigger, matMenuTrigger'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_MENU_SCROLL_STRATEGY, ] }, ]},\n{type: MdMenu, decorators: [{ type: Optional }, ]},\n{type: MdMenuItem, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedMdMenuTriggerFor': [{ type: Input, args: ['md-menu-trigger-for', ] },],\n'_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for', ] },],\n'_matMenuTriggerFor': [{ type: Input, args: ['matMenuTriggerFor', ] },],\n'menu': [{ type: Input, args: ['mdMenuTriggerFor', ] },],\n'onMenuOpen': [{ type: Output },],\n'onMenuClose': [{ type: Output },],\n};\n}\n\nfunction MdMenuTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuTrigger.ctorParameters;\n/** @type {?} */\nMdMenuTrigger.propDecorators;\n/** @type {?} */\nMdMenuTrigger.prototype._portal;\n/** @type {?} */\nMdMenuTrigger.prototype._overlayRef;\n/** @type {?} */\nMdMenuTrigger.prototype._menuOpen;\n/** @type {?} */\nMdMenuTrigger.prototype._closeSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._positionSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._hoverSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._openedByMouse;\n/**\n * References the menu instance that the trigger is associated with.\n * @type {?}\n */\nMdMenuTrigger.prototype.menu;\n/**\n * Event emitted when the associated menu is opened.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuOpen;\n/**\n * Event emitted when the associated menu is closed.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuClose;\n/** @type {?} */\nMdMenuTrigger.prototype._overlay;\n/** @type {?} */\nMdMenuTrigger.prototype._element;\n/** @type {?} */\nMdMenuTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdMenuTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdMenuTrigger.prototype._parentMenu;\n/** @type {?} */\nMdMenuTrigger.prototype._menuItemInstance;\n/** @type {?} */\nMdMenuTrigger.prototype._dir;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {MdMenu, MD_MENU_DEFAULT_OPTIONS} from './menu-directive';\r\nimport {MdMenuItem} from './menu-item';\r\nimport {MdMenuTrigger, MD_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\r\nimport {MdRippleModule} from '@angular/material/core';\nexport class MdMenuModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    OverlayModule,\r\n    CommonModule,\r\n    MdRippleModule,\r\n    MdCommonModule,\r\n  ],\r\n  exports: [MdMenu, MdMenuItem, MdMenuTrigger, MdCommonModule],\r\n  declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\r\n  providers: [\r\n    MD_MENU_SCROLL_STRATEGY_PROVIDER,\r\n    {\r\n      provide: MD_MENU_DEFAULT_OPTIONS,\r\n      useValue: {\r\n        overlapTrigger: true,\r\n        xPosition: 'after',\r\n        yPosition: 'below',\r\n      },\r\n    }\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MD_MENU_SCROLL_STRATEGY,fadeInItems,transformMenu,MdMenuModule,MdMenu,MdMenuDefaultOptions,MD_MENU_DEFAULT_OPTIONS,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY,MAT_MENU_DEFAULT_OPTIONS,MatMenu,MatMenuDefaultOptions,MatMenuItem,MatMenuModule,MatMenuPanel,MatMenuTrigger} from './public_api';\n\nexport {MdMenuItemBase as ɵa,_MdMenuItemMixinBase as ɵb} from './menu-item';\nexport {MD_MENU_SCROLL_STRATEGY_PROVIDER as ɵd,MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵc} from './menu-trigger';","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  animate,\r\n  AnimationTriggerMetadata,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n} from '@angular/animations';\n/**\n * This animation transforms the select's overlay panel on and off the page.\r\rWhen the panel is attached to the DOM, it expands its width by the amount of padding, scales it\rup to 100% on the Y axis, fades in its border, and translates slightly up and to the\rside to ensure the option text correctly overlaps the trigger text.\r\rWhen the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\r\n  state('showing', style({\r\n    opacity: 1,\r\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\r\n    transform: 'scaleY(1)'\r\n  })),\r\n  state('showing-multiple', style({\r\n    opacity: 1,\r\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\r\n    transform: 'scaleY(1)'\r\n  })),\r\n  transition('void => *', [\r\n    style({\r\n      opacity: 0,\r\n      minWidth: '100%',\r\n      transform: 'scaleY(0)'\r\n    }),\r\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\r\n  ]),\r\n  transition('* => void', [\r\n    animate('250ms 100ms linear', style({opacity: 0}))\r\n  ])\r\n]);\n/**\n * This animation fades in the background color and text content of the\rselect's options. It is time delayed to occur 100ms after the overlay\rpanel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\r\n  state('showing', style({opacity: 1})),\r\n  transition('void => showing', [\r\n    style({opacity: 0}),\r\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\r\n  ])\r\n]);\r\n","\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\rafter initialization.\r\\@docs-private\n * @return {?}\n */\nexport function getMdSelectDynamicMultipleError(): Error {\r\n  return Error('Cannot change `multiple` mode of select after initialization.');\r\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\rin `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\rresetting the value.\r\\@docs-private\n * @return {?}\n */\nexport function getMdSelectNonArrayValueError(): Error {\r\n  return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\r\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\rused to determine if a value corresponds to an option. Note that whether the function\ractually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nexport function getMdSelectNonFunctionValueError(): Error {\r\n  return Error('Cannot assign a non-function value to `compareWith`.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Optional,\r\n  QueryList,\r\n  Renderer2,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport {MATERIAL_COMPATIBILITY_MODE, MdLine, MdLineSetter} from '@angular/material/core';\r\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\n/**\n * \\@docs-private\n */\nexport class MdListBase {}\r\nexport const /** @type {?} */ _MdListMixinBase = mixinDisableRipple(MdListBase);\n/**\n * \\@docs-private\n */\nexport class MdListItemBase {}\r\nexport const /** @type {?} */ _MdListItemMixinBase = mixinDisableRipple(MdListItemBase);\n/**\n * Divider between items within a list.\n */\nexport class MdListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-divider, mat-divider',\r\n  host: {\r\n    'role': 'separator',\r\n    'aria-orientation': 'horizontal'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListDivider.ctorParameters;\n}\n\n/**\n * A Material Design list component.\n */\nexport class MdList extends _MdListMixinBase implements CanDisableRipple {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\r\n  host: {'role': 'list'},\r\n  template: '<ng-content></ng-content>',\r\n  styleUrls: ['list.css'],\r\n  inputs: ['disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdList.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-list, mat-list',\r\n  host: {'class': 'mat-list'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-nav-list, mat-nav-list',\r\n  host: {'class': 'mat-nav-list'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-divider, mat-divider',\r\n  host: {'class': 'mat-divider'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-list-avatar], [mat-list-avatar], [mdListAvatar], [matListAvatar]',\r\n  host: {'class': 'mat-list-avatar'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-list-icon], [mat-list-icon], [mdListIcon], [matListIcon]',\r\n  host: {'class': 'mat-list-icon'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-subheader], [mat-subheader], [mdSubheader], [matSubheader]',\r\n  host: {'class': 'mat-subheader'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListSubheaderCssMatStyler.ctorParameters;\n}\n\n/**\n * An item within a Material Design list.\n */\nexport class MdListItem extends _MdListItemMixinBase implements AfterContentInit, CanDisableRipple {\nprivate _lineSetter: MdLineSetter;\nprivate _isNavList: boolean = false;\r\n\r\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MdListAvatarCssMatStyler) {\r\n    if (avatar != null) {\r\n      this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\r\n    } else {\r\n      this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\r\n    }\r\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _list\n * @param {?} navList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _list: MdList,\r\n               navList: MdNavListCssMatStyler) {\r\n    super();\r\n    this._isNavList = !!navList;\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\r\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\n_isRippleDisabled() {\r\n    return !this._isNavList || this.disableRipple || this._list.disableRipple;\r\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\r\n    this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\r\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\r\n    this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\r\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\r\n  host: {\r\n    'role': 'listitem',\r\n    'class': 'mat-list-item',\r\n    '(focus)': '_handleFocus()',\r\n    '(blur)': '_handleBlur()',\r\n  },\r\n  inputs: ['disableRipple'],\r\n  templateUrl: 'list-item.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdList, decorators: [{ type: Optional }, ]},\n{type: MdNavListCssMatStyler, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MdListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListItem.ctorParameters;\n/** @type {?} */\nMdListItem.propDecorators;\n/** @type {?} */\nMdListItem.prototype._lineSetter;\n/** @type {?} */\nMdListItem.prototype._isNavList;\n/** @type {?} */\nMdListItem.prototype._lines;\n/** @type {?} */\nMdListItem.prototype._renderer;\n/** @type {?} */\nMdListItem.prototype._element;\n/** @type {?} */\nMdListItem.prototype._list;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {SPACE} from '@angular/cdk/keycodes';\r\nimport {RxChain, startWith, switchMap} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Renderer2,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  MATERIAL_COMPATIBILITY_MODE,\r\n  MdLine,\r\n  MdLineSetter,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n} from '@angular/material/core';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * \\@docs-private\n */\nexport class MdSelectionListBase {}\r\nexport const /** @type {?} */ _MdSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MdSelectionListBase));\n/**\n * \\@docs-private\n */\nexport class MdListOptionBase {}\r\nexport const /** @type {?} */ _MdListOptionMixinBase = mixinDisableRipple(MdListOptionBase);\r\n\r\n/** Event emitted by a selection-list whenever the state of an option is changed. */\r\nexport interface MdSelectionListOptionEvent {\r\n  option: MdListOption;\r\n}\r\n\r\nconst /** @type {?} */ FOCUSED_STYLE: string = 'mat-list-item-focus';\n/**\n * Component for list-options of selection-list. Each list-option can automatically\rgenerate a checkbox and can put current item into the selectionModel of selection-list\rif the current item is checked.\n */\nexport class MdListOption extends _MdListOptionMixinBase\r\n    implements AfterContentInit, OnDestroy, FocusableOption, CanDisableRipple {\nprivate _lineSetter: MdLineSetter;\nprivate _selected: boolean = false;\nprivate _disabled: boolean = false;\n/**\n * Whether the option has focus.\n */\n_hasFocus: boolean = false;\r\n\r\n   _lines: QueryList<MdLine>;\n/**\n * Whether the label should appear before or after the checkbox. Defaults to 'after'\n */\ncheckboxPosition: 'before' | 'after' = 'after';\n/**\n * Value of the option\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.selectionList && this.selectionList.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the option is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n/**\n * Emitted when the option is focused.\n */\nonFocus = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is selected.\n */\nselectChange = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is deselected.\n */\ndeselected = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is destroyed.\n */\ndestroyed = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _changeDetector\n * @param {?} selectionList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _changeDetector: ChangeDetectorRef,\npublic selectionList: MdSelectionList) {\r\n    super();\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\r\n\r\n    if (this.selectionList.disabled) {\r\n      this.disabled = true;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\r\n    this.destroyed.emit({option: this});\r\n  }\n/**\n * Toggles the selection state of the option.\n * @return {?}\n */\ntoggle(): void {\r\n    this.selected = !this.selected;\r\n    this.selectionList.selectedOptions.toggle(this);\r\n    this._changeDetector.markForCheck();\r\n  }\n/**\n * Allows for programmatic focusing of the option.\n * @return {?}\n */\nfocus(): void {\r\n    this._element.nativeElement.focus();\r\n    this.onFocus.emit({option: this});\r\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\n_isRippleDisabled() {\r\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\r\n  }\n/**\n * @return {?}\n */\n_handleClick() {\r\n    if (!this.disabled) {\r\n      this.toggle();\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\r\n    this._hasFocus = true;\r\n    this._renderer.addClass(this._element.nativeElement, FOCUSED_STYLE);\r\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\r\n    this._renderer.removeClass(this._element.nativeElement, FOCUSED_STYLE);\r\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-list-option, mat-list-option',\r\n  inputs: ['disableRipple'],\r\n  host: {\r\n    'role': 'option',\r\n    'class': 'mat-list-item mat-list-option',\r\n    '(focus)': '_handleFocus()',\r\n    '(blur)': '_handleBlur()',\r\n    '(click)': '_handleClick()',\r\n    'tabindex': '-1',\r\n    '[class.mat-list-item-disabled]': 'disabled',\r\n    '[attr.aria-selected]': 'selected.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n  },\r\n  templateUrl: 'list-option.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdSelectionList, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => MdSelectionList), ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'checkboxPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'selected': [{ type: Input },],\n'selectChange': [{ type: Output },],\n'deselected': [{ type: Output },],\n'destroyed': [{ type: Output },],\n};\n}\n\nfunction MdListOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListOption.ctorParameters;\n/** @type {?} */\nMdListOption.propDecorators;\n/** @type {?} */\nMdListOption.prototype._lineSetter;\n/** @type {?} */\nMdListOption.prototype._selected;\n/** @type {?} */\nMdListOption.prototype._disabled;\n/**\n * Whether the option has focus.\n * @type {?}\n */\nMdListOption.prototype._hasFocus;\n/** @type {?} */\nMdListOption.prototype._lines;\n/**\n * Whether the label should appear before or after the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdListOption.prototype.checkboxPosition;\n/**\n * Value of the option\n * @type {?}\n */\nMdListOption.prototype.value;\n/**\n * Emitted when the option is focused.\n * @type {?}\n */\nMdListOption.prototype.onFocus;\n/**\n * Emitted when the option is selected.\n * @type {?}\n */\nMdListOption.prototype.selectChange;\n/**\n * Emitted when the option is deselected.\n * @type {?}\n */\nMdListOption.prototype.deselected;\n/**\n * Emitted when the option is destroyed.\n * @type {?}\n */\nMdListOption.prototype.destroyed;\n/** @type {?} */\nMdListOption.prototype._renderer;\n/** @type {?} */\nMdListOption.prototype._element;\n/** @type {?} */\nMdListOption.prototype._changeDetector;\n/** @type {?} */\nMdListOption.prototype.selectionList;\n}\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nexport class MdSelectionList extends _MdSelectionListMixinBase\r\n    implements FocusableOption, CanDisable, CanDisableRipple, AfterContentInit, OnDestroy {\n/**\n * Tab index for the selection-list.\n */\n_tabIndex = 0;\n/**\n * Subscription to all list options' onFocus events\n */\nprivate _optionFocusSubscription = Subscription.EMPTY;\n/**\n * Subscription to all list options' destroy events\n */\nprivate _optionDestroyStream = Subscription.EMPTY;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MdListOption>;\n/**\n * The option components contained within this selection-list.\n */\noptions: QueryList<MdListOption>;\n/**\n * The currently selected options.\n */\nselectedOptions: SelectionModel<MdListOption> = new SelectionModel<MdListOption>(true);\n/**\n * @param {?} _element\n */\nconstructor(private _element: ElementRef) {\r\n    super();\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\r\n    this._keyManager = new FocusKeyManager<MdListOption>(this.options).withWrap();\r\n\r\n    if (this.disabled) {\r\n      this._tabIndex = -1;\r\n    }\r\n\r\n    this._optionFocusSubscription = this._onFocusSubscription();\r\n    this._optionDestroyStream = this._onDestroySubscription();\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\r\n    this._optionDestroyStream.unsubscribe();\r\n    this._optionFocusSubscription.unsubscribe();\r\n  }\n/**\n * Focus the selection-list.\n * @return {?}\n */\nfocus() {\r\n    this._element.nativeElement.focus();\r\n  }\n/**\n * Selects all of the options.\n * @return {?}\n */\nselectAll() {\r\n    this.options.forEach(option => {\r\n      if (!option.selected) {\r\n        option.toggle();\r\n      }\r\n    });\r\n  }\n/**\n * Deselects all of the options.\n * @return {?}\n */\ndeselectAll() {\r\n    this.options.forEach(option => {\r\n      if (option.selected) {\r\n        option.toggle();\r\n      }\r\n    });\r\n  }\n/**\n * Map all the options' destroy event subscriptions and merge them into one stream.\n * @return {?}\n */\nprivate _onDestroySubscription(): Subscription {\r\n    return RxChain.from(this.options.changes)\r\n      .call(startWith, this.options)\r\n      .call(switchMap, (options: MdListOption[]) => {\r\n        return merge(...options.map(option => option.destroyed));\r\n      }).subscribe((e: MdSelectionListOptionEvent) => {\r\n        let /** @type {?} */ optionIndex: number = this.options.toArray().indexOf(e.option);\r\n        if (e.option._hasFocus) {\r\n          // Check whether the option is the last item\r\n          if (optionIndex < this.options.length - 1) {\r\n            this._keyManager.setActiveItem(optionIndex);\r\n          } else if (optionIndex - 1 >= 0) {\r\n            this._keyManager.setActiveItem(optionIndex - 1);\r\n          }\r\n        }\r\n        e.option.destroyed.unsubscribe();\r\n      });\r\n  }\n/**\n * Map all the options' onFocus event subscriptions and merge them into one stream.\n * @return {?}\n */\nprivate _onFocusSubscription(): Subscription {\r\n    return RxChain.from(this.options.changes)\r\n      .call(startWith, this.options)\r\n      .call(switchMap, (options: MdListOption[]) => {\r\n        return merge(...options.map(option => option.onFocus));\r\n      }).subscribe((e: MdSelectionListOptionEvent) => {\r\n      let /** @type {?} */ optionIndex: number = this.options.toArray().indexOf(e.option);\r\n      this._keyManager.updateActiveItemIndex(optionIndex);\r\n    });\r\n  }\n/**\n * Passes relevant key presses to our key manager.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\r\n    switch (event.keyCode) {\r\n      case SPACE:\r\n        this._toggleSelectOnFocusedOption();\r\n        // Always prevent space from scrolling the page since the list has focus\r\n        event.preventDefault();\r\n        break;\r\n      default:\r\n        this._keyManager.onKeydown(event);\r\n    }\r\n  }\n/**\n * Toggles the selected state of the currently focused option.\n * @return {?}\n */\nprivate _toggleSelectOnFocusedOption(): void {\r\n    let /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\r\n\r\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\r\n      let /** @type {?} */ focusedOption: MdListOption = this.options.toArray()[focusedIndex];\r\n\r\n      if (focusedOption) {\r\n        focusedOption.toggle();\r\n      }\r\n    }\r\n  }\n/**\n * Utility to ensure all indexes are valid.\r\r\\@param index The index to be checked.\r\\@returns True if the index is valid for our list of options.\n * @param {?} index\n * @return {?}\n */\nprivate _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.options.length;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-selection-list, mat-selection-list',\r\n  inputs: ['disabled', 'disableRipple'],\r\n  host: {\r\n    'role': 'listbox',\r\n    '[attr.tabindex]': '_tabIndex',\r\n    'class': 'mat-selection-list',\r\n    '(focus)': 'focus()',\r\n    '(keydown)': '_keydown($event)',\r\n    '[attr.aria-disabled]': 'disabled.toString()'},\r\n  template: '<ng-content></ng-content>',\r\n  styleUrls: ['list.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: ContentChildren, args: [MdListOption, ] },],\n};\n}\n\nfunction MdSelectionList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionList.ctorParameters;\n/** @type {?} */\nMdSelectionList.propDecorators;\n/**\n * Tab index for the selection-list.\n * @type {?}\n */\nMdSelectionList.prototype._tabIndex;\n/**\n * Subscription to all list options' onFocus events\n * @type {?}\n */\nMdSelectionList.prototype._optionFocusSubscription;\n/**\n * Subscription to all list options' destroy events\n * @type {?}\n */\nMdSelectionList.prototype._optionDestroyStream;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdSelectionList.prototype._keyManager;\n/**\n * The option components contained within this selection-list.\n * @type {?}\n */\nMdSelectionList.prototype.options;\n/**\n * The currently selected options.\n * @type {?}\n */\nMdSelectionList.prototype.selectedOptions;\n/** @type {?} */\nMdSelectionList.prototype._element;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {\r\n  MdCommonModule,\r\n  MdLineModule,\r\n  MdPseudoCheckboxModule,\r\n  MdRippleModule,\r\n} from '@angular/material/core';\r\nimport {\r\n  MdDividerCssMatStyler,\r\n  MdList,\r\n  MdListAvatarCssMatStyler,\r\n  MdListCssMatStyler,\r\n  MdListDivider,\r\n  MdListIconCssMatStyler,\r\n  MdListItem,\r\n  MdListSubheaderCssMatStyler,\r\n  MdNavListCssMatStyler,\r\n} from './list';\r\nimport {MdListOption, MdSelectionList} from './selection-list';\nexport class MdListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdLineModule, MdRippleModule, MdCommonModule, MdPseudoCheckboxModule, CommonModule],\r\n  exports: [\r\n    MdList,\r\n    MdListItem,\r\n    MdListDivider,\r\n    MdListAvatarCssMatStyler,\r\n    MdLineModule,\r\n    MdCommonModule,\r\n    MdListIconCssMatStyler,\r\n    MdListCssMatStyler,\r\n    MdNavListCssMatStyler,\r\n    MdDividerCssMatStyler,\r\n    MdListSubheaderCssMatStyler,\r\n    MdPseudoCheckboxModule,\r\n    MdSelectionList,\r\n    MdListOption\r\n  ],\r\n  declarations: [\r\n    MdList,\r\n    MdListItem,\r\n    MdListDivider,\r\n    MdListAvatarCssMatStyler,\r\n    MdListIconCssMatStyler,\r\n    MdListCssMatStyler,\r\n    MdNavListCssMatStyler,\r\n    MdDividerCssMatStyler,\r\n    MdListSubheaderCssMatStyler,\r\n    MdSelectionList,\r\n    MdListOption\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdListModule,MdListBase,_MdListMixinBase,MdListItemBase,_MdListItemMixinBase,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem,MdSelectionListBase,_MdSelectionListMixinBase,MdListOptionBase,_MdListOptionMixinBase,MdSelectionListOptionEvent,MdListOption,MdSelectionList,MatDividerCssMatStyler,MatList,MatListAvatarCssMatStyler,MatListBase,MatListCssMatStyler,MatListDivider,MatListIconCssMatStyler,MatListItem,MatListItemBase,MatListModule,MatListOption,MatListOptionBase,MatListSubheaderCssMatStyler,MatNavListCssMatStyler,MatSelectionList,MatSelectionListBase,MatSelectionListOptionEvent} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  Renderer2,\r\n  ElementRef,\r\n  Input,\r\n  ContentChildren,\r\n  QueryList,\r\n  AfterContentInit,\r\n  Directive,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport {MdLine, MdLineSetter} from '@angular/material/core';\r\nimport {coerceToNumber} from './grid-list-measure';\nexport class MdGridTile {\r\n  _rowspan: number = 1;\r\n  _colspan: number = 1;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * Amount of rows that the grid tile takes up.\n * @return {?}\n */\nget rowspan() { return this._rowspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset rowspan(value) { this._rowspan = coerceToNumber(value); }\n/**\n * Amount of columns that the grid tile takes up.\n * @return {?}\n */\nget colspan() { return this._colspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset colspan(value) { this._colspan = coerceToNumber(value); }\n/**\n * Sets the style of the grid-tile element.  Needs to be set manually to avoid\r\"Changed after checked\" errors that would occur with HostBinding.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\n_setStyle(property: string, value: any): void {\r\n    this._renderer.setStyle(this._element.nativeElement, property, value);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-grid-tile, mat-grid-tile',\r\n  host: {\r\n    'class': 'mat-grid-tile',\r\n  },\r\n  templateUrl: 'grid-tile.html',\r\n  styleUrls: ['grid-list.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowspan': [{ type: Input },],\n'colspan': [{ type: Input },],\n};\n}\n\nfunction MdGridTile_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTile.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTile.ctorParameters;\n/** @type {?} */\nMdGridTile.propDecorators;\n/** @type {?} */\nMdGridTile.prototype._rowspan;\n/** @type {?} */\nMdGridTile.prototype._colspan;\n/** @type {?} */\nMdGridTile.prototype._renderer;\n/** @type {?} */\nMdGridTile.prototype._element;\n}\n\nexport class MdGridTileText implements AfterContentInit {\n/**\n *  Helper that watches the number of lines in a text area and sets\ra class on the host element that matches the line count.\n */\n_lineSetter: MdLineSetter;\r\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\r\n  templateUrl: 'grid-tile-text.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n};\n}\n\nfunction MdGridTileText_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileText.ctorParameters;\n/** @type {?} */\nMdGridTileText.propDecorators;\n/**\n *  Helper that watches the number of lines in a text area and sets\ra class on the host element that matches the line count.\n * @type {?}\n */\nMdGridTileText.prototype._lineSetter;\n/** @type {?} */\nMdGridTileText.prototype._lines;\n/** @type {?} */\nMdGridTileText.prototype._renderer;\n/** @type {?} */\nMdGridTileText.prototype._element;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdGridAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-grid-avatar], [mat-grid-avatar], [mdGridAvatar], [matGridAvatar]',\r\n  host: {'class': 'mat-grid-avatar'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdGridTileHeaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-grid-tile-header, mat-grid-tile-header',\r\n  host: {'class': 'mat-grid-tile-header'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileHeaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileHeaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileHeaderCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdGridTileFooterCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-grid-tile-footer, mat-grid-tile-footer',\r\n  host: {'class': 'mat-grid-tile-footer'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileFooterCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileFooterCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileFooterCssMatStyler.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {QueryList} from '@angular/core';\r\nimport {MdGridTile} from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\rin the grid. This is necessary (rather than just rendering the tiles in normal document flow)\rbecause the tiles can have a rowspan.\r\rThe positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\rlarge enough to accommodate it so that the tiles still render in the same order in which they\rare given.\r\rThe basis of the algorithm is the use of an array to track the already placed tiles. Each\relement of the array corresponds to a column, and the value indicates how many cells in that\rcolumn are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\rdecrements each value in the tracking array (indicating that the column is one cell closer to\rbeing free).\r\r\\@docs-private\n */\nexport class TileCoordinator {\n/**\n * Tracking array (see class description).\n */\ntracker: number[];\n/**\n * Index at which the search for the next gap will start.\n */\ncolumnIndex: number = 0;\n/**\n * The current row index.\n */\nrowIndex: number = 0;\n/**\n * Gets the total number of rows occupied by tiles\n * @return {?}\n */\nget rowCount(): number { return this.rowIndex + 1; }\n/**\n * Gets the total span of rows occupied by tiles.\rEx: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n * @return {?}\n */\nget rowspan() {\r\n    let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\r\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\r\n    // add the difference to the rowcount\r\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\r\n  }\n/**\n * The computed (row, col) position of each tile (the output).\n */\npositions: TilePosition[];\n/**\n * @param {?} numColumns\n * @param {?} tiles\n */\nconstructor(numColumns: number, tiles: QueryList<MdGridTile>) {\r\n    this.tracker = new Array(numColumns);\r\n    this.tracker.fill(0, 0, this.tracker.length);\r\n\r\n    this.positions = tiles.map(tile => this._trackTile(tile));\r\n  }\n/**\n * Calculates the row and col position of a tile.\n * @param {?} tile\n * @return {?}\n */\nprivate _trackTile(tile: MdGridTile): TilePosition {\r\n    // Find a gap large enough for this tile.\r\n    let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\r\n\r\n    // Place tile in the resulting gap.\r\n    this._markTilePosition(gapStartIndex, tile);\r\n\r\n    // The next time we look for a gap, the search will start at columnIndex, which should be\r\n    // immediately after the tile that has just been placed.\r\n    this.columnIndex = gapStartIndex + tile.colspan;\r\n\r\n    return new TilePosition(this.rowIndex, gapStartIndex);\r\n  }\n/**\n * Finds the next available space large enough to fit the tile.\n * @param {?} tileCols\n * @return {?}\n */\nprivate _findMatchingGap(tileCols: number): number {\r\n    if (tileCols > this.tracker.length) {\r\n      throw Error(`md-grid-list: tile with colspan ${tileCols} is wider than ` +\r\n                      `grid with cols=\"${this.tracker.length}\".`);\r\n    }\r\n\r\n    // Start index is inclusive, end index is exclusive.\r\n    let /** @type {?} */ gapStartIndex = -1;\r\n    let /** @type {?} */ gapEndIndex = -1;\r\n\r\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\r\n    do {\r\n      // If we've reached the end of the row, go to the next row.\r\n      if (this.columnIndex + tileCols > this.tracker.length) {\r\n        this._nextRow();\r\n        continue;\r\n      }\r\n\r\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\r\n\r\n      // If there are no more empty spaces in this row at all, move on to the next row.\r\n      if (gapStartIndex == -1) {\r\n        this._nextRow();\r\n        continue;\r\n      }\r\n\r\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\r\n\r\n      // If a gap large enough isn't found, we want to start looking immediately after the current\r\n      // gap on the next iteration.\r\n      this.columnIndex = gapStartIndex + 1;\r\n\r\n      // Continue iterating until we find a gap wide enough for this tile.\r\n    } while (gapEndIndex - gapStartIndex < tileCols);\r\n    return gapStartIndex;\r\n  }\n/**\n * Move \"down\" to the next row.\n * @return {?}\n */\nprivate _nextRow(): void {\r\n    this.columnIndex = 0;\r\n    this.rowIndex++;\r\n\r\n    // Decrement all spaces by one to reflect moving down one row.\r\n    for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\r\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\r\n    }\r\n  }\n/**\n * Finds the end index (exclusive) of a gap given the index from which to start looking.\rThe gap ends when a non-zero value is found.\n * @param {?} gapStartIndex\n * @return {?}\n */\nprivate _findGapEndIndex(gapStartIndex: number): number {\r\n    for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\r\n      if (this.tracker[i] != 0) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    // The gap ends with the end of the row.\r\n    return this.tracker.length;\r\n  }\n/**\n * Update the tile tracker to account for the given tile in the given space.\n * @param {?} start\n * @param {?} tile\n * @return {?}\n */\nprivate _markTilePosition(start: number, tile: MdGridTile): void {\r\n    for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\r\n      this.tracker[start + i] = tile.rowspan;\r\n    }\r\n  }\r\n}\n\nfunction TileCoordinator_tsickle_Closure_declarations() {\n/**\n * Tracking array (see class description).\n * @type {?}\n */\nTileCoordinator.prototype.tracker;\n/**\n * Index at which the search for the next gap will start.\n * @type {?}\n */\nTileCoordinator.prototype.columnIndex;\n/**\n * The current row index.\n * @type {?}\n */\nTileCoordinator.prototype.rowIndex;\n/**\n * The computed (row, col) position of each tile (the output).\n * @type {?}\n */\nTileCoordinator.prototype.positions;\n}\n\n/**\n * Simple data structure for tile position (row, col).\r\\@docs-private\n */\nexport class TilePosition {\n/**\n * @param {?} row\n * @param {?} col\n */\nconstructor(public row: number,\npublic col: number) {}\r\n}\n\nfunction TilePosition_tsickle_Closure_declarations() {\n/** @type {?} */\nTilePosition.prototype.row;\n/** @type {?} */\nTilePosition.prototype.col;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {MdGridList} from './grid-list';\r\nimport {MdGridTile} from './grid-tile';\r\nimport {TileCoordinator} from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\rTile Coordinator.\r\\@docs-private\n * @abstract\n */\nexport abstract class TileStyler {\r\n  _gutterSize: string;\r\n  _rows: number = 0;\r\n  _rowspan: number = 0;\r\n  _cols: number;\r\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\rbecause these properties haven't been calculated by that point.\r\r\\@param gutterSize Size of the grid's gutter.\r\\@param tracker Instance of the TileCoordinator.\r\\@param cols Amount of columns in the grid.\r\\@param direction Layout direction of the grid.\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\r\n    this._gutterSize = normalizeUnits(gutterSize);\r\n    this._rows = tracker.rowCount;\r\n    this._rowspan = tracker.rowspan;\r\n    this._cols = cols;\r\n    this._direction = direction;\r\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\rUsed as a basis for other calculations.\r\\@param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\r\\@param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\r\\@return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n * @param {?} sizePercent\n * @param {?} gutterFraction\n * @return {?}\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\r\n    // Take the base size percent (as would be if evenly dividing the size between cells),\r\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\r\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\r\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\r\n    // edge evenly among the cells).\r\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\r\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\r\\@param offset Number of tiles that have already been rendered in the row/column.\r\\@param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\\@return Position of the tile as a CSS calc() expression.\n * @param {?} baseSize\n * @param {?} offset\n * @return {?}\n */\ngetTilePosition(baseSize: string, offset: number): string {\r\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\r\n    // row/column (offset).\r\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\r\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\r\\@param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\\@param span The tile's rowspan or colspan.\r\\@return Size of the tile as a CSS calc() expression.\n * @param {?} baseSize\n * @param {?} span\n * @return {?}\n */\ngetTileSize(baseSize: string, span: number): string {\r\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\r\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\r\\@param tile Tile to which to apply the styling.\r\\@param rowIndex Index of the tile's row.\r\\@param colIndex Index of the tile's column.\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\r\n    // Percent of the available horizontal space that one column takes up.\r\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\r\n\r\n    // Fraction of the vertical gutter size that each column takes up.\r\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\r\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\r\n\r\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\r\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\r\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\r\n               gutterWidth: number) {\r\n    // Base horizontal size of a column.\r\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\r\n\r\n    // The width and horizontal position of each tile is always calculated the same way, but the\r\n    // height and vertical position depends on the rowMode.\r\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\r\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\r\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\r\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\r\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\r\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\r\\@param tileHeight Height of the tile.\n * @param {?} tileHeight\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\r\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\r\n  }\n/**\n * Sets the vertical placement of the tile in the list.\rThis method will be implemented by each type of TileStyler.\r\\@docs-private\n * @abstract\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\r\n                        gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\rThis method can be implemented by each type of TileStyler.\r\\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] | null { return null; }\n/**\n * Called when the tile styler is swapped out with a different one. To be used for cleanup.\r\\@param list Grid list that the styler was attached to.\r\\@docs-private\n * @abstract\n * @param {?} list\n * @return {?}\n */\nreset(list: MdGridList) {}\r\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\rExample <md-grid-list cols=\"3\" rowHeight=\"100px\">\r\\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\r\n    super.init(gutterSize, tracker, cols, direction);\r\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\r\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\r\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\r\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\r\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\r\n    return [\r\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\r\n    ];\r\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MdGridList) {\r\n    list._setListStyle(['height', null]);\r\n\r\n    list._tiles.forEach(tile => {\r\n      tile._setStyle('top', null);\r\n      tile._setStyle('height', null);\r\n    });\r\n  }\r\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\rfor the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\r\\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n/**\n * Ratio width:height given by user to determine row height.\n */\nrowHeightRatio: number;\r\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\r\n    super();\r\n    this._parseRatio(value);\r\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\r\n               gutterWidth: number): void {\r\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\r\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\r\n\r\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\r\n    // a percentage-based value for these properties is applied versus the *width* of the\r\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\r\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\r\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\r\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\r\n    return [\r\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\r\n    ];\r\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MdGridList) {\r\n    list._setListStyle(['padding-bottom', null]);\r\n\r\n    list._tiles.forEach(tile => {\r\n      tile._setStyle('margin-top', null);\r\n      tile._setStyle('padding-top', null);\r\n    });\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\r\n    const /** @type {?} */ ratioParts = value.split(':');\r\n\r\n    if (ratioParts.length !== 2) {\r\n      throw Error(`md-grid-list: invalid ratio given for row-height: \"${value}\"`);\r\n    }\r\n\r\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\r\n  }\r\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\rIn other words, the row height will reflect the total height of the container divided\rby the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\r\r\\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\r\n    // Percent of the available vertical space that one row takes up.\r\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\r\n\r\n    // Fraction of the horizontal gutter size that each column takes up.\r\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\r\n\r\n    // Base vertical size of a column.\r\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\r\n\r\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\r\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\r\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MdGridList) {\r\n    list._tiles.forEach(tile => {\r\n      tile._setStyle('top', null);\r\n      tile._setStyle('height', null);\r\n    });\r\n  }\r\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\r\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  AfterContentChecked,\r\n  OnInit,\r\n  Input,\r\n  ContentChildren,\r\n  QueryList,\r\n  Renderer2,\r\n  ElementRef,\r\n  Optional,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport {MdGridTile} from './grid-tile';\r\nimport {TileCoordinator} from './tile-coordinator';\r\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {\r\n  coerceToString,\r\n  coerceToNumber,\r\n} from './grid-list-measure';\r\n\r\n\r\n// TODO(kara): Conditional (responsive) column count / row size.\r\n// TODO(kara): Re-layout on window resize / media change (debounced).\r\n// TODO(kara): gridTileHeader and gridTileFooter.\r\n\r\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\r- Number value (ex: \"100px\"):  sets a fixed row height to that value\r- Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\r- \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _dir: Directionality) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\r\n    const /** @type {?} */ newValue = coerceToString(value);\r\n\r\n    if (newValue !== this._rowHeight) {\r\n      this._rowHeight = newValue;\r\n      this._setTileStyler(this._rowHeight);\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    this._checkCols();\r\n    this._checkRowHeight();\r\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\rto run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\r\n    this._layoutTiles();\r\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\r\n    if (!this.cols) {\r\n      throw Error(`md-grid-list: must pass in number of columns. ` +\r\n                  `Example: <md-grid-list cols=\"3\">`);\r\n    }\r\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\r\n    if (!this._rowHeight) {\r\n      this._setTileStyler('1:1');\r\n    }\r\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @param {?} rowHeight\n * @return {?}\n */\nprivate _setTileStyler(rowHeight: string): void {\r\n    if (this._tileStyler) {\r\n      this._tileStyler.reset(this);\r\n    }\r\n\r\n    if (rowHeight === MD_FIT_MODE) {\r\n      this._tileStyler = new FitTileStyler();\r\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\r\n      this._tileStyler = new RatioTileStyler(rowHeight);\r\n    } else {\r\n      this._tileStyler = new FixedTileStyler(rowHeight);\r\n    }\r\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\r\n    const /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\r\n    const /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\r\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\r\n\r\n    this._tiles.forEach((tile, index) => {\r\n      const /** @type {?} */ pos = tracker.positions[index];\r\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\r\n    });\r\n\r\n    this._setListStyle(this._tileStyler.getComputedHeight());\r\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string | null] | null): void {\r\n    if (style) {\r\n      this._renderer.setStyle(this._element.nativeElement, style[0], style[1]);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-grid-list, mat-grid-list',\r\n  templateUrl: 'grid-list.html',\r\n  styleUrls: ['grid-list.css'],\r\n  host: {\r\n    'class': 'mat-grid-list',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\r- Number value (ex: \"100px\"):  sets a fixed row height to that value\r- Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\r- \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdLineModule, MdCommonModule} from '@angular/material/core';\r\nimport {\r\n  MdGridTile, MdGridTileText, MdGridTileFooterCssMatStyler,\r\n  MdGridTileHeaderCssMatStyler, MdGridAvatarCssMatStyler\r\n} from './grid-tile';\r\nimport {MdGridList} from './grid-list';\nexport class MdGridListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdLineModule, MdCommonModule],\r\n  exports: [\r\n    MdGridList,\r\n    MdGridTile,\r\n    MdGridTileText,\r\n    MdLineModule,\r\n    MdCommonModule,\r\n    MdGridTileHeaderCssMatStyler,\r\n    MdGridTileFooterCssMatStyler,\r\n    MdGridAvatarCssMatStyler\r\n  ],\r\n  declarations: [\r\n    MdGridList,\r\n    MdGridTile,\r\n    MdGridTileText,\r\n    MdGridTileHeaderCssMatStyler,\r\n    MdGridTileFooterCssMatStyler,\r\n    MdGridAvatarCssMatStyler\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridListModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdGridTile,MdGridListModule,MdGridList,MatGridList,MatGridListModule,MatGridTile} from './public_api';\n\nexport {MdGridAvatarCssMatStyler as ɵb,MdGridTileFooterCssMatStyler as ɵd,MdGridTileHeaderCssMatStyler as ɵc,MdGridTileText as ɵa} from './grid-tile';","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, ElementRef, Input, AfterViewInit, DoCheck} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit, DoCheck {\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n */\nprivate _previousValue: string;\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\r\n    this._minRows = value;\r\n    this._setMinHeight();\r\n  }\n/**\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\r\n    this._maxRows = value;\r\n    this._setMaxHeight();\r\n  }\n/**\n * @return {?}\n */\nget _matAutosizeMinRows() { return this.minRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMinRows(v) { this.minRows = v; }\n/**\n * @return {?}\n */\nget _matAutosizeMaxRows() { return this.maxRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMaxRows(v) { this.maxRows = v; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n * @param {?} _platform\n */\nconstructor(private _elementRef: ElementRef,\nprivate _platform: Platform) {}\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\r\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\r\n        `${this.minRows * this._cachedLineHeight}px` : null;\r\n\r\n    if (minHeight)  {\r\n      this._setTextareaStyle('minHeight', minHeight);\r\n    }\r\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\r\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\r\n        `${this.maxRows * this._cachedLineHeight}px` : null;\r\n\r\n    if (maxHeight) {\r\n      this._setTextareaStyle('maxHeight', maxHeight);\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\r\n    if (this._platform.isBrowser) {\r\n      this._cacheTextareaLineHeight();\r\n      this.resizeToFitContent();\r\n    }\r\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\r\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\r\n    textarea.style[property] = value;\r\n  }\n/**\n * Cache the height of a single-row textarea.\r\rWe need to know how large a single \"row\" of a textarea is in order to apply minRows and\rmaxRows. For the initial version, we will assume that the height of a single line in the\rtextarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\r\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\r\n\r\n    // Use a clone element because we have to override some styles.\r\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\r\n    textareaClone.rows = 1;\r\n\r\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\r\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\r\n    // would affect the height.\r\n    textareaClone.style.position = 'absolute';\r\n    textareaClone.style.visibility = 'hidden';\r\n    textareaClone.style.border = 'none';\r\n    textareaClone.style.padding = '0';\r\n    textareaClone.style.height = '';\r\n    textareaClone.style.minHeight = '';\r\n    textareaClone.style.maxHeight = '';\r\n\r\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\r\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\r\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\r\n    // to hidden. This ensures that there is no invalid calculation of the line height.\r\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\r\n    textareaClone.style.overflow = 'hidden'; /** @type {?} */((\r\n\r\n    textarea.parentNode)).appendChild(textareaClone);\r\n    this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */((\r\n    textarea.parentNode)).removeChild(textareaClone);\r\n\r\n    // Min and max heights have to be re-calculated if the cached line height changes\r\n    this._setMinHeight();\r\n    this._setMaxHeight();\r\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\r\n    this.resizeToFitContent();\r\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\r\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\r\n    const /** @type {?} */ value = textarea.value;\r\n\r\n    // Only resize of the value changed since these calculations can be expensive.\r\n    if (value === this._previousValue) {\r\n      return;\r\n    }\r\n\r\n    // Reset the textarea height to auto in order to shrink back to its default size.\r\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\r\n    textarea.style.height = 'auto';\r\n    textarea.style.overflow = 'hidden';\r\n\r\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\r\n    textarea.style.height = `${textarea.scrollHeight}px`;\r\n    textarea.style.overflow = '';\r\n\r\n    this._previousValue = value;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `textarea[md-autosize], textarea[mdTextareaAutosize],\r\n             textarea[mat-autosize], textarea[matTextareaAutosize]`,\r\n  exportAs: 'mdTextareaAutosize, matTextareaAutosize',\r\n  host: {\r\n    // Textarea elements that have the directive applied should have a single row by default.\r\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\r\n    'rows': '1',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Platform, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input, args: ['mdAutosizeMinRows', ] },],\n'maxRows': [{ type: Input, args: ['mdAutosizeMaxRows', ] },],\n'_matAutosizeMinRows': [{ type: Input, args: ['matAutosizeMinRows', ] },],\n'_matAutosizeMaxRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n * @type {?}\n */\nMdTextareaAutosize.prototype._previousValue;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n/** @type {?} */\nMdTextareaAutosize.prototype._platform;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMdInputUnsupportedTypeError(type: string): Error {\r\n  return Error(`Input type \"${type}\" isn't supported by mdInput.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Renderer2,\r\n  Self,\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {Platform, getSupportedInputTypes} from '@angular/cdk/platform';\r\nimport {getMdInputUnsupportedTypeError} from './input-errors';\r\nimport {\r\n  defaultErrorStateMatcher,\r\n  ErrorOptions,\r\n  ErrorStateMatcher,\r\n  MD_ERROR_GLOBAL_OPTIONS\r\n} from '@angular/material/core';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdFormFieldControl} from '@angular/material/form-field';\r\n\r\n// Invalid input type. Using one of these will throw an MdInputUnsupportedTypeError.\r\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\r\n  'button',\r\n  'checkbox',\r\n  'color',\r\n  'file',\r\n  'hidden',\r\n  'image',\r\n  'radio',\r\n  'range',\r\n  'reset',\r\n  'submit'\r\n];\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Directive that allows a native input to work inside a `MdFormField`.\n */\nexport class MdInput implements MdFormFieldControl<any>, OnChanges, OnDestroy, DoCheck {\n/**\n * Variables used as cache for getters and setters.\n */\nprotected _type = 'text';\r\n  protected _disabled = false;\r\n  protected _required = false;\r\n  protected _id: string;\r\n  protected _uid = `md-input-${nextUniqueId++}`;\r\n  protected _errorOptions: ErrorOptions;\r\n  protected _previousNativeValue = this.value;\n/**\n * Whether the input is focused.\n */\nfocused = false;\n/**\n * Whether the input is in an error state.\n */\nerrorState = false;\n/**\n * The aria-describedby attribute on the input for improved a11y.\n */\n_ariaDescribedby: string;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\rneeds to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * A name for this control that can be used by `md-form-field`.\n */\ncontrolType = 'mat-input';\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) { this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n */\nplaceholder: string = '';\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\r\n    this._type = value || 'text';\r\n    this._validateType();\r\n\r\n    // When using Angular inputs, developers are no longer able to set the properties on the native\r\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\r\n    // with the native property. Textarea elements don't support the type property or attribute.\r\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\r\n      this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\r\n    }\r\n  }\n/**\n * A function used to control when error messages are shown.\n */\nerrorStateMatcher: ErrorStateMatcher;\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) {\r\n    if (value !== this.value) {\r\n      this._elementRef.nativeElement.value = value;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  protected _neverEmptyInputTypes = [\r\n    'date',\r\n    'datetime',\r\n    'datetime-local',\r\n    'month',\r\n    'time',\r\n    'week'\r\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} ngControl\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} errorOptions\n */\nconstructor(protected _elementRef: ElementRef,\r\n              protected _renderer: Renderer2,\r\n              protected _platform: Platform,\npublic ngControl: NgControl,\r\n               protected _parentForm: NgForm,\r\n               protected _parentFormGroup: FormGroupDirective,\r\n                errorOptions: ErrorOptions) {\r\n\r\n    // Force setter to be called in case id was not specified.\r\n    this.id = this.id;\r\n    this._errorOptions = errorOptions ? errorOptions : {};\r\n    this.errorStateMatcher = this._errorOptions.errorStateMatcher || defaultErrorStateMatcher;\r\n\r\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\r\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\r\n    // exists on iOS, we only bother to install the listener on iOS.\r\n    if (_platform.IOS) {\r\n      _renderer.listen(_elementRef.nativeElement, 'keyup', (event: Event) => {\r\n        let el = event.target as HTMLInputElement;\r\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\r\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\r\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\r\n          // `0, 0` seems to completely fix it.\r\n          el.setSelectionRange(1, 1);\r\n          el.setSelectionRange(0, 0);\r\n        }\r\n      });\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnChanges() {\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this.stateChanges.complete();\r\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\r\n    if (this.ngControl) {\r\n      // We need to re-evaluate this on every change detection cycle, because there are some\r\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\r\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\r\n      this._updateErrorState();\r\n    } else {\r\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\r\n      // changes to the native `value` property in order to update the floating label.\r\n      this._dirtyCheckNativeValue();\r\n    }\r\n  }\n/**\n * @return {?}\n */\nfocus() { this._elementRef.nativeElement.focus(); }\n/**\n * Callback for the cases where the focused state of the input changes.\n * @param {?} isFocused\n * @return {?}\n */\n_focusChanged(isFocused: boolean) {\r\n    if (isFocused !== this.focused) {\r\n      this.focused = isFocused;\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_onInput() {\r\n    // This is a noop function and is used to let Angular know whenever the value changes.\r\n    // Angular will run a new change detection each time the `input` event has been dispatched.\r\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\r\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\r\n    // value changes and will not disappear.\r\n    // Listening to the input event wouldn't be necessary when the input is using the\r\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\r\n  }\n/**\n * Re-evaluates the error state. This is only relevant with \\@angular/forms.\n * @return {?}\n */\nprotected _updateErrorState() {\r\n    const /** @type {?} */ oldState = this.errorState;\r\n    const /** @type {?} */ ngControl = this.ngControl;\r\n    const /** @type {?} */ parent = this._parentFormGroup || this._parentForm;\r\n    const /** @type {?} */ newState = ngControl && this.errorStateMatcher( /** @type {?} */((ngControl.control as FormControl)), parent);\r\n\r\n    if (newState !== oldState) {\r\n      this.errorState = newState;\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Does some manual dirty checking on the native input `value` property.\n * @return {?}\n */\nprotected _dirtyCheckNativeValue() {\r\n    const /** @type {?} */ newValue = this.value;\r\n\r\n    if (this._previousNativeValue !== newValue) {\r\n      this._previousNativeValue = newValue;\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprotected _validateType() {\r\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\r\n      throw getMdInputUnsupportedTypeError(this._type);\r\n    }\r\n  }\n/**\n * Checks whether the input type is one of the types that are never empty.\n * @return {?}\n */\nprotected _isNeverEmpty() {\r\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\r\n  }\n/**\n * Checks whether the input is invalid based on the native validation.\n * @return {?}\n */\nprotected _isBadInput() {\r\n    // The `validity` property won't be present on platform-server.\r\n    // let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\r\n    // return validity && validity.badInput;\r\n    return false;\r\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprotected _isTextarea() {\r\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\r\n\r\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\r\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\r\n    // DOM closer.\r\n    let /** @type {?} */ nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\r\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\r\n  }\n/**\n * @return {?}\n */\nget empty(): boolean {\r\n    return !this._isNeverEmpty() &&\r\n        (this.value == null || this.value === '') &&\r\n        // Check if the input contains bad input. If so, we know that it only appears empty because\r\n        // the value failed to parse. From the user's perspective it is not empty.\r\n        // TODO(mmalerba): Add e2e test for bad input case.\r\n        !this._isBadInput();\r\n  }\n/**\n * @return {?}\n */\nget shouldPlaceholderFloat(): boolean { return this.focused || !this.empty; }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @return {?}\n */\nonContainerClick() { this.focus(); }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\r\n  host: {\r\n    'class': 'mat-input-element mat-form-field-autofill-control',\r\n    // Native input properties that are overwritten by Angular inputs need to be synced with\r\n    // the native input element. Otherwise property bindings for those don't work.\r\n    '[attr.id]': 'id',\r\n    '[placeholder]': 'placeholder',\r\n    '[disabled]': 'disabled',\r\n    '[required]': 'required',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '(blur)': '_focusChanged(false)',\r\n    '(focus)': '_focusChanged(true)',\r\n    '(input)': '_onInput()',\r\n  },\r\n  providers: [{provide: MdFormFieldControl, useExisting: MdInput}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'errorStateMatcher': [{ type: Input },],\n'value': [{ type: Input },],\n};\n}\n\nfunction MdInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInput.ctorParameters;\n/** @type {?} */\nMdInput.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInput.prototype._type;\n/** @type {?} */\nMdInput.prototype._disabled;\n/** @type {?} */\nMdInput.prototype._required;\n/** @type {?} */\nMdInput.prototype._id;\n/** @type {?} */\nMdInput.prototype._uid;\n/** @type {?} */\nMdInput.prototype._errorOptions;\n/** @type {?} */\nMdInput.prototype._previousNativeValue;\n/**\n * Whether the input is focused.\n * @type {?}\n */\nMdInput.prototype.focused;\n/**\n * Whether the input is in an error state.\n * @type {?}\n */\nMdInput.prototype.errorState;\n/**\n * The aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInput.prototype._ariaDescribedby;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\rneeds to run change detection.\n * @type {?}\n */\nMdInput.prototype.stateChanges;\n/**\n * A name for this control that can be used by `md-form-field`.\n * @type {?}\n */\nMdInput.prototype.controlType;\n/**\n * Placeholder attribute of the element.\n * @type {?}\n */\nMdInput.prototype.placeholder;\n/**\n * A function used to control when error messages are shown.\n * @type {?}\n */\nMdInput.prototype.errorStateMatcher;\n/** @type {?} */\nMdInput.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInput.prototype._elementRef;\n/** @type {?} */\nMdInput.prototype._renderer;\n/** @type {?} */\nMdInput.prototype._platform;\n/** @type {?} */\nMdInput.prototype.ngControl;\n/** @type {?} */\nMdInput.prototype._parentForm;\n/** @type {?} */\nMdInput.prototype._parentFormGroup;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MdFormFieldModule} from '@angular/material/form-field';\r\nimport {MdTextareaAutosize} from './autosize';\r\nimport {MdInput} from './input';\nexport class MdInputModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  declarations: [\r\n    MdInput,\r\n    MdTextareaAutosize,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MdFormFieldModule,\r\n    PlatformModule,\r\n  ],\r\n  exports: [\r\n    // We re-export the `MdFormFieldModule` since `MdInput` will almost always be used together with\r\n    // `MdFormField`.\r\n    MdFormFieldModule,\r\n    MdInput,\r\n    MdTextareaAutosize,\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdInputModule,MdTextareaAutosize,MdInput,getMdInputUnsupportedTypeError,MatInput,MatInputModule,MatTextareaAutosize} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n  PositionStrategy,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {ComponentPortal} from '@angular/cdk/portal';\r\nimport {first} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter, MATERIAL_COMPATIBILITY_MODE} from '@angular/material/core';\r\nimport {MdDialog, MdDialogRef} from '@angular/material/dialog';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MdCalendar} from './calendar';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\nimport {MdDatepickerInput} from './datepicker-input';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n */\nexport const MD_DATEPICKER_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('md-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\n/**\n * \\@docs-private\n */\nexport const MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MD_DATEPICKER_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\rMdCalendar directly as the content so we can control the initial focus. This also gives us a\rplace to put additional features of the popup that are not part of the calendar itself in the\rfuture. (e.g. confirmation buttons).\r\\@docs-private\n */\nexport class MdDatepickerContent<D> implements AfterContentInit {\r\n  datepicker: MdDatepicker<D>;\r\n\r\n   _calendar: MdCalendar<D>;\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._calendar._focusActiveCell();\r\n  }\n/**\n * Handles keydown event on datepicker content.\r\\@param event The event.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ESCAPE) {\r\n      this.datepicker.close();\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-datepicker-content, mat-datepicker-content',\r\n  templateUrl: 'datepicker-content.html',\r\n  styleUrls: ['datepicker-content.css'],\r\n  host: {\r\n    'class': 'mat-datepicker-content',\r\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n    '(keydown)': '_handleKeydown($event)',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_calendar': [{ type: ViewChild, args: [MdCalendar, ] },],\n};\n}\n\nfunction MdDatepickerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerContent.ctorParameters;\n/** @type {?} */\nMdDatepickerContent.propDecorators;\n/** @type {?} */\nMdDatepickerContent.prototype.datepicker;\n/** @type {?} */\nMdDatepickerContent.prototype._calendar;\n}\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nexport class MdDatepicker<D> implements OnDestroy {\n/**\n * The date to open the calendar to initially.\n * @return {?}\n */\nget startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nset startAt(date: D | null) { this._startAt = coerceDateProperty(this._dateAdapter, date); }\nprivate _startAt: D | null;\n/**\n * The view that the calendar should start in.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\rthan a popup and elements have more padding to allow for bigger touch targets.\n */\ntouchUi = false;\n/**\n * Whether the datepicker pop-up should be disabled.\n * @return {?}\n */\nget disabled() {\r\n    return this._disabled === undefined ? this._datepickerInput.disabled : this._disabled;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\r\n    const /** @type {?} */ newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.next(newValue);\r\n    }\r\n  }\nprivate _disabled: boolean;\n/**\n * Emits new selected date when selected date changes.\r\\@deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n */\nselectedChanged = new EventEmitter<D>();\n/**\n * Whether the calendar is open.\n */\nopened = false;\n/**\n * The id for the datepicker calendar.\n */\nid = `md-datepicker-${datepickerUid++}`;\n/**\n * The currently selected date.\n * @return {?}\n */\nget _selected(): D | null { return this._validSelected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _selected(value: D | null) { this._validSelected = value; }\nprivate _validSelected: D | null = null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget _minDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.min;\r\n  }\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget _maxDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.max;\r\n  }\n/**\n * @return {?}\n */\nget _dateFilter(): (date: D | null) => boolean {\r\n    return this._datepickerInput && this._datepickerInput._dateFilter;\r\n  }\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n */\nprivate _popupRef: OverlayRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n */\nprivate _dialogRef: MdDialogRef<any> | null;\n/**\n * A portal containing the calendar for this datepicker.\n */\nprivate _calendarPortal: ComponentPortal<MdDatepickerContent<D>>;\n/**\n * The element that was focused before the datepicker was opened.\n */\nprivate _focusedElementBeforeOpen: HTMLElement | null = null;\nprivate _inputSubscription = Subscription.EMPTY;\n/**\n * The input element this datepicker is associated with.\n */\n_datepickerInput: MdDatepickerInput<D>;\n/**\n * Emits when the datepicker is disabled.\n */\n_disabledChange = new Subject<boolean>();\n/**\n * @param {?} _dialog\n * @param {?} _overlay\n * @param {?} _ngZone\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _dateAdapter\n * @param {?} _dir\n * @param {?} _document\n */\nconstructor(private _dialog: MdDialog,\nprivate _overlay: Overlay,\nprivate _ngZone: NgZone,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dir: Directionality,\nprivate _document: any) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n    }\r\n  }\n/**\n * Selects the given date\n * @param {?} date\n * @return {?}\n */\n_select(date: D): void {\r\n    let /** @type {?} */ oldValue = this._selected;\r\n    this._selected = date;\r\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\r\n      this.selectedChanged.emit(date);\r\n    }\r\n  }\n/**\n * Register an input with this datepicker.\r\\@param input The datepicker input to register with this datepicker.\n * @param {?} input\n * @return {?}\n */\n_registerInput(input: MdDatepickerInput<D>): void {\r\n    if (this._datepickerInput) {\r\n      throw Error('An MdDatepicker can only be associated with a single input.');\r\n    }\r\n    this._datepickerInput = input;\r\n    this._inputSubscription =\r\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\r\n  }\n/**\n * Open the calendar.\n * @return {?}\n */\nopen(): void {\r\n    if (this.opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._datepickerInput) {\r\n      throw Error('Attempted to open an MdDatepicker with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this.opened = true;\r\n  }\n/**\n * Close the calendar.\n * @return {?}\n */\nclose(): void {\r\n    if (!this.opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n      this._calendarPortal.detach();\r\n    }\r\n    if (this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n\r\n      this._focusedElementBeforeOpen.focus();\r\n      this._focusedElementBeforeOpen = null;\r\n    }\r\n\r\n    this.opened = false;\r\n  }\n/**\n * Open the calendar as a dialog.\n * @return {?}\n */\nprivate _openAsDialog(): void {\r\n    this._dialogRef = this._dialog.open(MdDatepickerContent, {\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      viewContainerRef: this._viewContainerRef,\r\n    });\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.datepicker = this;\r\n  }\n/**\n * Open the calendar as a popup.\n * @return {?}\n */\nprivate _openAsPopup(): void {\r\n    if (!this._calendarPortal) {\r\n      this._calendarPortal = new ComponentPortal(MdDatepickerContent, this._viewContainerRef);\r\n    }\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      let /** @type {?} */ componentRef: ComponentRef<MdDatepickerContent<D>> =\r\n          this._popupRef.attach(this._calendarPortal);\r\n      componentRef.instance.datepicker = this;\r\n\r\n      // Update the position once the calendar has rendered.\r\n      first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\r\n        this._popupRef.updatePosition();\r\n      });\r\n    }\r\n\r\n    this._popupRef.backdropClick().subscribe(() => this.close());\r\n  }\n/**\n * Create the popup.\n * @return {?}\n */\nprivate _createPopup(): void {\r\n    const /** @type {?} */ overlayState = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: true,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      scrollStrategy: this._scrollStrategy()\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayState);\r\n  }\n/**\n * Create the popup PositionStrategy.\n * @return {?}\n */\nprivate _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay.position()\r\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\r\n        {originX: 'start', originY: 'bottom'},\r\n        {overlayX: 'start', overlayY: 'top'}\r\n      )\r\n      .withFallbackPosition(\r\n        { originX: 'start', originY: 'top' },\r\n        { overlayX: 'start', overlayY: 'bottom' }\r\n      )\r\n      .withFallbackPosition(\r\n        {originX: 'end', originY: 'bottom'},\r\n        {overlayX: 'end', overlayY: 'top'}\r\n      )\r\n      .withFallbackPosition(\r\n        { originX: 'end', originY: 'top' },\r\n        { overlayX: 'end', overlayY: 'bottom' }\r\n      );\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-datepicker, mat-datepicker',\r\n  template: '',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n{type: Overlay, },\n{type: NgZone, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_DATEPICKER_SCROLL_STRATEGY, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'touchUi': [{ type: Input },],\n'disabled': [{ type: Input },],\n'selectedChanged': [{ type: Output },],\n};\n}\n\nfunction MdDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepicker.ctorParameters;\n/** @type {?} */\nMdDatepicker.propDecorators;\n/** @type {?} */\nMdDatepicker.prototype._startAt;\n/**\n * The view that the calendar should start in.\n * @type {?}\n */\nMdDatepicker.prototype.startView;\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\rthan a popup and elements have more padding to allow for bigger touch targets.\n * @type {?}\n */\nMdDatepicker.prototype.touchUi;\n/** @type {?} */\nMdDatepicker.prototype._disabled;\n/**\n * Emits new selected date when selected date changes.\r\\@deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n * @type {?}\n */\nMdDatepicker.prototype.selectedChanged;\n/**\n * Whether the calendar is open.\n * @type {?}\n */\nMdDatepicker.prototype.opened;\n/**\n * The id for the datepicker calendar.\n * @type {?}\n */\nMdDatepicker.prototype.id;\n/** @type {?} */\nMdDatepicker.prototype._validSelected;\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n * @type {?}\n */\nMdDatepicker.prototype._popupRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n * @type {?}\n */\nMdDatepicker.prototype._dialogRef;\n/**\n * A portal containing the calendar for this datepicker.\n * @type {?}\n */\nMdDatepicker.prototype._calendarPortal;\n/**\n * The element that was focused before the datepicker was opened.\n * @type {?}\n */\nMdDatepicker.prototype._focusedElementBeforeOpen;\n/** @type {?} */\nMdDatepicker.prototype._inputSubscription;\n/**\n * The input element this datepicker is associated with.\n * @type {?}\n */\nMdDatepicker.prototype._datepickerInput;\n/**\n * Emits when the datepicker is disabled.\n * @type {?}\n */\nMdDatepicker.prototype._disabledChange;\n/** @type {?} */\nMdDatepicker.prototype._dialog;\n/** @type {?} */\nMdDatepicker.prototype._overlay;\n/** @type {?} */\nMdDatepicker.prototype._ngZone;\n/** @type {?} */\nMdDatepicker.prototype._viewContainerRef;\n/** @type {?} */\nMdDatepicker.prototype._scrollStrategy;\n/** @type {?} */\nMdDatepicker.prototype._dateAdapter;\n/** @type {?} */\nMdDatepicker.prototype._dir;\n/** @type {?} */\nMdDatepicker.prototype._document;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport {DateAdapter, MD_DATE_FORMATS, MdDateFormats} from '@angular/material/core';\r\nimport {MdFormField} from '@angular/material/form-field';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {MdDatepicker} from './datepicker';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nexport const /** @type {?} */ MD_DATEPICKER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdDatepickerInput),\r\n  multi: true\r\n};\r\n\r\n\r\nexport const /** @type {?} */ MD_DATEPICKER_VALIDATORS: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MdDatepickerInput),\r\n  multi: true\r\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\rinput or change event because the event may have been triggered by the user clicking on the\rcalendar popup. For consistency, we always use MdDatepickerInputEvent instead.\n */\nexport class MdDatepickerInputEvent<D> {\n/**\n * The new value for the target datepicker input.\n */\nvalue: D | null;\n/**\n * @param {?} target\n * @param {?} targetElement\n */\nconstructor(public target: MdDatepickerInput<D>,\npublic targetElement: HTMLElement) {\r\n    this.value = this.target.value;\r\n  }\r\n}\n\nfunction MdDatepickerInputEvent_tsickle_Closure_declarations() {\n/**\n * The new value for the target datepicker input.\n * @type {?}\n */\nMdDatepickerInputEvent.prototype.value;\n/** @type {?} */\nMdDatepickerInputEvent.prototype.target;\n/** @type {?} */\nMdDatepickerInputEvent.prototype.targetElement;\n}\n\n/**\n * Directive used to connect an input to a MdDatepicker.\n */\nexport class MdDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\r\n    Validator {\n/**\n * The datepicker that this input is associated with.\n * @param {?} value\n * @return {?}\n */\nset mdDatepicker(value: MdDatepicker<D>) {\r\n    this.registerDatepicker(value);\r\n  }\r\n  _datepicker: MdDatepicker<D>;\n/**\n * @param {?} value\n * @return {?}\n */\nprivate registerDatepicker(value: MdDatepicker<D>) {\r\n    if (value) {\r\n      this._datepicker = value;\r\n      this._datepicker._registerInput(this);\r\n    }\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset matDatepicker(value: MdDatepicker<D>) {\r\n    // Note that we don't set `this.mdDatepicker = value` here,\r\n    // because that line gets stripped by the JS compiler.\r\n    this.registerDatepicker(value);\r\n  }\n/**\n * @param {?} filter\n * @return {?}\n */\nset mdDatepickerFilter(filter: (date: D | null) => boolean) {\r\n    this._dateFilter = filter;\r\n    this._validatorOnChange();\r\n  }\r\n  _dateFilter: (date: D | null) => boolean;\n/**\n * @param {?} filter\n * @return {?}\n */\nset matDatepickerFilter(filter: (date: D | null) => boolean) {\r\n    this.mdDatepickerFilter = filter;\r\n  }\n/**\n * The value of the input.\n * @return {?}\n */\nget value(): D | null {\r\n    return this._value;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: D | null) {\r\n    value = coerceDateProperty(this._dateAdapter, value);\r\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n    value = this._getValidDateOrNull(value);\r\n\r\n    let /** @type {?} */ oldDate = this.value;\r\n    this._value = value;\r\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\r\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '');\r\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\r\n      this._valueChange.emit(value);\r\n    }\r\n  }\nprivate _value: D | null;\n/**\n * The minimum valid date.\n * @return {?}\n */\nget min(): D | null { return this._min; }\n/**\n * @param {?} value\n * @return {?}\n */\nset min(value: D | null) {\r\n    this._min = coerceDateProperty(this._dateAdapter, value);\r\n    this._validatorOnChange();\r\n  }\nprivate _min: D | null;\n/**\n * The maximum valid date.\n * @return {?}\n */\nget max(): D | null { return this._max; }\n/**\n * @param {?} value\n * @return {?}\n */\nset max(value: D | null) {\r\n    this._max = coerceDateProperty(this._dateAdapter, value);\r\n    this._validatorOnChange();\r\n  }\nprivate _max: D | null;\n/**\n * Whether the datepicker-input is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\r\n    const /** @type {?} */ newValue = coerceBooleanProperty(value);\r\n\r\n    if (this._disabled !== newValue) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.emit(newValue);\r\n    }\r\n  }\nprivate _disabled: boolean;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n */\ndateChange = new EventEmitter<MdDatepickerInputEvent<D>>();\n/**\n * Emits when an `input` event is fired on this `<input>`.\n */\ndateInput = new EventEmitter<MdDatepickerInputEvent<D>>();\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n */\n_valueChange = new EventEmitter<D|null>();\n/**\n * Emits when the disabled state has changed\n */\n_disabledChange = new EventEmitter<boolean>();\r\n\r\n  _onTouched = () => {};\nprivate _cvaOnChange: (value: any) => void = () => {};\nprivate _validatorOnChange = () => {};\nprivate _datepickerSubscription = Subscription.EMPTY;\nprivate _localeSubscription = Subscription.EMPTY;\n/**\n * The form control validator for whether the input parses.\n */\nprivate _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n    return this._lastValueValid ?\r\n        null : {'mdDatepickerParse': {'text': this._elementRef.nativeElement.value}};\r\n  }\n/**\n * The form control validator for the min date.\n */\nprivate _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\r\n    return (!this.min || !controlValue ||\r\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\r\n        null : {'mdDatepickerMin': {'min': this.min, 'actual': controlValue}};\r\n  }\n/**\n * The form control validator for the max date.\n */\nprivate _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\r\n    return (!this.max || !controlValue ||\r\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\r\n        null : {'mdDatepickerMax': {'max': this.max, 'actual': controlValue}};\r\n  }\n/**\n * The form control validator for the date filter.\n */\nprivate _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\r\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\r\n        null : {'mdDatepickerFilter': true};\r\n  }\n/**\n * The combined form control validator for this input.\n */\nprivate _validator: ValidatorFn | null =\r\n      Validators.compose(\r\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n/**\n * Whether the last value set on the input was valid.\n */\nprivate _lastValueValid = false;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _mdFormField\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\nprivate _mdFormField: MdFormField) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MD_DATE_FORMATS');\r\n    }\r\n\r\n    // Update the displayed date when the locale changes.\r\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n      this.value = this.value;\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    if (this._datepicker) {\r\n      this._datepickerSubscription =\r\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\r\n            this.value = selected;\r\n            this._cvaOnChange(selected);\r\n            this._onTouched();\r\n            this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n            this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n          });\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._datepickerSubscription.unsubscribe();\r\n    this._localeSubscription.unsubscribe();\r\n    this._valueChange.complete();\r\n    this._disabledChange.complete();\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\r\n    this._validatorOnChange = fn;\r\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(c) : null;\r\n  }\n/**\n * Gets the element that the datepicker popup should be connected to.\r\\@return The element to connect the popup to.\n * @return {?}\n */\ngetPopupConnectionElementRef(): ElementRef {\r\n    return this._mdFormField ? this._mdFormField.underlineRef : this._elementRef;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: D): void {\r\n    this.value = value;\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\r\n    this._cvaOnChange = fn;\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\r\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\r\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\r\n      this._datepicker.open();\r\n      event.preventDefault();\r\n    }\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n_onInput(value: string) {\r\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\r\n    date = this._getValidDateOrNull(date);\r\n    this._value = date;\r\n    this._cvaOnChange(date);\r\n    this._valueChange.emit(date);\r\n    this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\n/**\n * @return {?}\n */\n_onChange() {\r\n    this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\n/**\n * @param {?} obj The object to check.\n * @return {?}\n */\nprivate _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'input[mdDatepicker], input[matDatepicker]',\r\n  providers: [MD_DATEPICKER_VALUE_ACCESSOR, MD_DATEPICKER_VALIDATORS],\r\n  host: {\r\n    '[attr.aria-haspopup]': 'true',\r\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n    '[disabled]': 'disabled',\r\n    '(input)': '_onInput($event.target.value)',\r\n    '(change)': '_onChange()',\r\n    '(blur)': '_onTouched()',\r\n    '(keydown)': '_onKeydown($event)',\r\n  },\r\n  exportAs: 'mdDatepickerInput, matDatepickerInput',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: MdFormField, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdDatepicker': [{ type: Input },],\n'matDatepicker': [{ type: Input },],\n'mdDatepickerFilter': [{ type: Input },],\n'matDatepickerFilter': [{ type: Input },],\n'value': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n'disabled': [{ type: Input },],\n'dateChange': [{ type: Output },],\n'dateInput': [{ type: Output },],\n};\n}\n\nfunction MdDatepickerInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerInput.ctorParameters;\n/** @type {?} */\nMdDatepickerInput.propDecorators;\n/** @type {?} */\nMdDatepickerInput.prototype._datepicker;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFilter;\n/** @type {?} */\nMdDatepickerInput.prototype._value;\n/** @type {?} */\nMdDatepickerInput.prototype._min;\n/** @type {?} */\nMdDatepickerInput.prototype._max;\n/** @type {?} */\nMdDatepickerInput.prototype._disabled;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n * @type {?}\n */\nMdDatepickerInput.prototype.dateChange;\n/**\n * Emits when an `input` event is fired on this `<input>`.\n * @type {?}\n */\nMdDatepickerInput.prototype.dateInput;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n * @type {?}\n */\nMdDatepickerInput.prototype._valueChange;\n/**\n * Emits when the disabled state has changed\n * @type {?}\n */\nMdDatepickerInput.prototype._disabledChange;\n/** @type {?} */\nMdDatepickerInput.prototype._onTouched;\n/** @type {?} */\nMdDatepickerInput.prototype._cvaOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._validatorOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._datepickerSubscription;\n/** @type {?} */\nMdDatepickerInput.prototype._localeSubscription;\n/**\n * The form control validator for whether the input parses.\n * @type {?}\n */\nMdDatepickerInput.prototype._parseValidator;\n/**\n * The form control validator for the min date.\n * @type {?}\n */\nMdDatepickerInput.prototype._minValidator;\n/**\n * The form control validator for the max date.\n * @type {?}\n */\nMdDatepickerInput.prototype._maxValidator;\n/**\n * The form control validator for the date filter.\n * @type {?}\n */\nMdDatepickerInput.prototype._filterValidator;\n/**\n * The combined form control validator for this input.\n * @type {?}\n */\nMdDatepickerInput.prototype._validator;\n/**\n * Whether the last value set on the input was valid.\n * @type {?}\n */\nMdDatepickerInput.prototype._lastValueValid;\n/** @type {?} */\nMdDatepickerInput.prototype._elementRef;\n/** @type {?} */\nMdDatepickerInput.prototype._renderer;\n/** @type {?} */\nMdDatepickerInput.prototype._dateAdapter;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFormats;\n/** @type {?} */\nMdDatepickerInput.prototype._mdFormField;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  OnDestroy,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {MdDatepicker} from './datepicker';\r\nimport {MdDatepickerIntl} from './datepicker-intl';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {MATERIAL_COMPATIBILITY_MODE} from '@angular/material/core';\nexport class MdDatepickerToggle<D> implements OnChanges, OnDestroy {\nprivate _stateChanges = Subscription.EMPTY;\n/**\n * Datepicker instance that the button will toggle.\n */\ndatepicker: MdDatepicker<D>;\n/**\n * Whether the toggle button is disabled.\n * @return {?}\n */\nget disabled() {\r\n    return this._disabled === undefined ? this.datepicker.disabled : this._disabled;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\nprivate _disabled: boolean;\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n */\nconstructor(\npublic _intl: MdDatepickerIntl,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    if (changes.datepicker) {\r\n      const /** @type {?} */ datepicker: MdDatepicker<D> = changes.datepicker.currentValue;\r\n      const /** @type {?} */ datepickerDisabled = datepicker ? datepicker._disabledChange : observableOf();\r\n      const /** @type {?} */ inputDisabled = datepicker && datepicker._datepickerInput ?\r\n        datepicker._datepickerInput._disabledChange :\r\n        observableOf();\r\n\r\n      this._stateChanges.unsubscribe();\r\n      this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\r\n        .subscribe(() => this._changeDetectorRef.markForCheck());\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_open(event: Event): void {\r\n    if (this.datepicker && !this.disabled) {\r\n      this.datepicker.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-datepicker-toggle, mat-datepicker-toggle',\r\n  templateUrl: 'datepicker-toggle.html',\r\n  host: {\r\n    'class': 'mat-datepicker-toggle',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDatepickerIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'datepicker': [{ type: Input, args: ['for', ] },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdDatepickerToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerToggle.ctorParameters;\n/** @type {?} */\nMdDatepickerToggle.propDecorators;\n/** @type {?} */\nMdDatepickerToggle.prototype._stateChanges;\n/**\n * Datepicker instance that the button will toggle.\n * @type {?}\n */\nMdDatepickerToggle.prototype.datepicker;\n/** @type {?} */\nMdDatepickerToggle.prototype._disabled;\n/** @type {?} */\nMdDatepickerToggle.prototype._intl;\n/** @type {?} */\nMdDatepickerToggle.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  DateAdapter, MATERIAL_COMPATIBILITY_MODE, MD_DATE_FORMATS,\r\n  MdDateFormats\r\n} from '@angular/material/core';\r\nimport {MdCalendarCell} from './calendar-body';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\r\\@docs-private\n */\nexport class MdMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\r\n    let /** @type {?} */ oldActiveDate = this._activeDate;\r\n    this._activeDate = coerceDateProperty(this._dateAdapter, value) || this._dateAdapter.today();\r\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) {\r\n    this._selected = coerceDateProperty(this._dateAdapter, value);\r\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\r\n  }\nprivate _selected: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D | null>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MdCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\rNull if the currently selected Date is in another month.\n */\n_selectedDate: number | null;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number | null;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MD_DATE_FORMATS');\r\n    }\r\n\r\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    let weekdays = longWeekdays.map((long, i) => {\r\n      return {long, narrow: narrowWeekdays[i]};\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\r\n    this._init();\r\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\r\n    if (this._selectedDate != date) {\r\n      const /** @type {?} */ selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n      const /** @type {?} */ selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n      const /** @type {?} */ selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\r\n\r\n      this.selectedChange.emit(selectedDate);\r\n    }\r\n\r\n    this.userSelection.emit();\r\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\r\n    this._monthLabel =\r\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\r\n            .toLocaleUpperCase();\r\n\r\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate), 1);\r\n    this._firstWeekOffset =\r\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\r\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\r\n\r\n    this._createWeekCells();\r\n  }\n/**\n * Creates MdCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\r\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\r\n      if (cell == DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      let /** @type {?} */ date = this._dateAdapter.createDate(\r\n          this._dateAdapter.getYear(this.activeDate),\r\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\r\n      let /** @type {?} */ enabled = !this.dateFilter ||\r\n          this.dateFilter(date);\r\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      this._weeks[this._weeks.length - 1]\r\n          .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\r\n    }\r\n  }\n/**\n * Gets the date in this month that the given Date falls on.\rReturns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D | null): number | null {\r\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\r\n        this._dateAdapter.getDate(date) : null;\r\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\r\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\r\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-month-view',\r\n  templateUrl: 'month-view.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MdMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMonthView.ctorParameters;\n/** @type {?} */\nMdMonthView.propDecorators;\n/** @type {?} */\nMdMonthView.prototype._activeDate;\n/** @type {?} */\nMdMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMdMonthView.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMdMonthView.prototype.userSelection;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMdMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMdMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMdMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\rNull if the currently selected Date is in another month.\n * @type {?}\n */\nMdMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMdMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMdMonthView.prototype._weekdays;\n/** @type {?} */\nMdMonthView.prototype._dateAdapter;\n/** @type {?} */\nMdMonthView.prototype._dateFormats;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter, MD_DATE_FORMATS, MdDateFormats} from '@angular/material/core';\r\nimport {MdCalendarCell} from './calendar-body';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {createMissingDateImplError} from './datepicker-errors';\n/**\n * An internal component used to display a single year in the datepicker.\r\\@docs-private\n */\nexport class MdYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\r\n    let /** @type {?} */ oldActiveDate = this._activeDate;\r\n    this._activeDate = coerceDateProperty(this._dateAdapter, value) || this._dateAdapter.today();\r\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) {\r\n    this._selected = coerceDateProperty(this._dateAdapter, value);\r\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\r\n  }\nprivate _selected: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MdCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number | null;\n/**\n * The month in this year that the selected Date falls on.\rNull if the selected Date is in a different year.\n */\n_selectedMonth: number | null;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MD_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._init();\r\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\r\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(\r\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\r\n    this.selectedChange.emit(this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate), month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n\r\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\r\n        month => this._createCellForMonth(month, monthNames[month])));\r\n  }\n/**\n * Gets the month in this year that the given Date falls on.\rReturns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D | null) {\r\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\r\n        this._dateAdapter.getMonth(date) : null;\r\n  }\n/**\n * Creates an MdCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\r\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\r\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\r\n        this._dateFormats.display.monthYearA11yLabel);\r\n    return new MdCalendarCell(\r\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\r\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate), month, 1);\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\r\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-year-view, mat-year-view',\r\n  templateUrl: 'year-view.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdYearView.ctorParameters;\n/** @type {?} */\nMdYearView.propDecorators;\n/** @type {?} */\nMdYearView.prototype._activeDate;\n/** @type {?} */\nMdYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMdYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMdYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMdYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMdYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\rNull if the selected Date is in a different year.\n * @type {?}\n */\nMdYearView.prototype._selectedMonth;\n/** @type {?} */\nMdYearView.prototype._dateAdapter;\n/** @type {?} */\nMdYearView.prototype._dateFormats;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MdButtonModule} from '@angular/material/button';\r\nimport {MdDialogModule} from '@angular/material/dialog';\r\nimport {MdIconModule} from '@angular/material/icon';\r\nimport {MdCalendar} from './calendar';\r\nimport {MdCalendarBody} from './calendar-body';\r\nimport {\r\n  MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\r\n  MdDatepicker,\r\n  MdDatepickerContent,\r\n} from './datepicker';\r\nimport {MdDatepickerInput} from './datepicker-input';\r\nimport {MdDatepickerIntl} from './datepicker-intl';\r\nimport {MdDatepickerToggle} from './datepicker-toggle';\r\nimport {MdMonthView} from './month-view';\r\nimport {MdYearView} from './year-view';\nexport class MdDatepickerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    CommonModule,\r\n    MdButtonModule,\r\n    MdDialogModule,\r\n    MdIconModule,\r\n    OverlayModule,\r\n    A11yModule,\r\n  ],\r\n  exports: [\r\n    MdCalendar,\r\n    MdCalendarBody,\r\n    MdDatepicker,\r\n    MdDatepickerContent,\r\n    MdDatepickerInput,\r\n    MdDatepickerToggle,\r\n    MdMonthView,\r\n    MdYearView,\r\n  ],\r\n  declarations: [\r\n    MdCalendar,\r\n    MdCalendarBody,\r\n    MdDatepicker,\r\n    MdDatepickerContent,\r\n    MdDatepickerInput,\r\n    MdDatepickerToggle,\r\n    MdMonthView,\r\n    MdYearView,\r\n  ],\r\n  providers: [\r\n    MdDatepickerIntl,\r\n    MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\r\n  ],\r\n  entryComponents: [\r\n    MdDatepickerContent,\r\n  ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, Input} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n/** MdAccordion's display modes. */\r\nexport type MdAccordionDisplayMode = 'default' | 'flat';\n/**\n * Unique ID counter\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nexport class CdkAccordion {\n/**\n * A readonly id value to use for unique selection coordination.\n */\nreadonly id = `cdk-accordion-${nextId++}`;\n/**\n * Whether the accordion should allow multiple expanded accordion items simulateously.\n * @return {?}\n */\nget multi(): boolean { return this._multi; }\n/**\n * @param {?} multi\n * @return {?}\n */\nset multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\nprivate  _multi: boolean = false;\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\nget hideToggle(): boolean { return this._hideToggle; }\n/**\n * @param {?} show\n * @return {?}\n */\nset hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\nprivate  _hideToggle: boolean = false;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\rmodes exist:\r  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\r    panel at a different elevation from the reset of the accordion.\r flat - no spacing is placed around expanded panels, showing all panels at the same\r    elevation.\n */\ndisplayMode: MdAccordionDisplayMode = 'default';\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'cdk-accordion, [cdk-accordion]',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multi': [{ type: Input },],\n'hideToggle': [{ type: Input },],\n'displayMode': [{ type: Input },],\n};\n}\n\nfunction CdkAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkAccordion.ctorParameters;\n/** @type {?} */\nCdkAccordion.propDecorators;\n/**\n * A readonly id value to use for unique selection coordination.\n * @type {?}\n */\nCdkAccordion.prototype.id;\n/** @type {?} */\nCdkAccordion.prototype._multi;\n/** @type {?} */\nCdkAccordion.prototype._hideToggle;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\rmodes exist:\r  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\r    panel at a different elevation from the reset of the accordion.\r flat - no spacing is placed around expanded panels, showing all panels at the same\r    elevation.\n * @type {?}\n */\nCdkAccordion.prototype.displayMode;\n}\n\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MdAccordion extends CdkAccordion {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'mat-accordion, md-accordion',\r\n  host: {\r\n    class: 'mat-accordion'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAccordion.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  Injectable,\r\n  OnDestroy,\r\n  Optional,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {UniqueSelectionDispatcher} from '@angular/material/core';\r\nimport {CdkAccordion} from './accordion';\n/**\n * Used to generate unique ID for each expansion panel.\n */\nlet nextId = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\revents and attributes needed to be managed by a CdkAccordion parent.\n */\nexport class AccordionItem implements OnDestroy {\n/**\n * Event emitted every time the AccordionItem is closed.\n */\nclosed = new EventEmitter<void>();\n/**\n * Event emitted every time the AccordionItem is opened.\n */\nopened = new EventEmitter<void>();\n/**\n * Event emitted when the AccordionItem is destroyed.\n */\ndestroyed = new EventEmitter<void>();\n/**\n * The unique AccordionItem id.\n */\nreadonly id = `cdk-accordion-child-${nextId++}`;\n/**\n * Whether the AccordionItem is expanded.\n * @return {?}\n */\nget expanded(): boolean { return this._expanded; }\n/**\n * @param {?} expanded\n * @return {?}\n */\nset expanded(expanded: boolean) {\r\n    // Only emit events and update the internal value if the value changes.\r\n    if (this._expanded !== expanded) {\r\n      this._expanded = expanded;\r\n      if (expanded) {\r\n        this.opened.emit();\n/**\n * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\rthe name value is the id of the accordion.\n */\nconst accordionId = this.accordion ? this.accordion.id : this.id;\r\n        this._expansionDispatcher.notify(this.id, accordionId);\r\n      } else {\r\n        this.closed.emit();\r\n      }\r\n\r\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\r\n      // This includes cases like the open, close and toggle methods.\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\nprivate _expanded: boolean;\n/**\n * Unregister function for _expansionDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _expansionDispatcher\n */\nconstructor(\npublic accordion: CdkAccordion,\nprivate _changeDetectorRef: ChangeDetectorRef,\r\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\r\n    this._removeUniqueSelectionListener =\r\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\r\n        if (this.accordion && !this.accordion.multi &&\r\n            this.accordion.id === accordionId && this.id !== id) {\r\n          this.expanded = false;\r\n        }\r\n      });\r\n  }\n/**\n * Emits an event for the accordion item being destroyed.\n * @return {?}\n */\nngOnDestroy() {\r\n    this.destroyed.emit();\r\n    this._removeUniqueSelectionListener();\r\n  }\n/**\n * Toggles the expanded state of the accordion item.\n * @return {?}\n */\ntoggle(): void {\r\n    this.expanded = !this.expanded;\r\n  }\n/**\n * Sets the expanded state of the accordion item to false.\n * @return {?}\n */\nclose(): void {\r\n    this.expanded = false;\r\n  }\n/**\n * Sets the expanded state of the accordion item to true.\n * @return {?}\n */\nopen(): void {\r\n    this.expanded = true;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkAccordion, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'closed': [{ type: Output },],\n'opened': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'expanded': [{ type: Input },],\n};\n}\n\nfunction AccordionItem_tsickle_Closure_declarations() {\n/** @type {?} */\nAccordionItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccordionItem.ctorParameters;\n/** @type {?} */\nAccordionItem.propDecorators;\n/**\n * Event emitted every time the AccordionItem is closed.\n * @type {?}\n */\nAccordionItem.prototype.closed;\n/**\n * Event emitted every time the AccordionItem is opened.\n * @type {?}\n */\nAccordionItem.prototype.opened;\n/**\n * Event emitted when the AccordionItem is destroyed.\n * @type {?}\n */\nAccordionItem.prototype.destroyed;\n/**\n * The unique AccordionItem id.\n * @type {?}\n */\nAccordionItem.prototype.id;\n/** @type {?} */\nAccordionItem.prototype._expanded;\n/**\n * Unregister function for _expansionDispatcher *\n * @type {?}\n */\nAccordionItem.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nAccordionItem.prototype.accordion;\n/** @type {?} */\nAccordionItem.prototype._changeDetectorRef;\n/** @type {?} */\nAccordionItem.prototype._expansionDispatcher;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  forwardRef,\r\n  Host,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanDisable, mixinDisabled, UniqueSelectionDispatcher} from '@angular/material/core';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdAccordion} from './accordion';\r\nimport {AccordionItem} from './accordion-item';\n/**\n * \\@docs-private\n */\nexport class MdExpansionPanelBase extends AccordionItem {\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(accordion: MdAccordion,\r\n              _changeDetectorRef: ChangeDetectorRef,\r\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\r\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\r\n  }\r\n}\r\nexport const /** @type {?} */ _MdExpansionPanelMixinBase = mixinDisabled(MdExpansionPanelBase);\r\n\r\n/** MdExpansionPanel's states. */\r\nexport type MdExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <md-expansion-panel> component.\r\rThis component can be used as a single element to show expandable content, or as one of\rmultiple children of an element with the CdkAccordion directive attached.\r\rPlease refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanel extends _MdExpansionPanelMixinBase\r\n    implements CanDisable, OnChanges, OnDestroy {\n/**\n * Whether the toggle indicator should be hidden.\n */\nhideToggle: boolean = false;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n */\n_inputChanges = new Subject<SimpleChanges>();\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(  accordion: MdAccordion,\r\n              _changeDetectorRef: ChangeDetectorRef,\r\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\r\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\r\n    this.accordion = accordion;\r\n  }\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\r\n    if (this.accordion) {\r\n      return this.accordion.hideToggle;\r\n    }\r\n    return this.hideToggle;\r\n  }\n/**\n * Determines whether the expansion panel should have spacing between it and its siblings.\n * @return {?}\n */\n_hasSpacing(): boolean {\r\n    if (this.accordion) {\r\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\r\n    }\r\n    return false;\r\n  }\n/**\n * Gets the expanded state string.\n * @return {?}\n */\n_getExpandedState(): MdExpansionPanelState {\r\n    return this.expanded ? 'expanded' : 'collapsed';\r\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    this._inputChanges.next(changes);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._inputChanges.complete();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  styleUrls: ['./expansion-panel.css'],\r\n  selector: 'md-expansion-panel, mat-expansion-panel',\r\n  templateUrl: './expansion-panel.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled', 'expanded'],\r\n  host: {\r\n    'class': 'mat-expansion-panel',\r\n    '[class.mat-expanded]': 'expanded',\r\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\r\n  },\r\n  providers: [\r\n    {provide: AccordionItem, useExisting: forwardRef(() => MdExpansionPanel)}\r\n  ],\r\n  animations: [\r\n    trigger('bodyExpansion', [\r\n      state('collapsed', style({height: '0px', visibility: 'hidden'})),\r\n      state('expanded', style({height: '*', visibility: 'visible'})),\r\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n    ]),\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdAccordion, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'hideToggle': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanel.ctorParameters;\n/** @type {?} */\nMdExpansionPanel.propDecorators;\n/**\n * Whether the toggle indicator should be hidden.\n * @type {?}\n */\nMdExpansionPanel.prototype.hideToggle;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n * @type {?}\n */\nMdExpansionPanel.prototype._inputChanges;\n}\n\nexport class MdExpansionPanelActionRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'mat-action-row, md-action-row',\r\n  host: {\r\n    class: 'mat-action-row'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelActionRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelActionRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelActionRow.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\r\nimport {filter} from '@angular/cdk/rxjs';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  ElementRef,\r\n  Host,\r\n  Input,\r\n  OnDestroy,\r\n  Renderer2,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {EXPANSION_PANEL_ANIMATION_TIMING, MdExpansionPanel} from './expansion-panel';\n/**\n * <md-expansion-panel-header> component.\r\rThis component corresponds to the header element of an <md-expansion-panel>.\r\rPlease refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanelHeader implements OnDestroy {\nprivate _parentChangeSubscription = Subscription.EMPTY;\n/**\n * @param {?} renderer\n * @param {?} panel\n * @param {?} _element\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(\r\n    renderer: Renderer2,\npublic panel: MdExpansionPanel,\nprivate _element: ElementRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    // Since the toggle state depends on an @Input on the panel, we\r\n    // need to  subscribe and trigger change detection manually.\r\n    this._parentChangeSubscription = merge(\r\n      panel.opened,\r\n      panel.closed,\r\n      filter.call(panel._inputChanges, changes => !!(changes.hideToggle || changes.disabled))\r\n    )\r\n    .subscribe(() => this._changeDetectorRef.markForCheck());\r\n\r\n    _focusMonitor.monitor(_element.nativeElement, renderer, false);\r\n  }\n/**\n * Height of the header while the panel is expanded.\n */\nexpandedHeight: string;\n/**\n * Height of the header while the panel is collapsed.\n */\ncollapsedHeight: string;\n/**\n * Toggles the expanded state of the panel.\n * @return {?}\n */\n_toggle(): void {\r\n    if (!this.panel.disabled) {\r\n      this.panel.toggle();\r\n    }\r\n  }\n/**\n * Gets whether the panel is expanded.\n * @return {?}\n */\n_isExpanded(): boolean {\r\n    return this.panel.expanded;\r\n  }\n/**\n * Gets the expanded state string of the panel.\n * @return {?}\n */\n_getExpandedState(): string {\r\n    return this.panel._getExpandedState();\r\n  }\n/**\n * Gets the panel id.\n * @return {?}\n */\n_getPanelId(): string {\r\n    return this.panel.id;\r\n  }\n/**\n * Gets whether the expand indicator should be shown.\n * @return {?}\n */\n_showToggle(): boolean {\r\n    return !this.panel.hideToggle && !this.panel.disabled;\r\n  }\n/**\n * Handle keyup event calling to toggle() if appropriate.\n * @param {?} event\n * @return {?}\n */\n_keyup(event: KeyboardEvent) {\r\n    switch (event.keyCode) {\r\n      // Toggle for space and enter keys.\r\n      case SPACE:\r\n      case ENTER:\r\n        event.preventDefault();\r\n        this._toggle();\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._parentChangeSubscription.unsubscribe();\r\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-expansion-panel-header, mat-expansion-panel-header',\r\n  styleUrls: ['./expansion-panel-header.css'],\r\n  templateUrl: './expansion-panel-header.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'class': 'mat-expansion-panel-header',\r\n    'role': 'button',\r\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\r\n    '[attr.aria-controls]': '_getPanelId()',\r\n    '[attr.aria-expanded]': '_isExpanded()',\r\n    '[attr.aria-disabled]': 'panel.disabled',\r\n    '[class.mat-expanded]': '_isExpanded()',\r\n    '(click)': '_toggle()',\r\n    '(keyup)': '_keyup($event)',\r\n    '[@expansionHeight]': `{\r\n        value: _getExpandedState(),\r\n        params: {\r\n          collapsedHeight: collapsedHeight,\r\n          expandedHeight: expandedHeight\r\n        }\r\n    }`,\r\n  },\r\n  animations: [\r\n    trigger('indicatorRotate', [\r\n      state('collapsed', style({transform: 'rotate(0deg)'})),\r\n      state('expanded', style({transform: 'rotate(180deg)'})),\r\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n    ]),\r\n    trigger('expansionHeight', [\r\n      state('collapsed', style({\r\n        height: '{{collapsedHeight}}',\r\n      }), {\r\n        params: {collapsedHeight: '48px'},\r\n      }),\r\n      state('expanded', style({\r\n        height: '{{expandedHeight}}'\r\n      }), {\r\n        params: {expandedHeight: '64px'}\r\n      }),\r\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n    ]),\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: MdExpansionPanel, decorators: [{ type: Host }, ]},\n{type: ElementRef, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'expandedHeight': [{ type: Input },],\n'collapsedHeight': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanelHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelHeader.ctorParameters;\n/** @type {?} */\nMdExpansionPanelHeader.propDecorators;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._parentChangeSubscription;\n/**\n * Height of the header while the panel is expanded.\n * @type {?}\n */\nMdExpansionPanelHeader.prototype.expandedHeight;\n/**\n * Height of the header while the panel is collapsed.\n * @type {?}\n */\nMdExpansionPanelHeader.prototype.collapsedHeight;\n/** @type {?} */\nMdExpansionPanelHeader.prototype.panel;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._element;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._focusMonitor;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._changeDetectorRef;\n}\n\n/**\n * <md-panel-description> directive.\r\rThis direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelDescription {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-panel-description, mat-panel-description',\r\n  host : {\r\n    class: 'mat-expansion-panel-header-description'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelDescription_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelDescription.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelDescription.ctorParameters;\n}\n\n/**\n * <md-panel-title> directive.\r\rThis direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-panel-title, mat-panel-title',\r\n  host : {\r\n    class: 'mat-expansion-panel-header-title'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelTitle.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {CompatibilityModule, UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/material/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {CdkAccordion, MdAccordion} from './accordion';\r\nimport {MdExpansionPanel, MdExpansionPanelActionRow} from './expansion-panel';\r\nimport {\r\n  MdExpansionPanelDescription,\r\n  MdExpansionPanelHeader,\r\n  MdExpansionPanelTitle,\r\n} from './expansion-panel-header';\nexport class MdExpansionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CompatibilityModule, CommonModule, A11yModule],\r\n  exports: [\r\n    CdkAccordion,\r\n    MdAccordion,\r\n    MdExpansionPanel,\r\n    MdExpansionPanelActionRow,\r\n    MdExpansionPanelHeader,\r\n    MdExpansionPanelTitle,\r\n    MdExpansionPanelDescription\r\n  ],\r\n  declarations: [\r\n    CdkAccordion,\r\n    MdAccordion,\r\n    MdExpansionPanel,\r\n    MdExpansionPanelActionRow,\r\n    MdExpansionPanelHeader,\r\n    MdExpansionPanelTitle,\r\n    MdExpansionPanelDescription\r\n  ],\r\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {CdkAccordion,MdAccordion,MdAccordionDisplayMode,AccordionItem,MdExpansionPanel,MdExpansionPanelState,MdExpansionPanelActionRow,MdExpansionPanelHeader,MdExpansionPanelDescription,MdExpansionPanelTitle,MdExpansionModule,MatAccordion,MatAccordionDisplayMode,MatExpansionModule,MatExpansionPanel,MatExpansionPanelActionRow,MatExpansionPanelDescription,MatExpansionPanelHeader,MatExpansionPanelState,MatExpansionPanelTitle} from './public_api';\n\nexport {EXPANSION_PANEL_ANIMATION_TIMING as ɵc,MdExpansionPanelBase as ɵa,_MdExpansionPanelMixinBase as ɵb} from './expansion-panel';","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Optional,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {\r\n  BasePortalHost,\r\n  ComponentPortal,\r\n  PortalHostDirective,\r\n  TemplatePortal\r\n} from '@angular/cdk/portal';\r\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\r\nimport {MdDialogConfig} from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\rattached to a DomPortalHost without an origin.\r\\@docs-private\n * @return {?}\n */\nexport function throwMdDialogContentAlreadyAttachedError() {\r\n  throw Error('Attempting to attach dialog content after content is already attached');\r\n}\n/**\n * Internal component that wraps user-provided dialog content.\rAnimation is based on https://material.io/guidelines/motion/choreography.html.\r\\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n/**\n * The dialog configuration.\n */\n_config: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits when an animation state changes.\n */\n_animationStateChanged = new EventEmitter<AnimationEvent>();\n/**\n * ID of the element that should be considered as the dialog's label.\n */\n_ariaLabelledBy: string | null = null;\n/**\n * Whether the container is currently mid-animation.\n */\n_isAnimating = false;\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _changeDetectorRef\n * @param {?} _document\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _document: any) {\r\n\r\n    super();\r\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\r\\@param portal Portal to be attached as the dialog content.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    if (this._portalHost.hasAttached()) {\r\n      throwMdDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalHost.attachComponentPortal(portal);\r\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\r\\@param portal Portal to be attached as the dialog content.\n * @template C\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    if (this._portalHost.hasAttached()) {\r\n      throwMdDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalHost.attachTemplatePortal(portal);\r\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\r\n    if (!this._focusTrap) {\r\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    }\r\n\r\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\r\n    // ready in instances where change detection has to run first. To deal with this, we simply\r\n    // wait for the microtask queue to be empty.\r\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\r\n      // If we didn't find any focusable elements inside the dialog, focus the\r\n      // container so the user can't tab into other elements behind it.\r\n      if (!hasMovedFocus) {\r\n        this._elementRef.nativeElement.focus();\r\n      }\r\n    });\r\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\r\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\r\n\r\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\r\n    if (toFocus && typeof toFocus.focus === 'function') {\r\n      toFocus.focus();\r\n    }\r\n\r\n    if (this._focusTrap) {\r\n      this._focusTrap.destroy();\r\n    }\r\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\r\n    if (this._document) {\r\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\r\n    }\r\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\r\n    if (event.toState === 'enter') {\r\n      this._trapFocus();\r\n    } else if (event.toState === 'exit') {\r\n      this._restoreFocus();\r\n    }\r\n\r\n    this._animationStateChanged.emit(event);\r\n    this._isAnimating = false;\r\n  }\n/**\n * Callback, invoked when an animation on the host starts.\n * @param {?} event\n * @return {?}\n */\n_onAnimationStart(event: AnimationEvent) {\r\n    this._isAnimating = true;\r\n    this._animationStateChanged.emit(event);\r\n  }\n/**\n * Starts the dialog exit animation.\n * @return {?}\n */\n_startExitAnimation(): void {\r\n    this._state = 'exit';\r\n\r\n    // Mark the container for check so it can react if the\r\n    // view container is using OnPush change detection.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-dialog-container, mat-dialog-container',\r\n  templateUrl: 'dialog-container.html',\r\n  styleUrls: ['dialog.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  animations: [\r\n    trigger('slideDialog', [\r\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\r\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\r\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\r\n      // solves both issues.\r\n      state('enter', style({ transform: 'none', opacity: 1 })),\r\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\r\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\r\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\r\n    ])\r\n  ],\r\n  host: {\r\n    'class': 'mat-dialog-container',\r\n    'tabindex': '-1',\r\n    '[attr.role]': '_config?.role',\r\n    '[attr.aria-labelledby]': '_ariaLabelledBy',\r\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\r\n    '[@slideDialog]': '_state',\r\n    '(@slideDialog.start)': '_onAnimationStart($event)',\r\n    '(@slideDialog.done)': '_onAnimationDone($event)',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits when an animation state changes.\n * @type {?}\n */\nMdDialogContainer.prototype._animationStateChanged;\n/**\n * ID of the element that should be considered as the dialog's label.\n * @type {?}\n */\nMdDialogContainer.prototype._ariaLabelledBy;\n/**\n * Whether the container is currently mid-animation.\n * @type {?}\n */\nMdDialogContainer.prototype._isAnimating;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDialogContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMdDialogContainer.prototype._document;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\r\nimport {filter, first, RxChain} from '@angular/cdk/rxjs';\r\nimport {DialogPosition} from './dialog-config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdDialogContainer} from './dialog-container';\r\n\r\n\r\n// TODO(jelbourn): resizing\r\n\r\n// Counter for unique dialog ids.\r\nlet /** @type {?} */ uniqueId = 0;\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n */\nprivate _afterOpen = new Subject<void>();\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed = new Subject<any>();\n/**\n * Subject for notifying the user that the dialog has started closing.\n */\nprivate _beforeClose = new Subject<any>();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n * @param {?=} id\n */\nconstructor(\nprivate _overlayRef: OverlayRef,\nprivate _containerInstance: MdDialogContainer,\npublic readonly id: string = `md-dialog-${uniqueId++}`) {\r\n\r\n    // Emit when opening animation completes\r\n    RxChain.from(_containerInstance._animationStateChanged)\r\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'enter')\r\n      .call(first)\r\n      .subscribe(() => {\r\n        this._afterOpen.next();\r\n        this._afterOpen.complete();\r\n      });\r\n\r\n    // Dispose overlay when closing animation is complete\r\n    RxChain.from(_containerInstance._animationStateChanged)\r\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'exit')\r\n      .call(first)\r\n      .subscribe(() => {\r\n        this._overlayRef.dispose();\r\n        this._afterClosed.next(this._result);\r\n        this._afterClosed.complete();\r\n        this.componentInstance = null!;\r\n      });\r\n  }\n/**\n * Close the dialog.\r\\@param dialogResult Optional result to return to the dialog opener.\n * @param {?=} dialogResult\n * @return {?}\n */\nclose(dialogResult?: any): void {\r\n    this._result = dialogResult;\r\n\r\n    // Transition the backdrop in parallel to the dialog.\r\n    RxChain.from(this._containerInstance._animationStateChanged)\r\n      .call(filter, event => event.phaseName === 'start')\r\n      .call(first)\r\n      .subscribe(() => {\r\n        this._beforeClose.next(dialogResult);\r\n        this._beforeClose.complete();\r\n        this._overlayRef.detachBackdrop();\r\n      });\r\n\r\n    this._containerInstance._startExitAnimation();\r\n  }\n/**\n * Gets an observable that is notified when the dialog is finished opening.\n * @return {?}\n */\nafterOpen(): Observable<void> {\r\n    return this._afterOpen.asObservable();\r\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\r\n    return this._afterClosed.asObservable();\r\n  }\n/**\n * Gets an observable that is notified when the dialog has started closing.\n * @return {?}\n */\nbeforeClose(): Observable<any> {\r\n    return this._beforeClose.asObservable();\r\n  }\n/**\n * Gets an observable that emits when the overlay's backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\r\n    return this._overlayRef.backdropClick();\r\n  }\n/**\n * Updates the dialog's position.\r\\@param position New dialog position.\n * @param {?=} position\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\r\n    let /** @type {?} */ strategy = this._getPositionStrategy();\r\n\r\n    if (position && (position.left || position.right)) {\r\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\r\n    } else {\r\n      strategy.centerHorizontally();\r\n    }\r\n\r\n    if (position && (position.top || position.bottom)) {\r\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\r\n    } else {\r\n      strategy.centerVertically();\r\n    }\r\n\r\n    this._overlayRef.updatePosition();\r\n\r\n    return this;\r\n  }\n/**\n * Updates the dialog's width and height.\r\\@param width New width of the dialog.\r\\@param height New height of the dialog.\n * @param {?=} width\n * @param {?=} height\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\r\n    this._getPositionStrategy().width(width).height(height);\r\n    this._overlayRef.updatePosition();\r\n    return this;\r\n  }\n/**\n * Returns whether the dialog is animating.\n * @return {?}\n */\n_isAnimating(): boolean {\r\n    return this._containerInstance._isAnimating;\r\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\r\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\r\n  }\r\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n * @type {?}\n */\nMdDialogRef.prototype._afterOpen;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the dialog has started closing.\n * @type {?}\n */\nMdDialogRef.prototype._beforeClose;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n/** @type {?} */\nMdDialogRef.prototype.id;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {\r\n  BlockScrollStrategy,\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\r\nimport {startWith} from '@angular/cdk/rxjs';\r\nimport {Location} from '@angular/common';\r\nimport {\r\n  ComponentRef,\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Injector,\r\n  Optional,\r\n  SkipSelf,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport {extendObject} from '@angular/material/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {defer} from 'rxjs/observable/defer';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdDialogConfig} from './dialog-config';\r\nimport {MdDialogContainer} from './dialog-container';\r\nimport {MdDialogRef} from './dialog-ref';\r\n\r\n\r\nexport const /** @type {?} */ MD_DIALOG_DATA = new InjectionToken<any>('MdDialogData');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n */\nexport const MD_DIALOG_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('md-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => BlockScrollStrategy {\r\n  return () => overlay.scrollStrategies.block();\r\n}\n/**\n * \\@docs-private\n */\nexport const MD_DIALOG_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MD_DIALOG_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget openDialogs(): MdDialogRef<any>[] {\r\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\r\n  }\n/**\n * Stream that emits when a dialog has been opened.\n * @return {?}\n */\nget afterOpen(): Subject<MdDialogRef<any>> {\r\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\r\n  }\n/**\n * @return {?}\n */\nget _afterAllClosed() {\r\n    const /** @type {?} */ parent = this._parentDialog;\r\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\r\n  }\n/**\n * Stream that emits when all open dialog have finished closing.\rWill emit on subscribe if there are no open dialogs to begin with.\n */\nafterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\r\n      this._afterAllClosed :\r\n      startWith.call(this._afterAllClosed, undefined));\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} location\n * @param {?} _scrollStrategy\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\r\n       location: Location,\nprivate _scrollStrategy,\nprivate _parentDialog: MdDialog) {\r\n\r\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\r\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\r\n    // the user is using the `HashLocationStrategy`).\r\n    if (!_parentDialog && location) {\r\n      location.subscribe(() => this.closeAll());\r\n    }\r\n  }\n/**\n * Opens a modal dialog containing the given component.\r\\@param componentOrTemplateRef Type of the component to load into the dialog,\r    or a TemplateRef to instantiate as the dialog content.\r\\@param config Extra configuration options.\r\\@returns Reference to the newly-opened dialog.\n * @template T\n * @param {?} componentOrTemplateRef\n * @param {?=} config\n * @return {?}\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n          config?: MdDialogConfig): MdDialogRef<T> {\r\n\r\n    const /** @type {?} */ inProgressDialog = this.openDialogs.find(dialog => dialog._isAnimating());\r\n\r\n    // If there's a dialog that is in the process of being opened, return it instead.\r\n    if (inProgressDialog) {\r\n      return inProgressDialog;\r\n    }\r\n\r\n    config = _applyConfigDefaults(config);\r\n\r\n    if (config.id && this.getDialogById(config.id)) {\r\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\r\n    }\r\n\r\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\r\n    const /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n    const /** @type {?} */ dialogRef =\r\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\r\n\r\n    if (!this.openDialogs.length) {\r\n      document.addEventListener('keydown', this._boundKeydown);\r\n    }\r\n\r\n    this.openDialogs.push(dialogRef);\r\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\r\n    this.afterOpen.next(dialogRef);\r\n\r\n    return dialogRef;\r\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\r\n    let /** @type {?} */ i = this.openDialogs.length;\r\n\r\n    while (i--) {\r\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\r\n      // runs on the next microtask, in addition to modifying the array as we're going\r\n      // through it. We loop through all of them and call close without assuming that\r\n      // they'll be removed from the list instantaneously.\r\n      this.openDialogs[i].close();\r\n    }\r\n  }\n/**\n * Finds an open dialog by its id.\r\\@param id ID to use when looking up the dialog.\n * @param {?} id\n * @return {?}\n */\ngetDialogById(id: string): MdDialogRef<any> | undefined {\r\n    return this.openDialogs.find(dialog => dialog.id === id);\r\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\r\\@param config The dialog configuration.\r\\@returns A promise resolving to the OverlayRef for the created overlay.\n * @param {?} config\n * @return {?}\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\r\n    const /** @type {?} */ overlayState = this._getOverlayState(config);\r\n    return this._overlay.create(overlayState);\r\n  }\n/**\n * Creates an overlay state from a dialog config.\r\\@param dialogConfig The dialog configuration.\r\\@returns The overlay configuration.\n * @param {?} dialogConfig\n * @return {?}\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayConfig {\r\n    const /** @type {?} */ state = new OverlayConfig({\r\n      positionStrategy: this._overlay.position().global(),\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: dialogConfig.panelClass,\r\n      hasBackdrop: dialogConfig.hasBackdrop,\r\n      direction: dialogConfig.direction\r\n    });\r\n\r\n    if (dialogConfig.backdropClass) {\r\n      state.backdropClass = dialogConfig.backdropClass;\r\n    }\r\n\r\n    return state;\r\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\r\\@param overlay Reference to the dialog's underlying overlay.\r\\@param config The dialog configuration.\r\\@returns A promise resolving to a ComponentRef for the attached container.\n * @param {?} overlay\n * @param {?} config\n * @return {?}\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\r\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, config.viewContainerRef);\r\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\r\n    containerRef.instance._config = config;\r\n\r\n    return containerRef.instance;\r\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\r\\@param componentOrTemplateRef The type of component being loaded into the dialog,\r    or a TemplateRef to instantiate as the content.\r\\@param dialogContainer Reference to the wrapping MdDialogContainer.\r\\@param overlayRef Reference to the overlay in which the dialog resides.\r\\@param config The dialog configuration.\r\\@returns A promise resolving to the MdDialogRef that should be returned to the user.\n * @template T\n * @param {?} componentOrTemplateRef\n * @param {?} dialogContainer\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachDialogContent<T>(\r\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n      dialogContainer: MdDialogContainer,\r\n      overlayRef: OverlayRef,\r\n      config: MdDialogConfig): MdDialogRef<T> {\r\n\r\n    // Create a reference to the dialog we're creating in order to give the user a handle\r\n    // to modify and close it.\r\n    const /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer, config.id);\r\n\r\n    // When the dialog backdrop is clicked, we want to close it.\r\n    if (config.hasBackdrop) {\r\n      overlayRef.backdropClick().subscribe(() => {\r\n        if (!dialogRef.disableClose) {\r\n          dialogRef.close();\r\n        }\r\n      });\r\n    }\r\n\r\n    if (componentOrTemplateRef instanceof TemplateRef) {\r\n      dialogContainer.attachTemplatePortal(\r\n        new TemplatePortal<T>(componentOrTemplateRef, /** @type {?} */(( null)), /** @type {?} */((\r\n          <any>{ $implicit: config.data, dialogRef }))));\r\n    } else {\r\n      const /** @type {?} */ injector = this._createInjector<T>(config, dialogRef, dialogContainer);\r\n      const /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\r\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\r\n      dialogRef.componentInstance = contentRef.instance;\r\n    }\r\n\r\n    dialogRef\r\n      .updateSize(config.width, config.height)\r\n      .updatePosition(config.position);\r\n\r\n    return dialogRef;\r\n  }\n/**\n * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\rof a dialog to close itself and, optionally, to return a value.\r\\@param config Config object that is used to construct the dialog.\r\\@param dialogRef Reference to the dialog.\r\\@param container Dialog container element that wraps all of the contents.\r\\@returns The custom injector that can be used inside the dialog.\n * @template T\n * @param {?} config\n * @param {?} dialogRef\n * @param {?} dialogContainer\n * @return {?}\n */\nprivate _createInjector<T>(\r\n      config: MdDialogConfig,\r\n      dialogRef: MdDialogRef<T>,\r\n      dialogContainer: MdDialogContainer): PortalInjector {\r\n\r\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const /** @type {?} */ injectionTokens = new WeakMap();\r\n\r\n    injectionTokens.set(MdDialogRef, dialogRef);\r\n    injectionTokens.set(MdDialogContainer, dialogContainer);\r\n    injectionTokens.set(MD_DIALOG_DATA, config.data);\r\n\r\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\r\n  }\n/**\n * Removes a dialog from the array of open dialogs.\r\\@param dialogRef Dialog to be removed.\n * @param {?} dialogRef\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\r\n    const /** @type {?} */ index = this.openDialogs.indexOf(dialogRef);\r\n\r\n    if (index > -1) {\r\n      this.openDialogs.splice(index, 1);\r\n\r\n      // no open dialogs are left, call next on afterAllClosed Subject\r\n      if (!this.openDialogs.length) {\r\n        this._afterAllClosed.next();\r\n        document.removeEventListener('keydown', this._boundKeydown);\r\n      }\r\n    }\r\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\rtop dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\r\n    const /** @type {?} */ topDialog = this.openDialogs[this.openDialogs.length - 1];\r\n    const /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\r\n\r\n    if (event.keyCode === ESCAPE && canClose) {\r\n      topDialog.close();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_SCROLL_STRATEGY, ] }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Stream that emits when all open dialog have finished closing.\rWill emit on subscribe if there are no open dialogs to begin with.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._scrollStrategy;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\r\\@param config Config to be modified.\r\\@returns The new configuration object.\n * @param {?=} config\n * @return {?}\n */\nfunction _applyConfigDefaults(config?: MdDialogConfig): MdDialogConfig {\r\n  return extendObject(new MdDialogConfig(), config);\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\r\nimport {MdDialogRef} from './dialog-ref';\r\nimport {MdDialogContainer} from './dialog-container';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose implements OnChanges {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\r\n\r\n   _matDialogClose: any;\r\n   _mdDialogClose: any;\r\n   _matDialogCloseResult: any;\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    const /** @type {?} */ proxiedChange = changes._matDialogClose || changes._mdDialogClose ||\r\n        changes._matDialogCloseResult;\r\n\r\n    if (proxiedChange) {\r\n      this.dialogResult = proxiedChange.currentValue;\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `button[md-dialog-close], button[mat-dialog-close],\r\n             button[mdDialogClose], button[matDialogClose]`,\r\n  host: {\r\n    '(click)': 'dialogRef.close(dialogResult)',\r\n    '[attr.aria-label]': 'ariaLabel',\r\n    'type': 'button', // Prevents accidental form submits.\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['md-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['matDialogClose', ] },],\n'_mdDialogClose': [{ type: Input, args: ['mdDialogClose', ] },],\n'_matDialogCloseResult': [{ type: Input, args: ['mat-dialog-close', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMdDialogClose.prototype.dialogResult;\n/** @type {?} */\nMdDialogClose.prototype._matDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._mdDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._matDialogCloseResult;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle implements OnInit {\r\n   id = `md-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: MdDialogContainer) { }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    if (this._container && !this._container._ariaLabelledBy) {\r\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-dialog-title], [mat-dialog-title], [mdDialogTitle], [matDialogTitle]',\r\n  host: {\r\n    'class': 'mat-dialog-title',\r\n    '[id]': 'id',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n/** @type {?} */\nMdDialogTitle.propDecorators;\n/** @type {?} */\nMdDialogTitle.prototype.id;\n/** @type {?} */\nMdDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content,\r\n             [mdDialogContent], [matDialogContent]`,\r\n  host: {'class': 'mat-dialog-content'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\rStays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions,\r\n             [mdDialogActions], [matDialogActions]`,\r\n  host: {'class': 'mat-dialog-actions'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MdDialog, MD_DIALOG_SCROLL_STRATEGY_PROVIDER} from './dialog';\r\nimport {MdDialogContainer} from './dialog-container';\r\nimport {\r\n  MdDialogClose,\r\n  MdDialogContent,\r\n  MdDialogTitle,\r\n  MdDialogActions\r\n} from './dialog-content-directives';\nexport class MdDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    PortalModule,\r\n    A11yModule,\r\n    MdCommonModule,\r\n  ],\r\n  exports: [\r\n    MdDialogContainer,\r\n    MdDialogClose,\r\n    MdDialogTitle,\r\n    MdDialogContent,\r\n    MdDialogActions,\r\n    MdCommonModule,\r\n  ],\r\n  declarations: [\r\n    MdDialogContainer,\r\n    MdDialogClose,\r\n    MdDialogTitle,\r\n    MdDialogActions,\r\n    MdDialogContent,\r\n  ],\r\n  providers: [\r\n    MdDialog,\r\n    MD_DIALOG_SCROLL_STRATEGY_PROVIDER,\r\n  ],\r\n  entryComponents: [MdDialogContainer],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdDialogModule,MD_DIALOG_DATA,MD_DIALOG_SCROLL_STRATEGY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER,MdDialog,throwMdDialogContentAlreadyAttachedError,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef,MAT_DIALOG_DATA,MAT_DIALOG_SCROLL_STRATEGY,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MatDialog,MatDialogActions,MatDialogClose,MatDialogConfig,MatDialogContainer,MatDialogContent,MatDialogModule,MatDialogRef,MatDialogTitle} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {catchOperator, doOperator, finallyOperator, map, RxChain, share} from '@angular/cdk/rxjs';\r\nimport {Injectable, Optional, SecurityContext, SkipSelf} from '@angular/core';\r\nimport {Http} from '@angular/http';\r\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {forkJoin} from 'rxjs/observable/forkJoin';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\n/**\n * Returns an exception to be thrown in the case when attempting to\rload an icon with a name that cannot be found.\r\\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMdIconNameNotFoundError(iconName: string): Error {\r\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\r\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\r`<md-icon>` without including \\@angular/http.\r\\@docs-private\n * @return {?}\n */\nexport function getMdIconNoHttpProviderError(): Error {\r\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\r\n               'Please include the HttpModule from @angular/http in your app imports.');\r\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\r\\@param url URL that was attempted to be sanitized.\r\\@docs-private\n * @param {?} url\n * @return {?}\n */\nexport function getMdIconFailedToSanitizeError(url: SafeResourceUrl): Error {\r\n  return Error(`The URL provided to MdIconRegistry was not trusted as a resource URL ` +\r\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\r\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\r\\@docs-private\n */\nclass SvgIconConfig {\r\n  svgElement: SVGElement | null = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\r\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <md-icon> component.\r- Registers icon URLs by namespace and name.\r- Registers icon set URLs by namespace.\r- Registers aliases for CSS classes, for use with icon fonts.\r- Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\rMultiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\rThe default 'material-icons' value assumes that the material icon font has been loaded as\rdescribed at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\r\\@param iconName Name under which the icon should be registered.\r\\@param url\n * @param {?} iconName\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\r\n    return this.addSvgIconInNamespace('', iconName, url);\r\n  }\n/**\n * Registers an icon by URL in the specified namespace.\r\\@param namespace Namespace in which the icon should be registered.\r\\@param iconName Name under which the icon should be registered.\r\\@param url\n * @param {?} namespace\n * @param {?} iconName\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\r\n    const /** @type {?} */ key = iconKey(namespace, iconName);\r\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\r\n    return this;\r\n  }\n/**\n * Registers an icon set by URL in the default namespace.\r\\@param url\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\r\n    return this.addSvgIconSetInNamespace('', url);\r\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\r\\@param namespace Namespace in which to register the icon set.\r\\@param url\n * @param {?} namespace\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\r\n    const /** @type {?} */ config = new SvgIconConfig(url);\r\n    const /** @type {?} */ configNamespace = this._iconSetConfigs.get(namespace);\r\n\r\n    if (configNamespace) {\r\n      configNamespace.push(config);\r\n    } else {\r\n      this._iconSetConfigs.set(namespace, [config]);\r\n    }\r\n    return this;\r\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\rcomponent with the alias as the fontSet input will cause the class name to be applied\rto the <md-icon> element.\r\r\\@param alias Alias for the font.\r\\@param className Class name override to be used instead of the alias.\n * @param {?} alias\n * @param {?=} className\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\r\n    this._fontCssClassesByAlias.set(alias, className);\r\n    return this;\r\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\rregisterFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\r\n    return this._fontCssClassesByAlias.get(alias) || alias;\r\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\rhave a fontSet input value, and is not loading an icon by name or URL.\r\r\\@param className\n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\r\n    this._defaultFontSetClass = className;\r\n    return this;\r\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\rhave a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\r\n    return this._defaultFontSetClass;\r\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\rThe response from the URL may be cached so this will not always cause an HTTP request, but\rthe produced element will always be a new copy of the originally fetched icon. (That is,\rit will not contain any modifications made to elements previously returned).\r\r\\@param safeUrl URL from which to fetch the SVG icon.\n * @param {?} safeUrl\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\r\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (!url) {\r\n      throw getMdIconFailedToSanitizeError(safeUrl);\r\n    }\r\n\r\n    let /** @type {?} */ cachedIcon = this._cachedIconsByUrl.get(url);\r\n\r\n    if (cachedIcon) {\r\n      return observableOf(cloneSvg(cachedIcon));\r\n    }\r\n\r\n    return RxChain.from(this._loadSvgIconFromConfig(new SvgIconConfig(url)))\r\n      .call(doOperator, svg => this._cachedIconsByUrl.set( /** @type {?} */((url)), svg))\r\n      .call(map, svg => cloneSvg(svg))\r\n      .result();\r\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\rand namespace. The icon must have been previously registered with addIcon or addIconSet;\rif not, the Observable will throw an error.\r\r\\@param name Name of the icon to be retrieved.\r\\@param namespace Namespace in which to look for the icon.\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\r\n    // Return (copy of) cached icon if possible.\r\n    const /** @type {?} */ key = iconKey(namespace, name);\r\n    const /** @type {?} */ config = this._svgIconConfigs.get(key);\r\n\r\n    if (config) {\r\n      return this._getSvgFromConfig(config);\r\n    }\r\n\r\n    // See if we have any icon sets registered for the namespace.\r\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\r\n\r\n    if (iconSetConfigs) {\r\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\r\n    }\r\n\r\n    return observableThrow(getMdIconNameNotFoundError(key));\r\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    if (config.svgElement) {\r\n      // We already have the SVG element for this icon, return a copy.\r\n      return observableOf(cloneSvg(config.svgElement));\r\n    } else {\r\n      // Fetch the icon from the config's URL, cache it, and return a copy.\r\n      return RxChain.from(this._loadSvgIconFromConfig(config))\r\n          .call(doOperator, svg => config.svgElement = svg)\r\n          .call(map, svg => cloneSvg(svg))\r\n          .result();\r\n    }\r\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\rFirst searches the available cached icons for a nested element with a matching name, and\rif found copies the element to a new <svg> element. If not found, fetches all icon sets\rthat have not been cached, and searches again after all fetches are completed.\rThe returned Observable produces the SVG element if possible, and throws\ran error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\r\n      Observable<SVGElement> {\r\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\r\n    // requested name.\r\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n\r\n    if (namedIcon) {\r\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\r\n      // time anyway, there's probably not much advantage compared to just always extracting\r\n      // it from the icon set.\r\n      return observableOf(namedIcon);\r\n    }\r\n\r\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\r\n    // fetched, fetch them now and look for iconName in the results.\r\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\r\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\r\n      .map(iconSetConfig => {\r\n        return RxChain.from(this._loadSvgIconSetFromConfig(iconSetConfig))\r\n          .call(catchOperator, (err: any): Observable<SVGElement | null> => {\r\n            let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\r\n\r\n            // Swallow errors fetching individual URLs so the combined Observable won't\r\n            // necessarily fail.\r\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\r\n            return observableOf(null);\r\n          })\r\n          .call(doOperator, svg => {\r\n            // Cache the SVG element.\r\n            if (svg) {\r\n              iconSetConfig.svgElement = svg;\r\n            }\r\n          })\r\n          .result();\r\n      });\r\n\r\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\r\n    // cached SVG element (unless the request failed), and we can check again for the icon.\r\n    return map.call(forkJoin.call(Observable, iconSetFetchRequests), () => {\r\n      const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n\r\n      if (!foundIcon) {\r\n        throw getMdIconNameNotFoundError(name);\r\n      }\r\n\r\n      return foundIcon;\r\n    });\r\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\rtag matches the specified name. If found, copies the nested element to a new SVG element and\rreturns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\r\n      SVGElement | null {\r\n    // Iterate backwards, so icon sets added later have precedence.\r\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\r\n      const /** @type {?} */ config = iconSetConfigs[i];\r\n      if (config.svgElement) {\r\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\r\n        if (foundIcon) {\r\n          return foundIcon;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\rfrom it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    return map.call(this._fetchUrl(config.url),\r\n        svgText => this._createSvgElementForSingleIcon(svgText));\r\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\rfrom it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n      // TODO: Document that icons should only be loaded from trusted sources.\r\n    return map.call(this._fetchUrl(config.url),\r\n        svgText => this._svgElementFromString(svgText));\r\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\r\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\r\n    this._setSvgAttributes(svg);\r\n    return svg;\r\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\rtag matches the specified name. If found, copies the nested element to a new SVG element and\rreturns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\r\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\r\n\r\n    if (!iconNode) {\r\n      return null;\r\n    }\r\n\r\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\r\n    // the content of a new <svg> node.\r\n    if (iconNode.tagName.toLowerCase() === 'svg') {\r\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\r\n    }\r\n\r\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\r\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\r\n    // tag is problematic on Firefox, because it needs to include the current page path.\r\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\r\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\r\n    }\r\n\r\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\r\n    // the correct nodes, but the SVG content doesn't render. Instead we\r\n    // have to create an empty SVG node using innerHTML and append its content.\r\n    // Elements created using DOMParser.parseFromString have the same problem.\r\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\r\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\r\n    // Clone the node so we don't remove it from the parent icon set element.\r\n    svg.appendChild(iconNode.cloneNode(true));\r\n\r\n    return this._setSvgAttributes(svg);\r\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\r\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\r\n    // creating an element from an HTML string.\r\n    const /** @type {?} */ div = document.createElement('DIV');\r\n    div.innerHTML = str;\r\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\r\n    if (!svg) {\r\n      throw Error('<svg> tag not found');\r\n    }\r\n    return svg;\r\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\r\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\r\n\r\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\r\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\r\n        svg.appendChild(element.childNodes[i].cloneNode(true));\r\n      }\r\n    }\r\n\r\n    return svg;\r\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\r\n    if (!svg.getAttribute('xmlns')) {\r\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\r\n    }\r\n    svg.setAttribute('fit', '');\r\n    svg.setAttribute('height', '100%');\r\n    svg.setAttribute('width', '100%');\r\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\r\n    return svg;\r\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\rcached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\r\n    if (!this._http) {\r\n      throw getMdIconNoHttpProviderError();\r\n    }\r\n\r\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (!url) {\r\n      throw getMdIconFailedToSanitizeError(safeUrl);\r\n    }\r\n\r\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\r\n    // already a request in progress for that URL. It's necessary to call share() on the\r\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\r\n    const /** @type {?} */ inProgressFetch = this._inProgressUrlFetches.get(url);\r\n\r\n    if (inProgressFetch) {\r\n      return inProgressFetch;\r\n    }\r\n\r\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\r\n    // Observable. Figure out why and fix it.\r\n    const /** @type {?} */ req = RxChain.from(this._http.get(url))\r\n      .call(map, response => response.text())\r\n      .call(finallyOperator, () => this._inProgressUrlFetches.delete(url))\r\n      .call(share)\r\n      .result();\r\n\r\n    this._inProgressUrlFetches.set(url, req);\r\n    return req;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\rMultiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\rThe default 'material-icons' value assumes that the material icon font has been loaded as\rdescribed at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\r\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\r\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\r\n}\n/**\n * \\@docs-private\n */\nexport const ICON_REGISTRY_PROVIDER = {\r\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\r\n  provide: MdIconRegistry,\r\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], [new Optional(), Http], DomSanitizer],\r\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\r\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\r\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\r\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\r\n  return namespace + ':' + name;\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {first} from '@angular/cdk/rxjs';\r\nimport {\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\r\nimport {MdIconRegistry} from './icon-registry';\n/**\n * \\@docs-private\n */\nexport class MdIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconBase.prototype._renderer;\n/** @type {?} */\nMdIconBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdIconMixinBase = mixinColor(MdIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\r\r- Specify the svgIcon input to load an SVG icon from a URL previously registered with the\r  addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\r  MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\r  \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\r  Examples:\r    <md-icon svgIcon=\"left-arrow\"></md-icon>\r    <md-icon svgIcon=\"animals:cat\"></md-icon>\r\r- Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\r  component. By default the Material icons font is used as described at\r  http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\r  alternate font by setting the fontSet input to either the CSS class to apply to use the\r  desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\r  Examples:\r    <md-icon>home</md-icon>\r    <md-icon fontSet=\"myfont\">sun</md-icon>\r\r- Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\r  font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\r  CSS class which causes the glyph to be displayed via a :before selector, as in\r  https://fortawesome.github.io/Font-Awesome/examples/\r  Example:\r    <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon extends _MdIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _mdIconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\r\n      renderer: Renderer2,\r\n      elementRef: ElementRef,\nprivate _mdIconRegistry: MdIconRegistry,\r\n       ariaHidden: string) {\r\n    super(renderer, elementRef);\r\n\r\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\r\n    // the right thing to do for the majority of icon use-cases.\r\n    if (!ariaHidden) {\r\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\r\n    }\r\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\rReturns a 2-element array of [(icon set), (icon name)].\rThe separator for the two fields is ':'. If there is no separator, an empty\rstring is returned for the icon set and the entire value is returned for\rthe icon name. If the argument is falsy, returns an array of two empty strings.\rThrows an error if the name contains two or more ':' separators.\rExamples:\r  'social:cake' -> ['social', 'cake']\r  'penguin' -> ['', 'penguin']\r  null -> ['', '']\r  'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\r\n    if (!iconName) {\r\n      return ['', ''];\r\n    }\r\n    const /** @type {?} */ parts = iconName.split(':');\r\n    switch (parts.length) {\r\n      case 1: return ['', parts[0]]; // Use default namespace.\r\n      case 2: return /** @type {?} */(( <[string, string]>parts));\r\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\r\n    }\r\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\r\n    if (changes.svgIcon) {\r\n      if (this.svgIcon) {\r\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\r\n\r\n        first.call(this._mdIconRegistry.getNamedSvgIcon(iconName, namespace)).subscribe(\r\n            svg => this._setSvgElement(svg),\r\n            (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\r\n      } else {\r\n        this._clearSvgElement();\r\n      }\r\n    }\r\n\r\n    if (this._usingFontIcon()) {\r\n      this._updateFontIconClasses();\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\r\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\r\n    if (this._usingFontIcon()) {\r\n      this._updateFontIconClasses();\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\r\n    return !this.svgIcon;\r\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\r\n    this._clearSvgElement();\r\n    this._renderer.appendChild(this._elementRef.nativeElement, svg);\r\n  }\n/**\n * @return {?}\n */\nprivate _clearSvgElement() {\r\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\r\n    const /** @type {?} */ childCount = layoutElement.childNodes.length;\r\n\r\n    // Remove existing child nodes and add the new SVG element. Note that we can't\r\n    // use innerHTML, because IE will throw if the element has a data binding.\r\n    for (let /** @type {?} */ i = 0; i < childCount; i++) {\r\n      this._renderer.removeChild(layoutElement, layoutElement.childNodes[i]);\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\r\n    if (!this._usingFontIcon()) {\r\n      return;\r\n    }\r\n\r\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\r\n    const /** @type {?} */ fontSetClass = this.fontSet ?\r\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\r\n        this._mdIconRegistry.getDefaultFontSetClass();\r\n\r\n    if (fontSetClass != this._previousFontSetClass) {\r\n      if (this._previousFontSetClass) {\r\n        this._renderer.removeClass(elem, this._previousFontSetClass);\r\n      }\r\n      if (fontSetClass) {\r\n        this._renderer.addClass(elem, fontSetClass);\r\n      }\r\n      this._previousFontSetClass = fontSetClass;\r\n    }\r\n\r\n    if (this.fontIcon != this._previousFontIconClass) {\r\n      if (this._previousFontIconClass) {\r\n        this._renderer.removeClass(elem, this._previousFontIconClass);\r\n      }\r\n      if (this.fontIcon) {\r\n        this._renderer.addClass(elem, this.fontIcon);\r\n      }\r\n      this._previousFontIconClass = this.fontIcon;\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  template: '<ng-content></ng-content>',\r\n  selector: 'md-icon, mat-icon',\r\n  styleUrls: ['icon.css'],\r\n  inputs: ['color'],\r\n  host: {\r\n    'role': 'img',\r\n    'class': 'mat-icon',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MdIcon} from './icon';\r\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\nexport class MdIconModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule],\r\n  exports: [MdIcon, MdCommonModule],\r\n  declarations: [MdIcon],\r\n  providers: [ICON_REGISTRY_PROVIDER],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdIconModule,MdIconBase,_MdIconMixinBase,MdIcon,getMdIconNameNotFoundError,getMdIconNoHttpProviderError,getMdIconFailedToSanitizeError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER,MatIcon,MatIconBase,MatIconModule,MatIconRegistry} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MdDatepickerIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\rcomponents if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\rcomponents if the labels have changed after initialization.\n * @type {?}\n */\nMdDatepickerIntl.prototype.changes;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  DateAdapter,\r\n  MATERIAL_COMPATIBILITY_MODE,\r\n  MD_DATE_FORMATS,\r\n  MdDateFormats,\r\n} from '@angular/material/core';\r\nimport {first} from 'rxjs/operator/first';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\nimport {MdDatepickerIntl} from './datepicker-intl';\n/**\n * A calendar that is used as part of the datepicker.\r\\@docs-private\n */\nexport class MdCalendar<D> implements AfterContentInit, OnDestroy {\nprivate _intlChanges: Subscription;\n/**\n * A date representing the period (month or year) to start the calendar in.\n * @return {?}\n */\nget startAt(): D | null { return this._startAt; }\n/**\n * @param {?} value\n * @return {?}\n */\nset startAt(value: D | null) { this._startAt = coerceDateProperty(this._dateAdapter, value); }\nprivate _startAt: D | null;\n/**\n * Whether the calendar should be started in month or year view.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) { this._selected = coerceDateProperty(this._dateAdapter, value); }\nprivate _selected: D | null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget minDate(): D | null { return this._minDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minDate(value: D | null) { this._minDate = coerceDateProperty(this._dateAdapter, value); }\nprivate _minDate: D | null;\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget maxDate(): D | null { return this._maxDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxDate(value: D | null) { this._maxDate = coerceDateProperty(this._dateAdapter, value); }\nprivate _maxDate: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when the currently selected date changes.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * Date filter for the month and year views.\n */\n_dateFilterForViews = (date: D) => {\r\n    return !!date &&\r\n        (!this.dateFilter || this.dateFilter(date)) &&\r\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\r\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\r\n  }\n/**\n * The current active date. This determines which time period is shown and which date is\rhighlighted when using keyboard navigation.\n * @return {?}\n */\nget _activeDate(): D { return this._clampedActiveDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _activeDate(value: D) {\r\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n  }\nprivate _clampedActiveDate: D;\n/**\n * Whether the calendar is in month view.\n */\n_monthView: boolean;\n/**\n * The label for the current calendar view.\n * @return {?}\n */\nget _periodButtonText(): string {\r\n    return this._monthView ?\r\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\r\n            .toLocaleUpperCase() :\r\n        this._dateAdapter.getYearName(this._activeDate);\r\n  }\n/**\n * @return {?}\n */\nget _periodButtonLabel(): string {\r\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\r\n  }\n/**\n * The label for the the previous button.\n * @return {?}\n */\nget _prevButtonLabel(): string {\r\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\r\n  }\n/**\n * The label for the the next button.\n * @return {?}\n */\nget _nextButtonLabel(): string {\r\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\r\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _intl\n * @param {?} _ngZone\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} changeDetectorRef\n */\nconstructor(private _elementRef: ElementRef,\nprivate _intl: MdDatepickerIntl,\nprivate _ngZone: NgZone,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\r\n              changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MD_DATE_FORMATS');\r\n    }\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._activeDate = this.startAt || this._dateAdapter.today();\r\n    this._focusActiveCell();\r\n    this._monthView = this.startView != 'year';\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n  }\n/**\n * Handles date selection in the month view.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: D): void {\r\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\r\n      this.selectedChange.emit(date);\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_userSelected(): void {\r\n    this.userSelection.emit();\r\n  }\n/**\n * Handles month selection in the year view.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: D): void {\r\n    this._activeDate = month;\r\n    this._monthView = true;\r\n  }\n/**\n * Handles user clicks on the period label.\n * @return {?}\n */\n_currentPeriodClicked(): void {\r\n    this._monthView = !this._monthView;\r\n  }\n/**\n * Handles user clicks on the previous button.\n * @return {?}\n */\n_previousClicked(): void {\r\n    this._activeDate = this._monthView ?\r\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\r\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\r\n  }\n/**\n * Handles user clicks on the next button.\n * @return {?}\n */\n_nextClicked(): void {\r\n    this._activeDate = this._monthView ?\r\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\r\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\r\n  }\n/**\n * Whether the previous period button is enabled.\n * @return {?}\n */\n_previousEnabled(): boolean {\r\n    if (!this.minDate) {\r\n      return true;\r\n    }\r\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\r\n  }\n/**\n * Whether the next period button is enabled.\n * @return {?}\n */\n_nextEnabled(): boolean {\r\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\r\n  }\n/**\n * Handles keydown events on the calendar body.\n * @param {?} event\n * @return {?}\n */\n_handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n    if (this._monthView) {\r\n      this._handleCalendarBodyKeydownInMonthView(event);\r\n    } else {\r\n      this._handleCalendarBodyKeydownInYearView(event);\r\n    }\r\n  }\n/**\n * Focuses the active cell after the microtask queue is empty.\n * @return {?}\n */\n_focusActiveCell() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\r\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\r\n      });\r\n    });\r\n  }\n/**\n * Whether the two dates represent the same view in the current view mode (month or year).\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nprivate _isSameView(date1: D, date2: D): boolean {\r\n    return this._monthView ?\r\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\r\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\r\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\r\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in month view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            1 - this._dateAdapter.getDate(this._activeDate));\r\n        break;\r\n      case END:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\r\n             this._dateAdapter.getDate(this._activeDate)));\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n        if (this._dateFilterForViews(this._activeDate)) {\r\n          this._dateSelected(this._activeDate);\r\n          // Prevent unexpected default actions such as form submission.\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in year view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n            -this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case END:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n            11 - this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate =\r\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate =\r\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\r\n        break;\r\n      case ENTER:\r\n        this._monthSelected(this._activeDate);\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\n/**\n * Determine the date for the month that comes before the given month in the same column in the\rcalendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _prevMonthInSameCol(date: D): D {\r\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\r\n    // of each year.\r\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\r\n        (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\r\n    return this._dateAdapter.addCalendarMonths(date, increment);\r\n  }\n/**\n * Determine the date for the month that comes after the given month in the same column in the\rcalendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _nextMonthInSameCol(date: D): D {\r\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\r\n    // of each year.\r\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\r\n        (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\r\n    return this._dateAdapter.addCalendarMonths(date, increment);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-calendar, mat-calendar',\r\n  templateUrl: 'calendar.html',\r\n  styleUrls: ['calendar.css'],\r\n  host: {\r\n    'class': 'mat-calendar',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdDatepickerIntl, },\n{type: NgZone, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'selected': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MdCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendar.ctorParameters;\n/** @type {?} */\nMdCalendar.propDecorators;\n/** @type {?} */\nMdCalendar.prototype._intlChanges;\n/** @type {?} */\nMdCalendar.prototype._startAt;\n/**\n * Whether the calendar should be started in month or year view.\n * @type {?}\n */\nMdCalendar.prototype.startView;\n/** @type {?} */\nMdCalendar.prototype._selected;\n/** @type {?} */\nMdCalendar.prototype._minDate;\n/** @type {?} */\nMdCalendar.prototype._maxDate;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdCalendar.prototype.dateFilter;\n/**\n * Emits when the currently selected date changes.\n * @type {?}\n */\nMdCalendar.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMdCalendar.prototype.userSelection;\n/**\n * Date filter for the month and year views.\n * @type {?}\n */\nMdCalendar.prototype._dateFilterForViews;\n/** @type {?} */\nMdCalendar.prototype._clampedActiveDate;\n/**\n * Whether the calendar is in month view.\n * @type {?}\n */\nMdCalendar.prototype._monthView;\n/** @type {?} */\nMdCalendar.prototype._elementRef;\n/** @type {?} */\nMdCalendar.prototype._intl;\n/** @type {?} */\nMdCalendar.prototype._ngZone;\n/** @type {?} */\nMdCalendar.prototype._dateAdapter;\n/** @type {?} */\nMdCalendar.prototype._dateFormats;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\r\\@docs-private\n */\nexport class MdCalendarCell {\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n */\nconstructor(public value: number,\npublic displayValue: string,\npublic ariaLabel: string,\npublic enabled: boolean) {}\r\n}\n\nfunction MdCalendarCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarCell.prototype.value;\n/** @type {?} */\nMdCalendarCell.prototype.displayValue;\n/** @type {?} */\nMdCalendarCell.prototype.ariaLabel;\n/** @type {?} */\nMdCalendarCell.prototype.enabled;\n}\n\n/**\n * An internal component used to display calendar data in a table.\r\\@docs-private\n */\nexport class MdCalendarBody {\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n */\nlabel: string;\n/**\n * The cells to display in the table.\n */\nrows: MdCalendarCell[][];\n/**\n * The value in the table that corresponds to today.\n */\ntodayValue: number;\n/**\n * The value in the table that is currently selected.\n */\nselectedValue: number;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n */\nlabelMinRequiredCells: number;\n/**\n * The number of columns in the table.\n */\nnumCols = 7;\n/**\n * Whether to allow selection of disabled cells.\n */\nallowDisabledSelection = false;\n/**\n * The cell number of the active cell in the table.\n */\nactiveCell = 0;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\rmaintained even as the table resizes.\n */\ncellAspectRatio = 1;\n/**\n * Emits when a new value is selected.\n */\nselectedValueChange = new EventEmitter<number>();\n/**\n * @param {?} cell\n * @return {?}\n */\n_cellClicked(cell: MdCalendarCell): void {\r\n    if (!this.allowDisabledSelection && !cell.enabled) {\r\n      return;\r\n    }\r\n    this.selectedValueChange.emit(cell.value);\r\n  }\n/**\n * The number of blank cells to put at the beginning for the first row.\n * @return {?}\n */\nget _firstRowOffset(): number {\r\n    return this.rows && this.rows.length && this.rows[0].length ?\r\n        this.numCols - this.rows[0].length : 0;\r\n  }\n/**\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\n_isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber == this.activeCell;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: '[md-calendar-body], [mat-calendar-body]',\r\n  templateUrl: 'calendar-body.html',\r\n  styleUrls: ['calendar-body.css'],\r\n  host: {\r\n    'class': 'mat-calendar-body',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'rows': [{ type: Input },],\n'todayValue': [{ type: Input },],\n'selectedValue': [{ type: Input },],\n'labelMinRequiredCells': [{ type: Input },],\n'numCols': [{ type: Input },],\n'allowDisabledSelection': [{ type: Input },],\n'activeCell': [{ type: Input },],\n'cellAspectRatio': [{ type: Input },],\n'selectedValueChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendarBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendarBody.ctorParameters;\n/** @type {?} */\nMdCalendarBody.propDecorators;\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n * @type {?}\n */\nMdCalendarBody.prototype.label;\n/**\n * The cells to display in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.rows;\n/**\n * The value in the table that corresponds to today.\n * @type {?}\n */\nMdCalendarBody.prototype.todayValue;\n/**\n * The value in the table that is currently selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValue;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n * @type {?}\n */\nMdCalendarBody.prototype.labelMinRequiredCells;\n/**\n * The number of columns in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.numCols;\n/**\n * Whether to allow selection of disabled cells.\n * @type {?}\n */\nMdCalendarBody.prototype.allowDisabledSelection;\n/**\n * The cell number of the active cell in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.activeCell;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\rmaintained even as the table resizes.\n * @type {?}\n */\nMdCalendarBody.prototype.cellAspectRatio;\n/**\n * Emits when a new value is selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValueChange;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple, MATERIAL_COMPATIBILITY_MODE,\r\n  MdRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  RippleRef,\r\n} from '@angular/material/core';\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\n\r\n\r\n// Increasing integer for generating unique ids for checkbox components.\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\rThis allows it to support [(ngModel)].\r\\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdCheckbox),\r\n  multi: true\r\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n/**\n * The source MdCheckbox of the event.\n */\nsource: MdCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\r\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdCheckboxBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdCheckboxMixinBase =\r\n  mixinColor(mixinDisableRipple(mixinDisabled(MdCheckboxBase)), 'accent');\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\rand exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\rdisabled. Note that all additional accessibility attributes are taken care of by the component,\rso there is no need to provide them yourself. However, if you want to omit a label and still\rhave the checkbox be accessible, you may supply an [aria-label] input.\rSee: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox extends _MdCheckboxMixinBase implements ControlValueAccessor, AfterViewInit,\r\n    OnDestroy, CanColor, CanDisable, CanDisableRipple {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\rtake precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\nprivate _uniqueId: string = `md-checkbox-${++nextUniqueId}`;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\r\\@deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\r\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\r\n    // label relative to the checkbox. As such, they are inverted.\r\n    return this.labelPosition == 'after' ? 'start' : 'end';\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\r\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\r\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n */\n_ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\r\\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusMonitor\n */\nconstructor(renderer: Renderer2,\r\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusMonitor: FocusMonitor) {\r\n    super(renderer, elementRef);\r\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\r\n    this._focusMonitor\r\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\r\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\r\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\r\n    return this._checked;\r\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\r\n    if (checked != this.checked) {\r\n      this._checked = checked;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\rrepresent a checkbox with three states, e.g. a checkbox that represents a nested list of\rcheckable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\rset to false.\n * @return {?}\n */\nget indeterminate() {\r\n    return this._indeterminate;\r\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\r\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\r\n    this._indeterminate = indeterminate;\r\n\r\n    if (changed) {\r\n      if (this._indeterminate) {\r\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\r\n      } else {\r\n        this._transitionCheckState(\r\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n      }\r\n      this.indeterminateChange.emit(this._indeterminate);\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\r\n    // This method is getting called whenever the label of the checkbox changes.\r\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\r\n    // that has been recognized by the cdkObserveContent directive.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\r\\@param value Value to be set to the model.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\r\n    this.checked = !!value;\r\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\rImplemented as part of ControlValueAccessor.\r\\@param fn Function to be called on change.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\rImplemented as part of ControlValueAccessor.\r\\@param fn Callback to be triggered when the checkbox is touched.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\r\\@param isDisabled Whether the checkbox should be disabled.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\r\n    let /** @type {?} */ oldState = this._currentCheckState;\r\n    let /** @type {?} */ renderer = this._renderer;\r\n    let /** @type {?} */ elementRef = this._elementRef;\r\n\r\n    if (oldState === newState) {\r\n      return;\r\n    }\r\n    if (this._currentAnimationClass.length > 0) {\r\n      renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\r\n    }\r\n\r\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\r\n        oldState, newState);\r\n    this._currentCheckState = newState;\r\n\r\n    if (this._currentAnimationClass.length > 0) {\r\n      renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\r\n    let /** @type {?} */ event = new MdCheckboxChange();\r\n    event.source = this;\r\n    event.checked = this.checked;\r\n\r\n    this._controlValueAccessorChangeFn(this.checked);\r\n    this.change.emit(event);\r\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\r\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\r\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\r\n    } else if (!focusOrigin) {\r\n      this._removeFocusRipple();\r\n      this.onTouched();\r\n    }\r\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\r\n    this.checked = !this.checked;\r\n  }\n/**\n * Event handler for checkbox input element.\rToggles checked state if element is not disabled.\rDo not toggle on (change) event since IE doesn't fire change event when\r  indeterminate checkbox is clicked.\r\\@param event\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `checkbox` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n\r\n    this._removeFocusRipple();\r\n\r\n    if (!this.disabled) {\r\n      // When user manually click on the checkbox, `indeterminate` is set to false.\r\n      if (this._indeterminate) {\r\n        Promise.resolve().then(() => {\r\n          this._indeterminate = false;\r\n          this.indeterminateChange.emit(this._indeterminate);\r\n        });\r\n      }\r\n\r\n      this.toggle();\r\n      this._transitionCheckState(\r\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n\r\n      // Emit our custom change event if the native input emitted one.\r\n      // It is important to only emit it, if the native input triggered one, because\r\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\r\n      this._emitChangeEvent();\r\n    }\r\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the `change` output.\r\n    event.stopPropagation();\r\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\r\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\r\n    let /** @type {?} */ animSuffix: string = '';\r\n\r\n    switch (oldState) {\r\n      case TransitionCheckState.Init:\r\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\r\n        // [checked] bound to it.\r\n        if (newState === TransitionCheckState.Checked) {\r\n          animSuffix = 'unchecked-checked';\r\n        } else if (newState == TransitionCheckState.Indeterminate) {\r\n          animSuffix = 'unchecked-indeterminate';\r\n        } else {\r\n          return '';\r\n        }\r\n        break;\r\n      case TransitionCheckState.Unchecked:\r\n        animSuffix = newState === TransitionCheckState.Checked ?\r\n            'unchecked-checked' : 'unchecked-indeterminate';\r\n        break;\r\n      case TransitionCheckState.Checked:\r\n        animSuffix = newState === TransitionCheckState.Unchecked ?\r\n            'checked-unchecked' : 'checked-indeterminate';\r\n        break;\r\n      case TransitionCheckState.Indeterminate:\r\n        animSuffix = newState === TransitionCheckState.Checked ?\r\n            'indeterminate-checked' : 'indeterminate-unchecked';\r\n        break;\r\n    }\r\n\r\n    return `mat-checkbox-anim-${animSuffix}`;\r\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\r\n    if (this._focusRipple) {\r\n      this._focusRipple.fadeOut();\r\n      this._focusRipple = null;\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-checkbox, mat-checkbox',\r\n  templateUrl: 'checkbox.html',\r\n  styleUrls: ['checkbox.css'],\r\n  host: {\r\n    'class': 'mat-checkbox',\r\n    '[id]': 'id',\r\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\r\n    '[class.mat-checkbox-checked]': 'checked',\r\n    '[class.mat-checkbox-disabled]': 'disabled',\r\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\r\n  },\r\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\rtake precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/** @type {?} */\nMdCheckbox.prototype._uniqueId;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * @type {?}\n */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\r\\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusMonitor;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Directive,\r\n  forwardRef,\r\n  Provider,\r\n} from '@angular/core';\r\nimport {\r\n  CheckboxRequiredValidator,\r\n  NG_VALIDATORS,\r\n} from '@angular/forms';\r\n\r\nexport const /** @type {?} */ _MdCheckboxRequiredValidator = CheckboxRequiredValidator;\r\n\r\nexport const /** @type {?} */ MD_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MdCheckboxRequiredValidator),\r\n  multi: true\r\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\rCurrent CheckboxRequiredValidator only work with `input type=checkbox` and does not\rwork with `md-checkbox`.\n */\nexport class MdCheckboxRequiredValidator extends _MdCheckboxRequiredValidator {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `md-checkbox[required][formControlName],\r\n             mat-checkbox[required][formControlName],\r\n             md-checkbox[required][formControl], md-checkbox[required][ngModel],\r\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\r\n  providers: [MD_CHECKBOX_REQUIRED_VALIDATOR],\r\n  host: {'[attr.required]': 'required ? \"\" : null'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxRequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxRequiredValidator.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {MdRippleModule, MdCommonModule} from '@angular/material/core';\r\nimport {MdCheckbox} from './checkbox';\r\nimport {MdCheckboxRequiredValidator} from './checkbox-required-validator';\r\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdCheckboxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CommonModule, MdRippleModule, MdCommonModule, ObserversModule, A11yModule],\r\n  exports: [MdCheckbox, MdCheckboxRequiredValidator, MdCommonModule],\r\n  declarations: [MdCheckbox, MdCheckboxRequiredValidator],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox,MdCheckboxModule,_MdCheckboxRequiredValidator,MD_CHECKBOX_REQUIRED_VALIDATOR,MdCheckboxRequiredValidator,MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR,MAT_CHECKBOX_REQUIRED_VALIDATOR,MatCheckbox,MatCheckboxBase,MatCheckboxChange,MatCheckboxModule,MatCheckboxRequiredValidator} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {FocusableOption} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n\r\nexport interface MdChipEvent {\r\n  chip: MdChip;\r\n}\n/**\n * Event object emitted by MdChip when selected or deselected.\n */\nexport class MdChipSelectionChange {\n/**\n * @param {?} source\n * @param {?} selected\n * @param {?=} isUserInput\n */\nconstructor(public source: MdChip,\npublic selected: boolean,\npublic isUserInput = false) { }\r\n}\n\nfunction MdChipSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipSelectionChange.prototype.source;\n/** @type {?} */\nMdChipSelectionChange.prototype.selected;\n/** @type {?} */\nMdChipSelectionChange.prototype.isUserInput;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {\r\n  }\r\n}\n\nfunction MdChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipBase.prototype._renderer;\n/** @type {?} */\nMdChipBase.prototype._elementRef;\n}\n\r\n\r\nexport const /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\r\\@docs-private\n */\nexport class MdBasicChip {\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]`,\r\n  host: {'class': 'mat-basic-chip'},\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip extends _MdChipMixinBase implements FocusableOption, OnDestroy, CanColor,\r\n    CanDisable {\r\n\r\n  protected _value: any;\r\n\r\n  protected _selected: boolean = false;\r\n\r\n  protected _selectable: boolean = true;\r\n\r\n  protected _removable: boolean = true;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean {\r\n    return this._selected;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\r\n    this._selected = coerceBooleanProperty(value);\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: value\r\n    });\r\n  }\n/**\n * The value of the chip. Defaults to the content inside <md-chip> tags.\n * @return {?}\n */\nget value(): any {\r\n    return this._value != undefined\r\n      ? this._value\r\n      : this._elementRef.nativeElement.textContent;\r\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\r\n    this._value = newValue;\r\n  }\n/**\n * Whether or not the chips are selectable. When a chip is not selectable,\rchanges to it's selected state are always ignored.\n * @return {?}\n */\nget selectable(): boolean {\r\n    return this._selectable;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\r\n    this._selectable = coerceBooleanProperty(value);\r\n  }\n/**\n * Determines whether or not the chip displays the remove styling and emits (remove) events.\n * @return {?}\n */\nget removable(): boolean {\r\n    return this._removable;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset removable(value: boolean) {\r\n    this._removable = coerceBooleanProperty(value);\r\n  }\n/**\n * Emits when the chip is focused.\n */\n_onFocus = new Subject<MdChipEvent>();\n/**\n * Emits when the chip is blured.\n */\n_onBlur = new Subject<MdChipEvent>();\n/**\n * Emitted when the chip is selected or deselected.\n */\nselectionChange = new EventEmitter<MdChipSelectionChange>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroyed = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\r\\@deprecated Use 'destroyed' instead.\n */\ndestroy = this.destroyed;\n/**\n * Emitted when a chip is to be removed.\n */\nremoved = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when a chip is to be removed.\r\\@deprecated Use `removed` instead.\n */\nonRemove = this.removed;\n/**\n * @return {?}\n */\nget ariaSelected(): string | null {\r\n    return this.selectable ? this.selected.toString() : null;\r\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n */\nconstructor(renderer: Renderer2,\npublic _elementRef: ElementRef) {\r\n    super(renderer, _elementRef);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\r\n    this.destroyed.emit({chip: this});\r\n  }\n/**\n * Selects the chip.\n * @return {?}\n */\nselect(): void {\r\n    this._selected = true;\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: true\r\n    });\r\n  }\n/**\n * Deselects the chip.\n * @return {?}\n */\ndeselect(): void {\r\n    this._selected = false;\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: false\r\n    });\r\n  }\n/**\n * Select this chip and emit selected event\n * @return {?}\n */\nselectViaInteraction(): void {\r\n    this._selected = true;\r\n    // Emit select event when selected changes.\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: true,\r\n      selected: true\r\n    });\r\n  }\n/**\n * Toggles the current selected state of this chip.\n * @param {?=} isUserInput\n * @return {?}\n */\ntoggleSelected(isUserInput: boolean = false): boolean {\r\n    this._selected = !this.selected;\r\n\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput,\r\n      selected: this._selected\r\n    });\r\n\r\n    return this.selected;\r\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n    this._onFocus.next({chip: this});\r\n  }\n/**\n * Allows for programmatic removal of the chip. Called by the MdChipList when the DELETE or\rBACKSPACE keys are pressed.\r\rInforms any listeners of the removal request. Does not remove the chip from the DOM.\n * @return {?}\n */\nremove(): void {\r\n    if (this.removable) {\r\n      this.removed.emit({chip: this});\r\n    }\r\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\r\n    // Check disabled\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    this.focus();\r\n  }\n/**\n * Handle custom key presses.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    switch (event.keyCode) {\r\n      case DELETE:\r\n      case BACKSPACE:\r\n        // If we are removable, remove the focused chip\r\n        this.remove();\r\n        // Always prevent so page navigation does not occur\r\n        event.preventDefault();\r\n        break;\r\n      case SPACE:\r\n        // If we are selectable, toggle the focused chip\r\n        if (this.selectable) {\r\n          this.toggleSelected(true);\r\n        }\r\n\r\n        // Always prevent space from scrolling the page since the list has focus\r\n        event.preventDefault();\r\n        break;\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_blur(): void {\r\n    this._hasFocus = false;\r\n    this._onBlur.next({chip: this});\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\r\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\r\n  inputs: ['color', 'disabled'],\r\n  exportAs: 'mdChip, matChip',\r\n  host: {\r\n    'class': 'mat-chip',\r\n    'tabindex': '-1',\r\n    'role': 'option',\r\n    '[class.mat-chip-selected]': 'selected',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-selected]': 'ariaSelected',\r\n    '(click)': '_handleClick($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(focus)': '_hasFocus = true',\r\n    '(blur)': '_blur()',\r\n  },\r\n\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selected': [{ type: Input },],\n'value': [{ type: Input },],\n'selectable': [{ type: Input },],\n'removable': [{ type: Input },],\n'selectionChange': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'destroy': [{ type: Output },],\n'removed': [{ type: Output },],\n'onRemove': [{ type: Output, args: ['remove', ] },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/** @type {?} */\nMdChip.prototype._value;\n/** @type {?} */\nMdChip.prototype._selected;\n/** @type {?} */\nMdChip.prototype._selectable;\n/** @type {?} */\nMdChip.prototype._removable;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMdChip.prototype._hasFocus;\n/**\n * Emits when the chip is focused.\n * @type {?}\n */\nMdChip.prototype._onFocus;\n/**\n * Emits when the chip is blured.\n * @type {?}\n */\nMdChip.prototype._onBlur;\n/**\n * Emitted when the chip is selected or deselected.\n * @type {?}\n */\nMdChip.prototype.selectionChange;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroyed;\n/**\n * Emitted when the chip is destroyed.\r\\@deprecated Use 'destroyed' instead.\n * @type {?}\n */\nMdChip.prototype.destroy;\n/**\n * Emitted when a chip is to be removed.\n * @type {?}\n */\nMdChip.prototype.removed;\n/**\n * Emitted when a chip is to be removed.\r\\@deprecated Use `removed` instead.\n * @type {?}\n */\nMdChip.prototype.onRemove;\n/** @type {?} */\nMdChip.prototype._elementRef;\n}\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\ravailable at https://material.io/icons/#ic_cancel.\r\rExample:\r\r    <md-chip>\r      <md-icon mdChipRemove>cancel</md-icon>\r    </md-chip>\r\rYou *may* use a custom icon, but you may need to override the `md-chip-remove` positioning styles\rto properly center the icon within the chip.\n */\nexport class MdChipRemove {\n/**\n * @param {?} _parentChip\n */\nconstructor(protected _parentChip: MdChip) {\r\n  }\n/**\n * Calls the parent chip's public `remove()` method if applicable.\n * @return {?}\n */\n_handleClick(): void {\r\n    if (this._parentChip.removable) {\r\n      this._parentChip.remove();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdChipRemove], [matChipRemove]',\r\n  host: {\r\n    'class': 'mat-chip-remove',\r\n    '(click)': '_handleClick($event)',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdChip, },\n];\n}\n\nfunction MdChipRemove_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipRemove.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipRemove.ctorParameters;\n/** @type {?} */\nMdChipRemove.prototype._parentChip;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {BACKSPACE, DELETE, LEFT_ARROW, RIGHT_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {startWith} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Renderer2,\r\n  Self,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {MdFormFieldControl} from '@angular/material/form-field';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MdChip, MdChipEvent, MdChipSelectionChange} from './chip';\r\nimport {MdChipInput} from './chip-input';\r\n\r\n// Increasing integer for generating unique ids for chip-list components.\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nexport class MdChipListChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdChipList,\npublic value: any) { }\r\n}\n\nfunction MdChipListChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipListChange.prototype.source;\n/** @type {?} */\nMdChipListChange.prototype.value;\n}\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nexport class MdChipList implements MdFormFieldControl<any>, ControlValueAccessor,\r\n    AfterContentInit, OnInit, OnDestroy {\r\n  readonly controlType = 'mat-chip-list';\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\rneeds to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n */\nprotected _lastDestroyedIndex: number|null = null;\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprotected _chipSet: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the chip list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to focus changes in the chips.\n */\nprivate _chipFocusSubscription: Subscription|null;\n/**\n * Subscription to blur changes in the chips.\n */\nprivate _chipBlurSubscription: Subscription|null;\n/**\n * Subscription to selection changes in chips.\n */\nprivate _chipSelectionSubscription: Subscription|null;\n/**\n * Subscription to remove changes in chips.\n */\nprivate _chipRemoveSubscription: Subscription|null;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * The chip input to add more chips\n */\nprotected _chipInput: MdChipInput;\n/**\n * The aria-describedby attribute on the chip list for improved a11y.\n */\nprotected _ariaDescribedby: string;\n/**\n * Id of the chip list\n */\nprotected _id: string;\n/**\n * Uid of the chip list\n */\nprotected _uid: string = `md-chip-list-${nextUniqueId++}`;\n/**\n * Whether this is required\n */\nprotected _required: boolean = false;\n/**\n * Whether this is disabled\n */\nprotected _disabled: boolean = false;\r\n\r\n  protected _value: any;\n/**\n * Placeholder for the chip list. Alternatively, placeholder can be set on MdChipInput\n */\nprotected _placeholder: string;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * User defined tab index.\rWhen it is not null, use user defined tab index. Otherwise use _tabIndex\n */\n_userTabIndex: number | null = null;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MdChip>;\n/**\n * Function when touched\n */\n_onTouched = () => {};\n/**\n * Function when changed\n */\n_onChange: (value: any) => void = () => {};\r\n\r\n  _selectionModel: SelectionModel<MdChip>;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * The array of selected chips inside chip list.\n * @return {?}\n */\nget selected(): MdChip[] | MdChip {\r\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n  }\n/**\n * Whether the user should be allowed to select multiple chips.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\ris a value from an option. The second is a value from the selection. A boolean\rshould be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    this._compareWith = fn;\r\n    if (this._selectionModel) {\r\n      // A different comparator means the selection could change.\r\n      this._initializeSelection();\r\n    }\r\n  }\n/**\n * Required for FormFieldControl\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\r\n    this.writeValue(newValue);\r\n    this._value = newValue;\r\n  }\n/**\n * Required for FormFieldControl. The ID of the chip list\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {\r\n    this._id = value;\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nget id() { return this._id || this._uid; }\n/**\n * Required for FormFieldControl. Whether the chip list is required.\n * @param {?} value\n * @return {?}\n */\nset required(value: any) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nget required() {\r\n    return this._required;\r\n  }\n/**\n * For FormFieldControl. Use chip input's placholder if there's a chip input\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\r\n    this._placeholder = value;\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nget placeholder() {\r\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\r\n  }\n/**\n * Whether any chips or the mdChipInput inside of this chip-list has focus.\n * @return {?}\n */\nget focused() {\r\n    return this.chips.some(chip => chip._hasFocus) ||\r\n      (this._chipInput && this._chipInput.focused);\r\n  }\n/**\n * Whether this chip-list contains no chips and no mdChipInput.\n * @return {?}\n */\nget empty(): boolean {\r\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\r\n  }\n/**\n * @return {?}\n */\nget shouldPlaceholderFloat(): boolean {\r\n    return this.empty;\r\n  }\n/**\n * Whether this chip-list is disabled.\n * @return {?}\n */\nget disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the chip list is in an error state.\n * @return {?}\n */\nget errorState(): boolean {\r\n    const /** @type {?} */ isInvalid = this.ngControl && this.ngControl.invalid;\r\n    const /** @type {?} */ isTouched = this.ngControl && this.ngControl.touched;\r\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\r\n      (this._parentForm && this._parentForm.submitted);\r\n    return !!(isInvalid && (isTouched || isSubmitted));\r\n  }\n/**\n * Orientation of the chip list.\n */\nariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\rits selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\r\n    this._userTabIndex = value;\r\n    this._tabIndex = value;\r\n  }\n/**\n * Combined stream of all of the child chips' selection change events.\n * @return {?}\n */\nget chipSelectionChanges(): Observable<MdChipSelectionChange> {\r\n    return merge(...this.chips.map(chip => chip.selectionChange));\r\n  }\n/**\n * Combined stream of all of the child chips' focus change events.\n * @return {?}\n */\nget chipFocusChanges(): Observable<MdChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onFocus));\r\n  }\n/**\n * Combined stream of all of the child chips' blur change events.\n * @return {?}\n */\nget chipBlurChanges(): Observable<MdChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onBlur));\r\n  }\n/**\n * Combined stream of all of the child chips' remove change events.\n * @return {?}\n */\nget chipRemoveChanges(): Observable<MdChipEvent> {\r\n    return merge(...this.chips.map(chip => chip.destroy));\r\n  }\n/**\n * Event emitted when the selected chip list value has been changed by the user.\n */\nchange: EventEmitter<MdChipListChange> = new EventEmitter<MdChipListChange>();\n/**\n * Event that emits whenever the raw value of the chip-list changes. This is here primarily\rto facilitate the two-way binding for the `value` input.\r\\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nconstructor(protected _renderer: Renderer2,\r\n              protected _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic ngControl: NgControl) {\r\n    if (this.ngControl) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\r\n\r\n    this._keyManager = new FocusKeyManager<MdChip>(this.chips).withWrap();\r\n\r\n    // Prevents the chip list from capturing focus and redirecting\r\n    // it back to the first chip when the user tabs out.\r\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\r\n      this._tabIndex = -1;\r\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\r\n    });\r\n\r\n    // When the list changes, re-subscribe\r\n    this._changeSubscription = startWith.call(this.chips.changes, null).subscribe(() => {\r\n      this._resetChips();\r\n\r\n      // Reset chips selected/deselected status\r\n      this._initializeSelection();\r\n\r\n      // Check to see if we need to update our tab index\r\n      this._updateTabIndex();\r\n\r\n      // Check to see if we have a destroyed chip and need to refocus\r\n      this._updateFocusForDestroyedChips();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    this._selectionModel = new SelectionModel<MdChip>(this.multiple, undefined, false);\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\r\n    this._tabOutSubscription.unsubscribe();\r\n\r\n    if (this._changeSubscription) {\r\n      this._changeSubscription.unsubscribe();\r\n    }\r\n    this._dropSubscriptions();\r\n  }\n/**\n * Associates an HTML input element with this chip list.\n * @param {?} inputElement\n * @return {?}\n */\nregisterInput(inputElement: MdChipInput) {\r\n    this._chipInput = inputElement;\r\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\r\n    if (this.chips) {\r\n      this._setSelectionByValue(value, false);\r\n    }\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\r\n    this.disabled = disabled;\r\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nonContainerClick() {\r\n    this.focus();\r\n  }\n/**\n * Focuses the the first non-disabled chip in this chip list, or the associated input when there\rare no eligible chips.\n * @return {?}\n */\nfocus() {\r\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\r\n    // Focus on first element if there's no chipInput inside chip-list\r\n    if (this._chipInput && this._chipInput.focused) {\r\n      // do nothing\r\n    } else if (this.chips.length > 0) {\r\n      this._keyManager.setFirstItemActive();\r\n      this.stateChanges.next();\r\n    } else {\r\n      this._focusInput();\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Attempt to focus an input if we have one.\n * @return {?}\n */\n_focusInput() {\r\n    if (this._chipInput) {\r\n      this._chipInput.focus();\r\n    }\r\n  }\n/**\n * Pass events to the keyboard manager. Available here for tests.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\r\n    let /** @type {?} */ code = event.keyCode;\r\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\r\n    let /** @type {?} */ isInputEmpty = this._isInputEmpty(target);\r\n    let /** @type {?} */ isRtl = this._dir && this._dir.value == 'rtl';\r\n\r\n    let /** @type {?} */ isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\r\n    let /** @type {?} */ isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\r\n    let /** @type {?} */ isBackKey = (code === BACKSPACE || code == DELETE || code == UP_ARROW || isPrevKey);\r\n    // If they are on an empty input and hit backspace/delete/left arrow, focus the last chip\r\n    if (isInputEmpty && isBackKey) {\r\n      this._keyManager.setLastItemActive();\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\r\n    // up/down keys)\r\n    if (target && target.classList.contains('mat-chip')) {\r\n      if (isPrevKey) {\r\n        this._keyManager.setPreviousItemActive();\r\n        event.preventDefault();\r\n      } else if (isNextKey) {\r\n        this._keyManager.setNextItemActive();\r\n        event.preventDefault();\r\n      } else {\r\n        this._keyManager.onKeydown(event);\r\n      }\r\n    }\r\n    this.stateChanges.next();\r\n  }\n/**\n * Check the tab index as you should not be allowed to focus an empty list.\n * @return {?}\n */\nprotected _updateTabIndex(): void {\r\n    // If we have 0 chips, we should not allow keyboard focus\r\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\r\n  }\n/**\n * Update key manager's active item when chip is deleted.\rIf the deleted chip is the last chip in chip list, focus the new last chip.\rOtherwise focus the next chip in the list.\rSave `_lastDestroyedIndex` so we can set the correct focus.\n * @param {?} chip\n * @return {?}\n */\nprotected _updateKeyManager(chip: MdChip) {\r\n    let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\r\n    if (this._isValidIndex(chipIndex)) {\r\n      if (chip._hasFocus) {\r\n        // Check whether the chip is not the last item\r\n        if (chipIndex < this.chips.length - 1) {\r\n          this._keyManager.setActiveItem(chipIndex);\r\n        } else if (chipIndex - 1 >= 0) {\r\n          this._keyManager.setActiveItem(chipIndex - 1);\r\n        }\r\n      }\r\n      if (this._keyManager.activeItemIndex === chipIndex) {\r\n        this._lastDestroyedIndex = chipIndex;\r\n      }\r\n    }\r\n  }\n/**\n * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\rone.\n * @return {?}\n */\nprotected _updateFocusForDestroyedChips() {\r\n    let /** @type {?} */ chipsArray = this.chips;\r\n\r\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\r\n      // Check whether the destroyed chip was the last item\r\n      const /** @type {?} */ newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\r\n      this._keyManager.setActiveItem(newFocusIndex);\r\n      let /** @type {?} */ focusChip = this._keyManager.activeItem;\r\n      // Focus the chip\r\n      if (focusChip) {\r\n        focusChip.focus();\r\n      }\r\n    } else if (chipsArray.length === 0) {\r\n      this._focusInput();\r\n    }\r\n\r\n    // Reset our destroyed index\r\n    this._lastDestroyedIndex = null;\r\n  }\n/**\n * Utility to ensure all indexes are valid.\r\r\\@param index The index to be checked.\r\\@returns True if the index is valid for our list of chips.\n * @param {?} index\n * @return {?}\n */\nprivate _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.chips.length;\r\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate _isInputEmpty(element: HTMLElement): boolean {\r\n    if (element && element.nodeName.toLowerCase() === 'input') {\r\n      let /** @type {?} */ input = /** @type {?} */(( element as HTMLInputElement));\r\n\r\n      return !input.value;\r\n    }\r\n\r\n    return false;\r\n  }\n/**\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\n_setSelectionByValue(value: any, isUserInput: boolean = true) {\r\n    this._clearSelection();\r\n    this.chips.forEach(chip => chip.deselect());\r\n\r\n    if (Array.isArray(value)) {\r\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\r\n      this._sortValues();\r\n    } else {\r\n      const /** @type {?} */ correspondingChip = this._selectValue(value, isUserInput);\r\n\r\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n      // mode, because we don't know what chip the user interacted with last.\r\n      if (correspondingChip) {\r\n        this._keyManager.setActiveItem(this.chips.toArray().indexOf(correspondingChip));\r\n      }\r\n    }\r\n  }\n/**\n * Finds and selects the chip based on its value.\r\\@returns Chip that has the corresponding value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _selectValue(value: any, isUserInput: boolean = true): MdChip | undefined {\r\n\r\n    const /** @type {?} */ correspondingChip = this.chips.find(chip => {\r\n      return chip.value != null && this._compareWith(chip.value,  value);\r\n    });\r\n\r\n    if (correspondingChip) {\r\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\r\n      this._selectionModel.select(correspondingChip);\r\n    }\r\n\r\n    return correspondingChip;\r\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\r\n      this.stateChanges.next();\r\n    });\r\n  }\n/**\n * Deselects every chip in the list.\r\\@param skip Chip that should not be deselected.\n * @param {?=} skip\n * @return {?}\n */\nprivate _clearSelection(skip?: MdChip): void {\r\n    this._selectionModel.clear();\r\n    this.chips.forEach(chip => {\r\n      if (chip !== skip) {\r\n        chip.deselect();\r\n      }\r\n    });\r\n    this.stateChanges.next();\r\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\rorder that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\r\n    if (this._multiple) {\r\n      this._selectionModel.clear();\r\n\r\n      this.chips.forEach(chip => {\r\n        if (chip.selected) {\r\n          this._selectionModel.select(chip);\r\n        }\r\n      });\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\r\n    let /** @type {?} */ valueToEmit: any = null;\r\n\r\n    if (Array.isArray(this.selected)) {\r\n      valueToEmit = this.selected.map(chip => chip.value);\r\n    } else {\r\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\r\n    }\r\n    this._value = valueToEmit;\r\n    this.change.emit(new MdChipListChange(this, valueToEmit));\r\n    this.valueChange.emit(valueToEmit);\r\n    this._onChange(valueToEmit);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * When blurred, mark the field as touched when focus moved outside the chip list.\n * @return {?}\n */\n_blur() {\r\n    if (!this.disabled) {\r\n      if (this._chipInput) {\r\n        // If there's a chip input, we should check whether the focus moved to chip input.\r\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\r\n        // to chip input, do nothing.\r\n        // Timeout is needed to wait for the focus() event trigger on chip input.\r\n        setTimeout(() => {\r\n          if (!this.focused) {\r\n            this._markAsTouched();\r\n          }\r\n        });\r\n      } else {\r\n        // If there's no chip input, then mark the field as touched.\r\n        this._markAsTouched();\r\n      }\r\n    }\r\n  }\n/**\n * Mark the field as touched\n * @return {?}\n */\n_markAsTouched() {\r\n    this._onTouched();\r\n    this._changeDetectorRef.markForCheck();\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nprivate _resetChips() {\r\n    this._dropSubscriptions();\r\n    this._listenToChipsFocus();\r\n    this._listenToChipsSelection();\r\n    this._listenToChipsRemoved();\r\n  }\n/**\n * @return {?}\n */\nprivate _dropSubscriptions() {\r\n    if (this._chipFocusSubscription) {\r\n      this._chipFocusSubscription.unsubscribe();\r\n      this._chipFocusSubscription = null;\r\n    }\r\n\r\n    if (this._chipBlurSubscription) {\r\n      this._chipBlurSubscription.unsubscribe();\r\n      this._chipBlurSubscription = null;\r\n    }\r\n\r\n    if (this._chipSelectionSubscription) {\r\n      this._chipSelectionSubscription.unsubscribe();\r\n      this._chipSelectionSubscription = null;\r\n    }\r\n  }\n/**\n * Listens to user-generated selection events on each chip.\n * @return {?}\n */\nprivate _listenToChipsSelection(): void {\r\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\r\n      event.source.selected\r\n        ? this._selectionModel.select(event.source)\r\n        : this._selectionModel.deselect(event.source);\r\n\r\n      // For single selection chip list, make sure the deselected value is unselected.\r\n      if (!this.multiple) {\r\n        this.chips.forEach(chip => {\r\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\r\n            chip.deselect();\r\n          }\r\n        });\r\n      }\r\n\r\n      if (event.isUserInput) {\r\n        this._propagateChanges();\r\n      }\r\n    });\r\n  }\n/**\n * Listens to user-generated selection events on each chip.\n * @return {?}\n */\nprivate _listenToChipsFocus(): void {\r\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\r\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(event.chip);\r\n\r\n      if (this._isValidIndex(chipIndex)) {\r\n        this._keyManager.updateActiveItemIndex(chipIndex);\r\n      }\r\n      this.stateChanges.next();\r\n    });\r\n\r\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\r\n      this._blur();\r\n      this.stateChanges.next();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nprivate _listenToChipsRemoved(): void {\r\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\r\n      this._updateKeyManager(event.chip);\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-chip-list, mat-chip-list',\r\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\r\n  exportAs: 'mdChipList, matChipList',\r\n  host: {\r\n    '[attr.tabindex]': '_tabIndex',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-multiselectable]': 'multiple',\r\n    '[class.mat-chip-list-disabled]': 'disabled',\r\n    '[class.mat-chip-list-invalid]': 'errorState',\r\n    '[class.mat-chip-list-required]': 'required',\r\n    'role': 'listbox',\r\n    '[attr.aria-orientation]': 'ariaOrientation',\r\n    'class': 'mat-chip-list',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_blur()',\r\n    '(keydown)': '_keydown($event)'\r\n  },\r\n  providers: [{provide: MdFormFieldControl, useExisting: MdChipList}],\r\n  styleUrls: ['chips.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'value': [{ type: Input },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'disabled': [{ type: Input },],\n'ariaOrientation': [{ type: Input, args: ['aria-orientation', ] },],\n'selectable': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n'chips': [{ type: ContentChildren, args: [MdChip, ] },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/** @type {?} */\nMdChipList.prototype.controlType;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\rneeds to run change detection.\n * @type {?}\n */\nMdChipList.prototype.stateChanges;\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n * @type {?}\n */\nMdChipList.prototype._lastDestroyedIndex;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._chipSet;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabOutSubscription;\n/**\n * Subscription to changes in the chip list.\n * @type {?}\n */\nMdChipList.prototype._changeSubscription;\n/**\n * Subscription to focus changes in the chips.\n * @type {?}\n */\nMdChipList.prototype._chipFocusSubscription;\n/**\n * Subscription to blur changes in the chips.\n * @type {?}\n */\nMdChipList.prototype._chipBlurSubscription;\n/**\n * Subscription to selection changes in chips.\n * @type {?}\n */\nMdChipList.prototype._chipSelectionSubscription;\n/**\n * Subscription to remove changes in chips.\n * @type {?}\n */\nMdChipList.prototype._chipRemoveSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdChipList.prototype._multiple;\n/**\n * The chip input to add more chips\n * @type {?}\n */\nMdChipList.prototype._chipInput;\n/**\n * The aria-describedby attribute on the chip list for improved a11y.\n * @type {?}\n */\nMdChipList.prototype._ariaDescribedby;\n/**\n * Id of the chip list\n * @type {?}\n */\nMdChipList.prototype._id;\n/**\n * Uid of the chip list\n * @type {?}\n */\nMdChipList.prototype._uid;\n/**\n * Whether this is required\n * @type {?}\n */\nMdChipList.prototype._required;\n/**\n * Whether this is disabled\n * @type {?}\n */\nMdChipList.prototype._disabled;\n/** @type {?} */\nMdChipList.prototype._value;\n/**\n * Placeholder for the chip list. Alternatively, placeholder can be set on MdChipInput\n * @type {?}\n */\nMdChipList.prototype._placeholder;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n/**\n * User defined tab index.\rWhen it is not null, use user defined tab index. Otherwise use _tabIndex\n * @type {?}\n */\nMdChipList.prototype._userTabIndex;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * Function when touched\n * @type {?}\n */\nMdChipList.prototype._onTouched;\n/**\n * Function when changed\n * @type {?}\n */\nMdChipList.prototype._onChange;\n/** @type {?} */\nMdChipList.prototype._selectionModel;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMdChipList.prototype._compareWith;\n/**\n * Orientation of the chip list.\n * @type {?}\n */\nMdChipList.prototype.ariaOrientation;\n/**\n * Event emitted when the selected chip list value has been changed by the user.\n * @type {?}\n */\nMdChipList.prototype.change;\n/**\n * Event that emits whenever the raw value of the chip-list changes. This is here primarily\rto facilitate the two-way binding for the `value` input.\r\\@docs-private\n * @type {?}\n */\nMdChipList.prototype.valueChange;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/** @type {?} */\nMdChipList.prototype._renderer;\n/** @type {?} */\nMdChipList.prototype._elementRef;\n/** @type {?} */\nMdChipList.prototype._changeDetectorRef;\n/** @type {?} */\nMdChipList.prototype._dir;\n/** @type {?} */\nMdChipList.prototype._parentForm;\n/** @type {?} */\nMdChipList.prototype._parentFormGroup;\n/** @type {?} */\nMdChipList.prototype.ngControl;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ENTER} from '@angular/cdk/keycodes';\r\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\r\nimport {MdChipList} from './chip-list';\r\n\r\n\r\nexport interface MdChipInputEvent {\r\n  input: HTMLInputElement;\r\n  value: string;\r\n}\n/**\n * Directive that adds chip-specific behaviors to an input element inside <md-form-field>.\rMay be placed inside or outside of an <md-chip-list>.\n */\nexport class MdChipInput {\r\n  focused: boolean = false;\r\n  _chipList: MdChipList;\n/**\n * Register input for chip list\n * @param {?} value\n * @return {?}\n */\nset chipList(value: MdChipList) {\r\n    if (value) {\r\n      this._chipList = value;\r\n      this._chipList.registerInput(this);\r\n    }\r\n  }\n/**\n * Whether or not the chipEnd event will be emitted when the input is blurred.\n * @return {?}\n */\nget addOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\r\n  _addOnBlur: boolean = false;\r\n\r\n  /**\r\n   * The list of key codes that will trigger a chipEnd event.\r\n   *\r\n   * Defaults to `[ENTER]`.\r\n   */\r\n  // TODO(tinayuangao): Support Set here\r\n   separatorKeyCodes: number[] = [ENTER];\n/**\n * Emitted when a chip is to be added.\n */\nchipEnd = new EventEmitter<MdChipInputEvent>();\r\n\r\n   _matChipInputTokenEnd = this.chipEnd;\n/**\n * @param {?} value\n * @return {?}\n */\nset matChipList(value: MdChipList) { this.chipList = value; }\n/**\n * @return {?}\n */\nget matAddOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset matAddOnBlur(value) { this.addOnBlur = value; }\n/**\n * @return {?}\n */\nget matSeparatorKeyCodes() { return this.separatorKeyCodes; }\n/**\n * @param {?} v\n * @return {?}\n */\nset matSeparatorKeyCodes(v: number[]) { this.separatorKeyCodes = v; }\r\n\r\n   placeholder: string = '';\n/**\n * @return {?}\n */\nget empty(): boolean {\r\n    let /** @type {?} */ value: string | null = this._inputElement.value;\r\n    return value == null || value === '';\r\n  }\n/**\n * The native input element to which this directive is attached.\n */\nprotected _inputElement: HTMLInputElement;\n/**\n * @param {?} _elementRef\n */\nconstructor(protected _elementRef: ElementRef) {\r\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\r\n  }\n/**\n * Utility method to make host definition/tests more clear.\n * @param {?=} event\n * @return {?}\n */\n_keydown(event?: KeyboardEvent) {\r\n    this._emitChipEnd(event);\r\n  }\n/**\n * Checks to see if the blur should emit the (chipEnd) event.\n * @return {?}\n */\n_blur() {\r\n    if (this.addOnBlur) {\r\n      this._emitChipEnd();\r\n    }\r\n    this.focused = false;\r\n    // Blur the chip list if it is not focused\r\n    if (!this._chipList.focused) {\r\n      this._chipList._blur();\r\n    }\r\n    this._chipList.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\n_focus() {\r\n    this.focused = true;\r\n    this._chipList.stateChanges.next();\r\n  }\n/**\n * Checks to see if the (chipEnd) event needs to be emitted.\n * @param {?=} event\n * @return {?}\n */\n_emitChipEnd(event?: KeyboardEvent) {\r\n    if (!this._inputElement.value && !!event) {\r\n      this._chipList._keydown(event);\r\n    }\r\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\r\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\r\n\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\n/**\n * @return {?}\n */\nfocus() { this._inputElement.focus(); }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'input[mdChipInputFor], input[matChipInputFor]',\r\n  host: {\r\n    'class': 'mat-chip-input mat-input-element',\r\n    '(keydown)': '_keydown($event)',\r\n    '(blur)': '_blur()',\r\n    '(focus)': '_focus()',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'chipList': [{ type: Input, args: ['mdChipInputFor', ] },],\n'addOnBlur': [{ type: Input, args: ['mdChipInputAddOnBlur', ] },],\n'separatorKeyCodes': [{ type: Input, args: ['mdChipInputSeparatorKeyCodes', ] },],\n'chipEnd': [{ type: Output, args: ['mdChipInputTokenEnd', ] },],\n'_matChipInputTokenEnd': [{ type: Output, args: ['matChipInputTokenEnd', ] },],\n'matChipList': [{ type: Input, args: ['matChipInputFor', ] },],\n'matAddOnBlur': [{ type: Input, args: ['matChipInputAddOnBlur', ] },],\n'matSeparatorKeyCodes': [{ type: Input, args: ['matChipInputSeparatorKeyCodes', ] },],\n'placeholder': [{ type: Input },],\n};\n}\n\nfunction MdChipInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipInput.ctorParameters;\n/** @type {?} */\nMdChipInput.propDecorators;\n/** @type {?} */\nMdChipInput.prototype.focused;\n/** @type {?} */\nMdChipInput.prototype._chipList;\n/** @type {?} */\nMdChipInput.prototype._addOnBlur;\n/** @type {?} */\nMdChipInput.prototype.separatorKeyCodes;\n/**\n * Emitted when a chip is to be added.\n * @type {?}\n */\nMdChipInput.prototype.chipEnd;\n/** @type {?} */\nMdChipInput.prototype._matChipInputTokenEnd;\n/** @type {?} */\nMdChipInput.prototype.placeholder;\n/**\n * The native input element to which this directive is attached.\n * @type {?}\n */\nMdChipInput.prototype._inputElement;\n/** @type {?} */\nMdChipInput.prototype._elementRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdChipList} from './chip-list';\r\nimport {MdBasicChip, MdChip, MdChipRemove} from './chip';\r\nimport {MdChipInput} from './chip-input';\nexport class MdChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [],\r\n  exports: [MdChipList, MdChip, MdChipInput, MdChipRemove, MdChipRemove, MdBasicChip],\r\n  declarations: [MdChipList, MdChip, MdChipInput, MdChipRemove,  MdChipRemove, MdBasicChip]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdChipsModule,MdChipListChange,MdChipList,MdChipEvent,MdChipSelectionChange,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdChipRemove,MdChipInputEvent,MdChipInput,MatBasicChip,MatChip,MatChipBase,MatChipEvent,MatChipInput,MatChipInputEvent,MatChipListChange,MatChipList,MatChipRemove,MatChipsModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ViewContainerRef} from '@angular/core';\r\nimport {Direction} from '@angular/cdk/bidi';\r\n\r\n/** Valid ARIA roles for a dialog element. */\r\nexport type DialogRole = 'dialog' | 'alertdialog';\r\n\r\n/** Possible overrides for a dialog's position. */\r\nexport interface DialogPosition {\r\n  top?: string;\r\n  bottom?: string;\r\n  left?: string;\r\n  right?: string;\r\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\rThis affects what is available for injection and the change detection order for the\rcomponent instantiated inside of the dialog. This does not affect where the dialog\rcontent will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n */\nid?: string;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string | string[] = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: Direction = 'ltr';\n/**\n * ID of the element that describes the dialog.\n */\nariaDescribedBy?: string | null = null;\r\n\r\n\r\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\r\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\rThis affects what is available for injection and the change detection order for the\rcomponent instantiated inside of the dialog. This does not affect where the dialog\rcontent will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n * @type {?}\n */\nMdDialogConfig.prototype.id;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMdDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMdDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMdDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMdDialogConfig.prototype.direction;\n/**\n * ID of the element that describes the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.ariaDescribedBy;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Inject,\r\n  OnDestroy,\r\n  Optional,\r\n  Renderer2,\r\n  Self,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  MATERIAL_COMPATIBILITY_MODE,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple\r\n} from '@angular/material/core';\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\n/**\n * Default color palette for round buttons (md-fab and md-mini-fab)\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\r\n  host: {'class': 'mat-button'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector:\r\n      'button[md-raised-button], button[mat-raised-button], ' +\r\n      'a[md-raised-button], a[mat-raised-button]',\r\n  host: {'class': 'mat-raised-button'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector:\r\n      'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\r\n  host: {'class': 'mat-icon-button'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\r\n                 anchor: MdAnchor) {\r\n    // Set the default color palette for the md-fab components.\r\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\r\n  host: {'class': 'mat-fab'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFab.ctorParameters;\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\rto all mini-fab buttons and also is responsible for setting the default color palette.\r\\@docs-private\n */\nexport class MdMiniFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\r\n                 anchor: MdAnchor) {\r\n    // Set the default color palette for the md-mini-fab components.\r\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\r\n  host: {'class': 'mat-mini-fab'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdMiniFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMiniFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMiniFab.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonBase.prototype._renderer;\n/** @type {?} */\nMdButtonBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MdButtonBase)));\n/**\n * Material design button.\n */\nexport class MdButton extends _MdButtonMixinBase\r\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _platform\n * @param {?} _focusMonitor\n */\nconstructor(renderer: Renderer2,\r\n              elementRef: ElementRef,\nprivate _platform: Platform,\nprivate _focusMonitor: FocusMonitor) {\r\n    super(renderer, elementRef);\r\n    this._focusMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\r\n    this._getHostElement().focus();\r\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\r\n    return this._elementRef.nativeElement;\r\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\n/**\n * Gets whether the button has one of the given attributes\rwith either an 'md-' or 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\r\n    // If not on the browser, say that there are none of the attributes present.\r\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\r\n    // detecting these attributes isn't necessary when not on the browser.\r\n    if (!this._platform.isBrowser) {\r\n      return false;\r\n    }\r\n\r\n    return unprefixedAttributeNames.some(suffix => {\r\n      const /** @type {?} */ el = this._getHostElement();\r\n\r\n      return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: `button[md-button], button[md-raised-button], button[md-icon-button],\r\n             button[md-fab], button[md-mini-fab],\r\n             button[mat-button], button[mat-raised-button], button[mat-icon-button],\r\n             button[mat-fab], button[mat-mini-fab]`,\r\n  host: {\r\n    '[disabled]': 'disabled || null',\r\n  },\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Platform, },\n{type: FocusMonitor, },\n];\n}\n\nfunction MdButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButton.ctorParameters;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMdButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMdButton.prototype._isIconButton;\n/** @type {?} */\nMdButton.prototype._platform;\n/** @type {?} */\nMdButton.prototype._focusMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MdAnchor extends MdButton {\n/**\n * @param {?} platform\n * @param {?} focusMonitor\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\r\n      platform: Platform,\r\n      focusMonitor: FocusMonitor,\r\n      elementRef: ElementRef,\r\n      renderer: Renderer2) {\r\n    super(renderer, elementRef, platform, focusMonitor);\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\r\n    // A disabled button shouldn't apply any actions\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n      event.stopImmediatePropagation();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: `a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\r\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\r\n  host: {\r\n    '[attr.tabindex]': 'disabled ? -1 : 0',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '(click)': '_haltDisabledEvents($event)',\r\n  },\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: FocusMonitor, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAnchor.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MdCommonModule, MdRippleModule} from '@angular/material/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {\r\n  MdAnchor,\r\n  MdButton,\r\n  MdMiniFab,\r\n  MdButtonCssMatStyler,\r\n  MdFab,\r\n  MdIconButtonCssMatStyler,\r\n  MdRaisedButtonCssMatStyler\r\n} from './button';\nexport class MdButtonModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    CommonModule,\r\n    MdRippleModule,\r\n    MdCommonModule,\r\n    A11yModule,\r\n  ],\r\n  exports: [\r\n    MdButton,\r\n    MdAnchor,\r\n    MdMiniFab,\r\n    MdFab,\r\n    MdCommonModule,\r\n    MdButtonCssMatStyler,\r\n    MdRaisedButtonCssMatStyler,\r\n    MdIconButtonCssMatStyler,\r\n  ],\r\n  declarations: [\r\n    MdButton,\r\n    MdAnchor,\r\n    MdMiniFab,\r\n    MdFab,\r\n    MdButtonCssMatStyler,\r\n    MdRaisedButtonCssMatStyler,\r\n    MdIconButtonCssMatStyler,\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor,MatButton,MatButtonBase,MatButtonCssMatStyler,MatButtonModule,MatAnchor,MatIconButtonCssMatStyler,MatFab,MatMiniFab,MatRaisedButtonCssMatStyler} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  forwardRef,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {UniqueSelectionDispatcher} from '@angular/material/core';\r\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\n\r\n/** Acceptable types for a button toggle. */\r\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * \\@docs-private\n */\nexport class MdButtonToggleGroupBase {}\r\nexport const /** @type {?} */ _MdButtonToggleGroupMixinBase = mixinDisabled(MdButtonToggleGroupBase);\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\rThis allows it to support [(ngModel)].\r\\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdButtonToggleGroup),\r\n  multi: true\r\n};\r\n\r\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n/**\n * The MdButtonToggle that emits the event.\n */\nsource: MdButtonToggle | null;\n/**\n * The value assigned to the MdButtonToggle.\n */\nvalue: any;\r\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup extends _MdButtonToggleGroupMixinBase\r\n    implements ControlValueAccessor, CanDisable {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MdButtonToggle | null = null;\n/**\n * The method to be called in order to update ngModel.\rNow `ngModel` binding is not supported in multiple selection mode.\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MdButtonToggle>;\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\r\n    return this._name;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\r\n    this._name = value;\r\n    this._updateButtonToggleNames();\r\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\r\n    return this._vertical;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\r\n    this._vertical = coerceBooleanProperty(value);\r\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\r\n    return this._value;\r\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\r\n    if (this._value != newValue) {\r\n      this._value = newValue;\r\n\r\n      this._updateSelectedButtonToggleFromValue();\r\n    }\r\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\r\n    return this._selected;\r\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle | null) {\r\n    this._selected = selected;\r\n    this.value = selected ? selected.value : null;\r\n\r\n    if (selected && !selected.checked) {\r\n      selected.checked = true;\r\n    }\r\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\r\n    super();\r\n  }\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\r\n    if (this._buttonToggles) {\r\n      this._buttonToggles.forEach((toggle) => {\r\n        toggle.name = this._name;\r\n      });\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\r\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\r\n\r\n    if (this._buttonToggles != null && !isAlreadySelected) {\r\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\r\n          buttonToggle => buttonToggle.value == this._value)[0];\r\n\r\n      if (matchingButtonToggle) {\r\n        this.selected = matchingButtonToggle;\r\n      } else if (this.value == null) {\r\n        this.selected = null;\r\n        this._buttonToggles.forEach(buttonToggle => {\r\n          buttonToggle.checked = false;\r\n        });\r\n      }\r\n    }\r\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\r\n    let /** @type {?} */ event = new MdButtonToggleChange();\r\n    event.source = this._selected;\r\n    event.value = this._value;\r\n    this._controlValueAccessorChangeFn(event.value);\r\n    this.change.emit(event);\r\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\r\\@param value Value to be set to the model.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\r\n    this.value = value;\r\n    this._changeDetector.markForCheck();\r\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\rImplemented as part of ControlValueAccessor.\r\\@param fn On change callback function.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\rImplemented as part of ControlValueAccessor.\r\\@param fn On touch callback function.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\r\\@param isDisabled Whether the component should be disabled.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\r\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\r\n  inputs: ['disabled'],\r\n  host: {\r\n    'role': 'radiogroup',\r\n    'class': 'mat-button-toggle-group',\r\n    '[class.mat-button-toggle-vertical]': 'vertical'\r\n  },\r\n  exportAs: 'mdButtonToggleGroup, matButtonToggleGroup',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * The method to be called in order to update ngModel.\rNow `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMdButtonToggleGroup.prototype.change;\n/** @type {?} */\nMdButtonToggleGroup.prototype._changeDetector;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple extends _MdButtonToggleGroupMixinBase\r\n    implements CanDisable {\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\r\n    return this._vertical;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\r\n    this._vertical = coerceBooleanProperty(value);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\r\n  exportAs: 'mdButtonToggleGroup, matButtonToggleGroup',\r\n  inputs: ['disabled'],\r\n  host: {\r\n    'class': 'mat-button-toggle-group',\r\n    '[class.mat-button-toggle-vertical]': 'vertical',\r\n    'role': 'group'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit, OnDestroy {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\rtake precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = false;\n/**\n * Unregister function for _buttonToggleDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\r\n\r\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MdButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\r\n    return `${this.id}-input`;\r\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\r\n    if (this._isSingleSelector && newCheckedState) {\r\n      // Notify all button toggles with the same name (in the same group) to un-check.\r\n      this._buttonToggleDispatcher.notify(this.id, this.name);\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    this._checked = newCheckedState;\r\n\r\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\r\n      this.buttonToggleGroup.selected = this;\r\n    }\r\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\r\n    return this._value;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\r\n    if (this._value != value) {\r\n      if (this.buttonToggleGroup != null && this.checked) {\r\n        this.buttonToggleGroup.value = value;\r\n      }\r\n      this._value = value;\r\n    }\r\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\r\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\r\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _changeDetectorRef\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\r\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusMonitor: FocusMonitor) {\r\n\r\n    this.buttonToggleGroup = toggleGroup;\r\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\r\n\r\n    if (this.buttonToggleGroup) {\r\n      this._removeUniqueSelectionListener =\r\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\r\n          if (id != this.id && name == this.name) {\r\n            this.checked = false;\r\n            this._changeDetectorRef.markForCheck();\r\n          }\r\n        });\r\n\r\n      this._type = 'radio';\r\n      this.name = this.buttonToggleGroup.name;\r\n      this._isSingleSelector = true;\r\n    } else {\r\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\r\n      // toggled on or off.\r\n      this._type = 'checkbox';\r\n      this._isSingleSelector = false;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    if (this.id == null) {\r\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\r\n    }\r\n\r\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\r\n      this._checked = true;\r\n    }\r\n    this._focusMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\r\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\r\n    this._inputElement.nativeElement.focus();\r\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\r\n    this.checked = !this.checked;\r\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\r\n    event.stopPropagation();\r\n\r\n    if (this._isSingleSelector) {\r\n      // Propagate the change one-way via the group, which will in turn mark this\r\n      // button toggle as checked.\r\n      let /** @type {?} */ groupValueChanged = this.buttonToggleGroup.selected != this;\r\n      this.checked = true;\r\n      this.buttonToggleGroup.selected = this;\r\n      this.buttonToggleGroup.onTouched();\r\n      if (groupValueChanged) {\r\n        this.buttonToggleGroup._emitChangeEvent();\r\n      }\r\n    } else {\r\n      this._toggle();\r\n    }\r\n\r\n    // Emit a change event when the native input does.\r\n    this._emitChangeEvent();\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `slide-toggle` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\r\n    let /** @type {?} */ event = new MdButtonToggleChange();\r\n    event.source = this;\r\n    event.value = this._value;\r\n    this.change.emit(event);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\r\n    this._removeUniqueSelectionListener();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-button-toggle, mat-button-toggle',\r\n  templateUrl: 'button-toggle.html',\r\n  styleUrls: ['button-toggle.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\r\n    '[class.mat-button-toggle-checked]': 'checked',\r\n    '[class.mat-button-toggle-disabled]': 'disabled',\r\n    'class': 'mat-button-toggle',\r\n    '[attr.id]': 'id',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\rtake precedence so this may be omitted.\n * @type {?}\n */\nMdButtonToggle.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdButtonToggle.prototype.ariaLabelledby;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/**\n * Unregister function for _buttonToggleDispatcher *\n * @type {?}\n */\nMdButtonToggle.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype.change;\n/** @type {?} */\nMdButtonToggle.prototype._changeDetectorRef;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusMonitor;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle} from './button-toggle';\r\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER, MdCommonModule} from '@angular/material/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdButtonToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule, A11yModule],\r\n  exports: [\r\n    MdButtonToggleGroup,\r\n    MdButtonToggleGroupMultiple,\r\n    MdButtonToggle,\r\n    MdCommonModule,\r\n  ],\r\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\r\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ToggleType,MdButtonToggleGroupBase,_MdButtonToggleGroupMixinBase,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle,MdButtonToggleModule,MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MatButtonToggle,MatButtonToggleChange,MatButtonToggleGroup,MatButtonToggleGroupBase,MatButtonToggleGroupMultiple,MatButtonToggleModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Component,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  Directive,\r\n  Input,\r\n} from '@angular/core';\n/**\n * Content of a card, needed as it's used as a selector in the API.\r\\@docs-private\n */\nexport class MdCardContent {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-card-content, mat-card-content',\r\n  host: {'class': 'mat-card-content'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardContent.ctorParameters;\n}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\r\\@docs-private\n */\nexport class MdCardTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `md-card-title, mat-card-title, [md-card-title], [mat-card-title],\r\n             [mdCardTitle], [matCardTitle]`,\r\n  host: {\r\n    'class': 'mat-card-title'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitle.ctorParameters;\n}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\r\\@docs-private\n */\nexport class MdCardSubtitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `md-card-subtitle, mat-card-subtitle, [md-card-subtitle], [mat-card-subtitle],\r\n             [mdCardSubtitle], [matCardSubtitle]`,\r\n  host: {\r\n    'class': 'mat-card-subtitle'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSubtitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSubtitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSubtitle.ctorParameters;\n}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\r\\@docs-private\n */\nexport class MdCardActions {\n/**\n * Position of the actions inside the card.\n */\nalign: 'start' | 'end' = 'start';\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-card-actions, mat-card-actions',\r\n  host: {\r\n    'class': 'mat-card-actions',\r\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n};\n}\n\nfunction MdCardActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardActions.ctorParameters;\n/** @type {?} */\nMdCardActions.propDecorators;\n/**\n * Position of the actions inside the card.\n * @type {?}\n */\nMdCardActions.prototype.align;\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\r\\@docs-private\n */\nexport class MdCardFooter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-card-footer, mat-card-footer',\r\n  host: {'class': 'mat-card-footer'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardFooter.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\r\\@docs-private\n */\nexport class MdCardImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-card-image], [mat-card-image], [mdCardImage], [matCardImage]',\r\n  host: {'class': 'mat-card-image'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\r\\@docs-private\n */\nexport class MdCardSmImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-card-sm-image], [mat-card-sm-image], [mdCardImageSmall], [matCardImageSmall]',\r\n  host: {'class': 'mat-card-sm-image'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSmImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSmImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSmImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\r\\@docs-private\n */\nexport class MdCardMdImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-card-md-image], [mat-card-md-image], [mdCardImageMedium], [matCardImageMedium]',\r\n  host: {'class': 'mat-card-md-image'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardMdImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardMdImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardMdImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\r\\@docs-private\n */\nexport class MdCardLgImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-card-lg-image], [mat-card-lg-image], [mdCardImageLarge], [matCardImageLarge]',\r\n  host: {'class': 'mat-card-lg-image'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardLgImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardLgImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardLgImage.ctorParameters;\n}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\r\\@docs-private\n */\nexport class MdCardXlImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-card-xl-image], [mat-card-xl-image], [mdCardImageXLarge], [matCardImageXLarge]',\r\n  host: {'class': 'mat-card-xl-image'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardXlImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardXlImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardXlImage.ctorParameters;\n}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\r\\@docs-private\n */\nexport class MdCardAvatar {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-card-avatar], [mat-card-avatar], [mdCardAvatar], [matCardAvatar]',\r\n  host: {'class': 'mat-card-avatar'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardAvatar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardAvatar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardAvatar.ctorParameters;\n}\n\n/**\n * A basic content container component that adds the styles of a Material design card.\r\rWhile this component can be used alone, it also provides a number\rof preset styles for common card sections, including:\r- md-card-title\r- md-card-subtitle\r- md-card-content\r- md-card-actions\r- md-card-footer\n */\nexport class MdCard {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-card, mat-card',\r\n  templateUrl: 'card.html',\r\n  styleUrls: ['card.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {'class': 'mat-card'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCard_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCard.ctorParameters;\n}\n\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\rpreset header section (i.e. a title, subtitle, and avatar layout).\r\\@docs-private\n */\nexport class MdCardHeader {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-card-header, mat-card-header',\r\n  templateUrl: 'card-header.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {'class': 'mat-card-header'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardHeader.ctorParameters;\n}\n\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\rlayout that groups an image with a title section.\r\\@docs-private\n */\nexport class MdCardTitleGroup {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-card-title-group, mat-card-title-group',\r\n  templateUrl: 'card-title-group.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {'class': 'mat-card-title-group'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitleGroup.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {\r\n  MdCard,\r\n  MdCardHeader,\r\n  MdCardTitleGroup,\r\n  MdCardContent,\r\n  MdCardTitle,\r\n  MdCardSubtitle,\r\n  MdCardActions,\r\n  MdCardFooter,\r\n  MdCardSmImage,\r\n  MdCardMdImage,\r\n  MdCardLgImage,\r\n  MdCardImage,\r\n  MdCardXlImage,\r\n  MdCardAvatar,\r\n} from './card';\nexport class MdCardModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule],\r\n  exports: [\r\n    MdCard,\r\n    MdCardHeader,\r\n    MdCardTitleGroup,\r\n    MdCardContent,\r\n    MdCardTitle,\r\n    MdCardSubtitle,\r\n    MdCardActions,\r\n    MdCardFooter,\r\n    MdCardSmImage,\r\n    MdCardMdImage,\r\n    MdCardLgImage,\r\n    MdCardImage,\r\n    MdCardXlImage,\r\n    MdCardAvatar,\r\n    MdCommonModule,\r\n  ],\r\n  declarations: [\r\n    MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\r\n    MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,\r\n    MdCardXlImage, MdCardAvatar,\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup,MdCardModule,MatCard,MatCardActions,MatCardAvatar,MatCardContent,MatCardFooter,MatCardHeader,MatCardImage,MatCardLgImage,MatCardMatImage,MatCardModule,MatCardSmImage,MatCardSubtitle,MatCardTitle,MatCardTitleGroup,MatCardXlImage} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\r\n\r\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\rMeant to be used when the checkbox is purely decorative and a large number of them will be\rincluded, such as for the options in a multi-select. Uses no SVGs or complex animations.\rNote that theming is meant to be handled by the parent element, e.g.\r`mat-primary .mat-pseudo-checkbox`.\r\rNote that this component will be completely invisible to screen-reader users. This is *not*\rinterchangeable with <md-checkbox> and should *not* be used if the user would directly interact\rwith the checkbox. The pseudo-checkbox should only be used as an implementation detail of\rmore complex components that appropriately handle selected / checked state.\r\\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\r\n  styleUrls: ['pseudo-checkbox.css'],\r\n  template: '',\r\n  host: {\r\n    'class': 'mat-pseudo-checkbox',\r\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\r\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\r\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdPseudoCheckboxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  exports: [MdPseudoCheckbox],\r\n  declarations: [MdPseudoCheckbox]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPseudoCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckboxModule.ctorParameters;\n}\n\r\n\r\n\r\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\r\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdOptgroupBase { }\r\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\r\n\r\n// Counter for unique group ids.\r\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-optgroup, mat-optgroup',\r\n  templateUrl: 'optgroup.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled'],\r\n  host: {\r\n    'class': 'mat-optgroup',\r\n    'role': 'group',\r\n    '[class.mat-optgroup-disabled]': 'disabled',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-labelledby]': '_labelId',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {MATERIAL_COMPATIBILITY_MODE} from '../compatibility/compatibility';\r\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\rthe component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\r\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\r\n    if (value !== this._multiple) {\r\n      this._multiple = value;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\r\n    this._disableRipple = value;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MdOptgroup) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\rAn active option displays styles as if it is focused, but the\rfocus is actually retained somewhere else. This comes in handy\rfor components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\r\n    return this._active;\r\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\rselect's trigger.\n * @return {?}\n */\nget viewValue(): string {\r\n    // TODO(kara): Add input property alternative for node envs.\r\n    return (this._getHostElement().textContent || '').trim();\r\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\r\n    this._selected = true;\r\n    this._changeDetectorRef.markForCheck();\r\n    this._emitSelectionChangeEvent();\r\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\r\n    this._selected = false;\r\n    this._changeDetectorRef.markForCheck();\r\n    this._emitSelectionChangeEvent();\r\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\r\n    const /** @type {?} */ element = this._getHostElement();\r\n\r\n    if (typeof element.focus === 'function') {\r\n      element.focus();\r\n    }\r\n  }\n/**\n * This method sets display styles on the option to make it appear\ractive. This is used by the ActiveDescendantKeyManager so key\revents will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\r\n    if (!this._active) {\r\n      this._active = true;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * This method removes display styles on the option that made it appear\ractive. This is used by the ActiveDescendantKeyManager so key\revents will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\r\n    if (this._active) {\r\n      this._active = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * Gets the label to be used when determining whether the option should be focused.\n * @return {?}\n */\ngetLabel(): string {\r\n    return this.viewValue;\r\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\r\n      this._selectViaInteraction();\r\n\r\n      // Prevent the page from scrolling down and form submits.\r\n      event.preventDefault();\r\n    }\r\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\rdetermine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\r\n    if (!this.disabled) {\r\n      this._selected = this.multiple ? !this._selected : true;\r\n      this._changeDetectorRef.markForCheck();\r\n      this._emitSelectionChangeEvent(true);\r\n    }\r\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\r\n    return this.disabled ? '-1' : '0';\r\n  }\n/**\n * Gets the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\r\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\r\n  }\n/**\n * Counts the amount of option group labels that precede the specified option.\r\\@param optionIndex Index of the option at which to start counting.\r\\@param options Flat list of all of the options.\r\\@param optionGroups Flat list of all of the option groups.\n * @param {?} optionIndex\n * @param {?} options\n * @param {?} optionGroups\n * @return {?}\n */\nstatic countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MdOption>,\r\n    optionGroups: QueryList<MdOptgroup>): number {\r\n\r\n    if (optionGroups.length) {\r\n      let /** @type {?} */ optionsArray = options.toArray();\r\n      let /** @type {?} */ groups = optionGroups.toArray();\r\n      let /** @type {?} */ groupCounter = 0;\r\n\r\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\r\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\r\n          groupCounter++;\r\n        }\r\n      }\r\n\r\n      return groupCounter;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-option, mat-option',\r\n  host: {\r\n    'role': 'option',\r\n    '[attr.tabindex]': '_getTabIndex()',\r\n    '[class.mat-selected]': 'selected',\r\n    '[class.mat-option-multiple]': 'multiple',\r\n    '[class.mat-active]': 'active',\r\n    '[id]': 'id',\r\n    '[attr.aria-selected]': 'selected.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[class.mat-option-disabled]': 'disabled',\r\n    '(click)': '_selectViaInteraction()',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    'class': 'mat-option',\r\n  },\r\n  templateUrl: 'option.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/** @type {?} */\nMdOption.prototype._multiple;\n/** @type {?} */\nMdOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._changeDetectorRef;\n/** @type {?} */\nMdOption.prototype.group;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MdRippleModule} from '../ripple/index';\r\nimport {MdPseudoCheckboxModule} from '../selection/index';\r\nimport {MdOption} from './option';\r\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdRippleModule, CommonModule, MdPseudoCheckboxModule],\r\n  exports: [MdOption, MdOptgroup],\r\n  declarations: [MdOption, MdOptgroup]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\r\n\r\n\r\nexport {MdOptionSelectionChange,MdOption} from './option';\r\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\r\\@param element\r\\@param transformValue\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\r\n  // It's important to trim the result, because the browser will ignore the set operation\r\n  // if the string contains only whitespace.\r\n  let /** @type {?} */ value = transformValue.trim();\r\n\r\n  element.style.transform = value;\r\n  element.style.webkitTransform = value;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nexport class MdError {\r\n   id: string = `mat-error-${nextUniqueId++}`;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-error, mat-error',\r\n  host: {\r\n    'class': 'mat-error',\r\n    'role': 'alert',\r\n    '[attr.id]': 'id',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdError_tsickle_Closure_declarations() {\n/** @type {?} */\nMdError.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdError.ctorParameters;\n/** @type {?} */\nMdError.propDecorators;\n/** @type {?} */\nMdError.prototype.id;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Observable} from 'rxjs/Observable';\r\nimport {NgControl} from '@angular/forms';\n/**\n * An interface which allows a control to work inside of a `MdFormField`.\n * @abstract\n */\nexport abstract class MdFormFieldControl<T> {\n/**\n * The value of the control.\n */\nvalue: T;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\rneeds to run change detection.\n */\nreadonly stateChanges: Observable<void>;\n/**\n * The element ID for this control.\n */\nreadonly id: string;\n/**\n * The placeholder for this control.\n */\nreadonly placeholder: string;\n/**\n * Gets the NgControl for this control.\n */\nreadonly ngControl: NgControl | null;\n/**\n * Whether the control is focused.\n */\nreadonly focused: boolean;\n/**\n * Whether the control is empty.\n */\nreadonly empty: boolean;\n/**\n * Whether the `MdFormField` label should try to float.\n */\nreadonly shouldPlaceholderFloat: boolean;\n/**\n * Whether the control is required.\n */\nreadonly required: boolean;\n/**\n * Whether the control is disabled.\n */\nreadonly disabled: boolean;\n/**\n * Whether the control is in an error state.\n */\nreadonly errorState: boolean;\n/**\n * An optional name for the control type that can be used to distinguish `md-form-field` elements\rbased on their control type. The form field will add a class,\r`mat-form-field-type-{{controlType}}` to its root element.\n */\nreadonly controlType?: string;\n/**\n * Sets the list of element IDs that currently describe this control.\n * @abstract\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) {}\n/**\n * Handles a click on the control's container.\n * @abstract\n * @param {?} event\n * @return {?}\n */\nonContainerClick(event: MouseEvent) {}\r\n}\n\nfunction MdFormFieldControl_tsickle_Closure_declarations() {\n/**\n * The value of the control.\n * @type {?}\n */\nMdFormFieldControl.prototype.value;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\rneeds to run change detection.\n * @type {?}\n */\nMdFormFieldControl.prototype.stateChanges;\n/**\n * The element ID for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.id;\n/**\n * The placeholder for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.placeholder;\n/**\n * Gets the NgControl for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.ngControl;\n/**\n * Whether the control is focused.\n * @type {?}\n */\nMdFormFieldControl.prototype.focused;\n/**\n * Whether the control is empty.\n * @type {?}\n */\nMdFormFieldControl.prototype.empty;\n/**\n * Whether the `MdFormField` label should try to float.\n * @type {?}\n */\nMdFormFieldControl.prototype.shouldPlaceholderFloat;\n/**\n * Whether the control is required.\n * @type {?}\n */\nMdFormFieldControl.prototype.required;\n/**\n * Whether the control is disabled.\n * @type {?}\n */\nMdFormFieldControl.prototype.disabled;\n/**\n * Whether the control is in an error state.\n * @type {?}\n */\nMdFormFieldControl.prototype.errorState;\n/**\n * An optional name for the control type that can be used to distinguish `md-form-field` elements\rbased on their control type. The form field will add a class,\r`mat-form-field-type-{{controlType}}` to its root element.\n * @type {?}\n */\nMdFormFieldControl.prototype.controlType;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n */\nid: string = `mat-hint-${nextUniqueId++}`;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-hint, mat-hint',\r\n  host: {\r\n    'class': 'mat-hint',\r\n    '[class.mat-right]': 'align == \"end\"',\r\n    '[attr.id]': 'id',\r\n    // Remove align attribute to prevent it from interfering with layout.\r\n    '[attr.align]': 'null',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive} from '@angular/core';\n/**\n * The floating placeholder for an `MdFormField`.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-placeholder, mat-placeholder'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive} from '@angular/core';\n/**\n * Prefix to be placed the the front of the form field.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdPrefix], [matPrefix]',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive} from '@angular/core';\n/**\n * Suffix to be placed at the end of the form field.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdSuffix], [matSuffix]',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {first, startWith} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  QueryList, Renderer2,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  FloatPlaceholderType,\r\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\r\n  PlaceholderOptions,\r\n} from '@angular/material/core';\r\nimport {fromEvent} from 'rxjs/observable/fromEvent';\r\nimport {MdError} from './error';\r\nimport {MdFormFieldControl} from './form-field-control';\r\nimport {\r\n  getMdFormFieldDuplicatedHintError,\r\n  getMdFormFieldMissingControlError,\r\n  getMdFormFieldPlaceholderConflictError,\r\n} from './form-field-errors';\r\nimport {MdHint} from './hint';\r\nimport {MdPlaceholder} from './placeholder';\r\nimport {MdPrefix} from './prefix';\r\nimport {MdSuffix} from './suffix';\r\n\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nexport class MdFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use `color` instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\r\n    this._hideRequiredMarker = coerceBooleanProperty(value);\r\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n */\nprivate _showAlwaysAnimate = false;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() {\r\n    return this._floatPlaceholder === 'always' && !this._showAlwaysAnimate;\r\n  }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the form field hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\r\n    this._hintLabel = value;\r\n    this._processHints();\r\n  }\nprivate _hintLabel = '';\r\n\r\n  // Unique id for the hint label.\r\n  _hintLabelId: string = `md-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\r\n    if (value !== this._floatPlaceholder) {\r\n      this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the form field's underline element.\n */\nunderlineRef: ElementRef;\r\n   _connectionContainerRef: ElementRef;\nprivate _placeholder: ElementRef;\r\n   _control: MdFormFieldControl<any>;\r\n   _placeholderChild: MdPlaceholder;\r\n   _errorChildren: QueryList<MdError>;\r\n   _hintChildren: QueryList<MdHint>;\r\n   _prefixChildren: QueryList<MdPrefix>;\r\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _changeDetectorRef: ChangeDetectorRef,\r\n        placeholderOptions: PlaceholderOptions) {\r\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\r\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._validateControlChild();\r\n    if (this._control.controlType) {\r\n      this._renderer.addClass(\r\n          this._elementRef.nativeElement, `mat-form-field-type-${this._control.controlType}`);\r\n    }\r\n\r\n    // Subscribe to changes in the child control state in order to update the form field UI.\r\n    startWith.call(this._control.stateChanges, null).subscribe(() => {\r\n      this._validatePlaceholders();\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    let /** @type {?} */ ngControl = this._control.ngControl;\r\n    if (ngControl && ngControl.valueChanges) {\r\n      ngControl.valueChanges.subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n\r\n    // Re-validate when the number of hints changes.\r\n    startWith.call(this._hintChildren.changes, null).subscribe(() => {\r\n      this._processHints();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    // Update the aria-described by when the number of errors changes.\r\n    startWith.call(this._errorChildren.changes, null).subscribe(() => {\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\r\n    this._validateControlChild();\r\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\r\n    // Avoid animations on load.\r\n    this._subscriptAnimationState = 'enter';\r\n    this._changeDetectorRef.detectChanges();\r\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\r\n    let /** @type {?} */ ngControl = this._control ? this._control.ngControl : null;\r\n    return ngControl && ( /** @type {?} */((ngControl as any)))[prop];\r\n  }\n/**\n * Whether the form field has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() {\r\n    return !!(this._control.placeholder || this._placeholderChild);\r\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\r\n    return (this._errorChildren && this._errorChildren.length > 0 &&\r\n        this._control.errorState) ? 'error' : 'hint';\r\n  }\n/**\n * Animates the placeholder up and locks it in position.\n * @return {?}\n */\n_animateAndLockPlaceholder(): void {\r\n    if (this._placeholder && this._canPlaceholderFloat) {\r\n      this._showAlwaysAnimate = true;\r\n      this._floatPlaceholder = 'always';\r\n\r\n      first.call(fromEvent(this._placeholder.nativeElement, 'transitionend')).subscribe(() => {\r\n        this._showAlwaysAnimate = false;\r\n      });\r\n\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\ror child element with the `md-placeholder` directive).\n * @return {?}\n */\nprivate _validatePlaceholders() {\r\n    if (this._control.placeholder && this._placeholderChild) {\r\n      throw getMdFormFieldPlaceholderConflictError();\r\n    }\r\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\r\n    this._validateHints();\r\n    this._syncDescribedByIds();\r\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\rattribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\r\n    if (this._hintChildren) {\r\n      let /** @type {?} */ startHint: MdHint;\r\n      let /** @type {?} */ endHint: MdHint;\r\n      this._hintChildren.forEach((hint: MdHint) => {\r\n        if (hint.align == 'start') {\r\n          if (startHint || this.hintLabel) {\r\n            throw getMdFormFieldDuplicatedHintError('start');\r\n          }\r\n          startHint = hint;\r\n        } else if (hint.align == 'end') {\r\n          if (endHint) {\r\n            throw getMdFormFieldDuplicatedHintError('end');\r\n          }\r\n          endHint = hint;\r\n        }\r\n      });\r\n    }\r\n  }\n/**\n * Sets the list of element IDs that describe the child control. This allows the control to update\rits `aria-describedby` attribute accordingly.\n * @return {?}\n */\nprivate _syncDescribedByIds() {\r\n    if (this._control) {\r\n      let /** @type {?} */ ids: string[] = [];\r\n\r\n      if (this._getDisplayedMessages() === 'hint') {\r\n        let /** @type {?} */ startHint = this._hintChildren ?\r\n            this._hintChildren.find(hint => hint.align === 'start') : null;\r\n        let /** @type {?} */ endHint = this._hintChildren ?\r\n            this._hintChildren.find(hint => hint.align === 'end') : null;\r\n\r\n        if (startHint) {\r\n          ids.push(startHint.id);\r\n        } else if (this._hintLabel) {\r\n          ids.push(this._hintLabelId);\r\n        }\r\n\r\n        if (endHint) {\r\n          ids.push(endHint.id);\r\n        }\r\n      } else if (this._errorChildren) {\r\n        ids = this._errorChildren.map(mdError => mdError.id);\r\n      }\r\n\r\n      this._control.setDescribedByIds(ids);\r\n    }\r\n  }\n/**\n * Throws an error if the form field's control is missing.\n * @return {?}\n */\nprotected _validateControlChild() {\r\n    if (!this._control) {\r\n      throw getMdFormFieldMissingControlError();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\r\n  selector: 'md-input-container, mat-input-container, md-form-field, mat-form-field',\r\n  templateUrl: 'form-field.html',\r\n  // MdInput is a directive and can't have styles, so we need to include its styles here.\r\n  // The MdInput styles are fairly minimal so it shouldn't be a big deal for people who aren't using\r\n  // MdInput.\r\n  styleUrls: ['form-field.css', '../input/input.css'],\r\n  animations: [\r\n    // TODO(mmalerba): Use angular animations for placeholder animation as well.\r\n    trigger('transitionMessages', [\r\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\r\n      transition('void => enter', [\r\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\r\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\r\n      ]),\r\n    ]),\r\n  ],\r\n  host: {\r\n    'class': 'mat-input-container mat-form-field',\r\n    '[class.mat-input-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-can-float]': '_canPlaceholderFloat',\r\n    '[class.mat-form-field-should-float]': '_control.shouldPlaceholderFloat || _shouldAlwaysFloat',\r\n    '[class.mat-focused]': '_control.focused',\r\n    '[class.mat-primary]': 'color == \"primary\"',\r\n    '[class.mat-accent]': 'color == \"accent\"',\r\n    '[class.mat-warn]': 'color == \"warn\"',\r\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\r\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\r\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\r\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\r\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\r\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\r\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_connectionContainerRef': [{ type: ViewChild, args: ['connectionContainer', ] },],\n'_placeholder': [{ type: ViewChild, args: ['placeholder', ] },],\n'_control': [{ type: ContentChild, args: [MdFormFieldControl, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdError, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdFormField_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormField.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormField.ctorParameters;\n/** @type {?} */\nMdFormField.propDecorators;\n/** @type {?} */\nMdFormField.prototype._placeholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n * @type {?}\n */\nMdFormField.prototype.color;\n/** @type {?} */\nMdFormField.prototype._hideRequiredMarker;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n * @type {?}\n */\nMdFormField.prototype._showAlwaysAnimate;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdFormField.prototype._subscriptAnimationState;\n/** @type {?} */\nMdFormField.prototype._hintLabel;\n/** @type {?} */\nMdFormField.prototype._hintLabelId;\n/** @type {?} */\nMdFormField.prototype._floatPlaceholder;\n/**\n * Reference to the form field's underline element.\n * @type {?}\n */\nMdFormField.prototype.underlineRef;\n/** @type {?} */\nMdFormField.prototype._connectionContainerRef;\n/** @type {?} */\nMdFormField.prototype._placeholder;\n/** @type {?} */\nMdFormField.prototype._control;\n/** @type {?} */\nMdFormField.prototype._placeholderChild;\n/** @type {?} */\nMdFormField.prototype._errorChildren;\n/** @type {?} */\nMdFormField.prototype._hintChildren;\n/** @type {?} */\nMdFormField.prototype._prefixChildren;\n/** @type {?} */\nMdFormField.prototype._suffixChildren;\n/** @type {?} */\nMdFormField.prototype._elementRef;\n/** @type {?} */\nMdFormField.prototype._renderer;\n/** @type {?} */\nMdFormField.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MdError} from './error';\r\nimport {MdFormField} from './form-field';\r\nimport {MdHint} from './hint';\r\nimport {MdPlaceholder} from './placeholder';\r\nimport {MdPrefix} from './prefix';\r\nimport {MdSuffix} from './suffix';\nexport class MdFormFieldModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  declarations: [\r\n    MdError,\r\n    MdHint,\r\n    MdFormField,\r\n    MdPlaceholder,\r\n    MdPrefix,\r\n    MdSuffix,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    PlatformModule,\r\n  ],\r\n  exports: [\r\n    MdError,\r\n    MdHint,\r\n    MdFormField,\r\n    MdPlaceholder,\r\n    MdPrefix,\r\n    MdSuffix,\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdFormFieldModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormFieldModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormFieldModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdFormFieldModule,MdError,MdFormField,MdFormFieldControl,getMdFormFieldPlaceholderConflictError,getMdFormFieldDuplicatedHintError,getMdFormFieldMissingControlError,MdHint,MdPlaceholder,MdPrefix,MdSuffix,MatFormFieldModule,MatError,MatFormField,MatFormFieldControl,MatHint,MatPlaceholder,MatPrefix,MatSuffix} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Input,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  Output,\r\n} from '@angular/core';\r\nimport {MdOption, MdOptgroup} from '@angular/material/core';\r\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\rthe component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected\n */\nexport class MdAutocompleteSelectedEvent {\n/**\n * @param {?} source\n * @param {?} option\n */\nconstructor(public source: MdAutocomplete,\npublic option: MdOption) { }\r\n}\n\nfunction MdAutocompleteSelectedEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteSelectedEvent.prototype.source;\n/** @type {?} */\nMdAutocompleteSelectedEvent.prototype.option;\n}\n\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager<MdOption>;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n/**\n * \\@docs-private\n */\ntemplate: TemplateRef<any>;\n/**\n * Element for the panel containing the autocomplete options.\n */\npanel: ElementRef;\n/**\n * \\@docs-private\n */\noptions: QueryList<MdOption>;\n/**\n * \\@docs-private\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: ((value: any) => string) | null = null;\n/**\n * Event that is emitted whenever an option from the list is selected.\n */\noptionSelected: EventEmitter<MdAutocompleteSelectedEvent> =\r\n      new EventEmitter<MdAutocompleteSelectedEvent>();\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._keyManager = new ActiveDescendantKeyManager<MdOption>(this.options).withWrap();\r\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display options\rabove or below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\r\n    if (this.panel) {\r\n      this.panel.nativeElement.scrollTop = scrollTop;\r\n    }\r\n  }\n/**\n * Returns the panel's scrollTop.\n * @return {?}\n */\n_getScrollTop(): number {\r\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\r\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility(): void {\r\n    Promise.resolve().then(() => {\r\n      this.showPanel = !!this.options.length;\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\n/**\n * Emits the `select` event.\n * @param {?} option\n * @return {?}\n */\n_emitSelectEvent(option: MdOption): void {\r\n    const /** @type {?} */ event = new MdAutocompleteSelectedEvent(this, option);\r\n    this.optionSelected.emit(event);\r\n  }\n/**\n * Sets a class on the panel based on whether it is visible.\n * @return {?}\n */\n_getClassList() {\r\n    return {\r\n      'mat-autocomplete-visible': this.showPanel,\r\n      'mat-autocomplete-hidden': !this.showPanel\r\n    };\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-autocomplete, mat-autocomplete',\r\n  templateUrl: 'autocomplete.html',\r\n  styleUrls: ['autocomplete.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  exportAs: 'mdAutocomplete, matAutocomplete',\r\n  host: {\r\n    'class': 'mat-autocomplete'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'displayWith': [{ type: Input },],\n'optionSelected': [{ type: Output },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.template;\n/**\n * Element for the panel containing the autocomplete options.\n * @type {?}\n */\nMdAutocomplete.prototype.panel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.options;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.optionGroups;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Event that is emitted whenever an option from the list is selected.\n * @type {?}\n */\nMdAutocomplete.prototype.optionSelected;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\r\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  ConnectedPositionStrategy,\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n  PositionStrategy,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {filter, first, map, RxChain, switchMap} from '@angular/cdk/rxjs';\r\nimport {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Host,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {MdOption, MdOptionSelectionChange} from '@angular/material/core';\r\nimport {MdFormField} from '@angular/material/form-field';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {fromEvent} from 'rxjs/observable/fromEvent';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MdAutocomplete} from './autocomplete';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('md-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\n/**\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MD_AUTOCOMPLETE_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\r\\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\r\n  multi: true\r\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nexport function getMdAutocompleteMissingPanelError(): Error {\r\n  return Error('Attempting to open an undefined instance of `md-autocomplete`. ' +\r\n               'Make sure that the id passed to the `mdAutocomplete` is correct and that ' +\r\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\r\n}\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef | null;\nprivate _portal: TemplatePortal<any>;\nprivate _panelOpen: boolean = false;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * The subscription for closing actions (some are bound to document).\n */\nprivate _closingActionsSubscription: Subscription;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\r\n\r\n  /* The autocomplete panel to be attached to this trigger. */\r\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\r\n    return this.autocomplete;\r\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\r\n    this.autocomplete = autocomplete;\r\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _zone\n * @param {?} _changeDetectorRef\n * @param {?} _scrollStrategy\n * @param {?} _dir\n * @param {?} _formField\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _zone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _scrollStrategy,\nprivate _dir: Directionality,\nprivate _formField: MdFormField,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._destroyPanel();\r\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\r\n    return this._panelOpen && this.autocomplete.showPanel;\r\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\r\n    this._attachOverlay();\r\n    this._floatPlaceholder();\r\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\r\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\r\n      this._overlayRef.detach();\r\n      this._closingActionsSubscription.unsubscribe();\r\n    }\r\n\r\n    this._resetPlaceholder();\r\n\r\n    if (this._panelOpen) {\r\n      this._panelOpen = false;\r\n\r\n      // We need to trigger change detection manually, because\r\n      // `fromEvent` doesn't seem to do it at the proper time.\r\n      // This ensures that the placeholder is reset when the\r\n      // user clicks outside.\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\rwhen an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\r\n    return merge(\r\n      this.optionSelections,\r\n      this.autocomplete._keyManager.tabOut,\r\n      this._outsideClickStream\r\n    );\r\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\r\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\r\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption | null {\r\n    if (this.autocomplete && this.autocomplete._keyManager) {\r\n      return this.autocomplete._keyManager.activeItem;\r\n    }\r\n\r\n    return null;\r\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\r\n    if (!this._document) {\r\n      return observableOf(null);\r\n    }\r\n\r\n    return RxChain.from(merge(\r\n      fromEvent(this._document, 'click'),\r\n      fromEvent(this._document, 'touchend')\r\n    )).call(filter, (event: MouseEvent | TouchEvent) => {\r\n      const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\r\n      const /** @type {?} */ formField = this._formField ?\r\n          this._formField._elementRef.nativeElement : null;\r\n\r\n      return this._panelOpen &&\r\n             clickTarget !== this._element.nativeElement &&\r\n             (!formField || !formField.contains(clickTarget)) &&\r\n             (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\r\n    }).result();\r\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\rrequired to integrate with Angular's core forms API.\r\r\\@param value New value to be written to the model.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\r\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\r\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\rchanges from user input. Part of the ControlValueAccessor interface\rrequired to integrate with Angular's core forms API.\r\r\\@param fn Callback to be triggered when the value changes.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\rby the user. Part of the ControlValueAccessor interface required\rto integrate with Angular's core forms API.\r\r\\@param fn Callback to be triggered when the component has been touched.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\r\n    this._onTouched = fn;\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ESCAPE && this.panelOpen) {\r\n      this._resetActiveItem();\r\n      this.closePanel();\r\n      event.stopPropagation();\r\n    } else if (this.activeOption && event.keyCode === ENTER && this.panelOpen) {\r\n      this.activeOption._selectViaInteraction();\r\n      this._resetActiveItem();\r\n      event.preventDefault();\r\n    } else {\r\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\r\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\r\n\r\n      if (this.panelOpen) {\r\n        this.autocomplete._keyManager.onKeydown(event);\r\n      } else if (isArrowKey) {\r\n        this.openPanel();\r\n      }\r\n\r\n      Promise.resolve().then(() => {\r\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\r\n          this._scrollToOption();\r\n        }\r\n      });\r\n    }\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\r\n    // We need to ensure that the input is focused, because IE will fire the `input`\r\n    // event on focus/blur/load if the input has a placeholder. See:\r\n    // https://connect.microsoft.com/IE/feedback/details/885747/\r\n    if (document.activeElement === event.target) {\r\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\r\n      this.openPanel();\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_handleFocus(): void {\r\n    this._attachOverlay();\r\n    this._floatPlaceholder(true);\r\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\rThis causes the value to jump when selecting an option with the mouse.\rThis method manually floats the placeholder until the panel can be closed.\r\\@param shouldAnimate Whether the placeholder should be animated when it is floated.\n * @param {?=} shouldAnimate\n * @return {?}\n */\nprivate _floatPlaceholder(shouldAnimate = false): void {\r\n    if (this._formField && this._formField.floatPlaceholder === 'auto') {\r\n      if (shouldAnimate) {\r\n        this._formField._animateAndLockPlaceholder();\r\n      } else {\r\n        this._formField.floatPlaceholder = 'always';\r\n      }\r\n\r\n      this._manuallyFloatingPlaceholder = true;\r\n    }\r\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\r\n    if (this._manuallyFloatingPlaceholder) {\r\n      this._formField.floatPlaceholder = 'auto';\r\n      this._manuallyFloatingPlaceholder = false;\r\n    }\r\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\rto reveal options below the fold. First, we find the offset of the option from the top\rof the panel. If that offset is below the fold, the new scrollTop will be the offset -\rthe panel height + the option height, so the active option will be just visible at the\rbottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\rwill become the offset. If that offset is visible within the panel already, the scrollTop is\rnot adjusted.\n * @return {?}\n */\nprivate _scrollToOption(): void {\r\n    const /** @type {?} */ activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\r\n    const /** @type {?} */ labelCount = MdOption.countGroupLabelsBeforeOption(activeOptionIndex,\r\n        this.autocomplete.options, this.autocomplete.optionGroups);\r\n    const /** @type {?} */ optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\r\n    const /** @type {?} */ panelTop = this.autocomplete._getScrollTop();\r\n\r\n    if (optionOffset < panelTop) {\r\n      // Scroll up to reveal selected option scrolled above the panel top\r\n      this.autocomplete._setScrollTop(optionOffset);\r\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\r\n      // Scroll down to reveal selected option scrolled below the panel bottom\r\n      const /** @type {?} */ newScrollTop =\r\n          Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\r\n      this.autocomplete._setScrollTop(newScrollTop);\r\n    }\r\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\rstream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): Subscription {\r\n    const /** @type {?} */ firstStable = first.call(this._zone.onStable.asObservable());\r\n    const /** @type {?} */ optionChanges = map.call(this.autocomplete.options.changes, () =>\r\n      this._positionStrategy.recalculateLastPosition());\r\n\r\n    // When the zone is stable initially, and when the option list changes...\r\n    return RxChain.from(merge(firstStable, optionChanges))\r\n      // create a new stream of panelClosingActions, replacing any previous streams\r\n      // that were created, and flatten it so our stream only emits closing events...\r\n      .call(switchMap, () => {\r\n        this._resetActiveItem();\r\n        this.autocomplete._setVisibility();\r\n        return this.panelClosingActions;\r\n      })\r\n      // when the first closing event occurs...\r\n      .call(first)\r\n      // set the value, close the panel, and complete.\r\n      .subscribe(event => this._setValueAndClose(event));\r\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\r\n    if (this._overlayRef) {\r\n      this.closePanel();\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\r\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\r\n\r\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\r\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\r\n    const /** @type {?} */ inputValue = toDisplay != null ? toDisplay : '';\r\n\r\n    // If it's used within a `MdFormField`, we should set it through the property so it can go\r\n    // through change detection.\r\n    if (this._formField) {\r\n      this._formField._control.value = inputValue;\r\n    } else {\r\n      this._element.nativeElement.value = inputValue;\r\n    }\r\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\rcontrol to that value. It will also mark the control as dirty if this interaction\rstemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\r\n    if (event && event.source) {\r\n      this._clearPreviousSelectedOption(event.source);\r\n      this._setTriggerValue(event.source.value);\r\n      this._onChange(event.source.value);\r\n      this._element.nativeElement.focus();\r\n      this.autocomplete._emitSelectEvent(event.source);\r\n    }\r\n\r\n    this.closePanel();\r\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\r\n    this.autocomplete.options.forEach(option => {\r\n      if (option != skip && option.selected) {\r\n        option.deselect();\r\n      }\r\n    });\r\n  }\n/**\n * @return {?}\n */\nprivate _attachOverlay(): void {\r\n    if (!this.autocomplete) {\r\n      throw getMdAutocompleteMissingPanelError();\r\n    }\r\n\r\n    if (!this._overlayRef) {\r\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\r\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\r\n    } else {\r\n      /** Update the panel width, in case the host width has changed */\r\n      this._overlayRef.getState().width = this._getHostWidth();\r\n      this._overlayRef.updateSize();\r\n    }\r\n\r\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\r\n      this._overlayRef.attach(this._portal);\r\n      this._closingActionsSubscription = this._subscribeToClosingActions();\r\n    }\r\n\r\n    this.autocomplete._setVisibility();\r\n    this._panelOpen = true;\r\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayConfig {\r\n    return new OverlayConfig({\r\n      positionStrategy: this._getOverlayPosition(),\r\n      scrollStrategy: this._scrollStrategy(),\r\n      width: this._getHostWidth(),\r\n      direction: this._dir ? this._dir.value : 'ltr'\r\n    });\r\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\r\n    this._positionStrategy =  this._overlay.position().connectedTo(\r\n        this._getConnectedElement(),\r\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\r\n        .withFallbackPosition(\r\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\r\n        );\r\n    return this._positionStrategy;\r\n  }\n/**\n * @return {?}\n */\nprivate _getConnectedElement(): ElementRef {\r\n    return this._formField ? this._formField._connectionContainerRef : this._element;\r\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\r\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\r\n  }\n/**\n * Reset active item to -1 so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\r\n    this.autocomplete._keyManager.setActiveItem(-1);\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `input[mdAutocomplete], input[matAutocomplete],\r\n             textarea[mdAutocomplete], textarea[matAutocomplete]`,\r\n  host: {\r\n    'role': 'combobox',\r\n    'autocomplete': 'off',\r\n    'aria-autocomplete': 'list',\r\n    'aria-multiline': 'false',\r\n    '[attr.aria-activedescendant]': 'activeOption?.id',\r\n    '[attr.aria-expanded]': 'panelOpen.toString()',\r\n    '[attr.aria-owns]': 'autocomplete?.id',\r\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\r\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\r\n    '(focusin)': '_handleFocus()',\r\n    '(blur)': '_onTouched()',\r\n    '(input)': '_handleInput($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n  },\r\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_AUTOCOMPLETE_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: MdFormField, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * The subscription for closing actions (some are bound to document).\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._closingActionsSubscription;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._formField;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {MdOptionModule, MdCommonModule} from '@angular/material/core';\r\nimport {MdAutocomplete} from './autocomplete';\r\nimport {\r\n  MdAutocompleteTrigger,\r\n  MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\r\n} from './autocomplete-trigger';\nexport class MdAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdOptionModule, OverlayModule, MdCommonModule, CommonModule],\r\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, MdCommonModule],\r\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\r\n  providers: [MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdAutocompleteSelectedEvent,MdAutocomplete,MdAutocompleteModule,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_SCROLL_STRATEGY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger,MAT_AUTOCOMPLETE_SCROLL_STRATEGY,MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MAT_AUTOCOMPLETE_VALUE_ACCESSOR,MatAutocomplete,MatAutocompleteModule,MatAutocompleteTrigger} from './public_api';\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\r\n\r\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\ran invalid Material prefix on a component.\r\\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\r\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\r\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\r\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\r\n  [mat-button],\r\n  [mat-fab],\r\n  [mat-icon-button],\r\n  [mat-mini-fab],\r\n  [mat-raised-button],\r\n  [matCardSubtitle],\r\n  [matCardTitle],\r\n  [matCellDef],\r\n  [matColumnDef],\r\n  [matDialogActions],\r\n  [matDialogClose],\r\n  [matDialogContent],\r\n  [matDialogTitle],\r\n  [matHeaderCellDef],\r\n  [matHeaderRowDef],\r\n  [matLine],\r\n  [matRowDef],\r\n  [matStepLabel],\r\n  [matStepperNext],\r\n  [matStepperPrevious],\r\n  [matTabLabel],\r\n  [matTabLink],\r\n  [matTabNav],\r\n  [matTooltip],\r\n  [matInput],\r\n  [matPrefix],\r\n  [matSuffix],\r\n  mat-autocomplete,\r\n  mat-button-toggle,\r\n  mat-button-toggle,\r\n  mat-button-toggle-group,\r\n  mat-card,\r\n  mat-card-actions,\r\n  mat-card-content,\r\n  mat-card-footer,\r\n  mat-card-header,\r\n  mat-card-subtitle,\r\n  mat-card-title,\r\n  mat-card-title-group,\r\n  mat-cell,\r\n  mat-checkbox,\r\n  mat-chip,\r\n  mat-dialog-actions,\r\n  mat-dialog-container,\r\n  mat-dialog-content,\r\n  mat-divider,\r\n  mat-error,\r\n  mat-grid-list,\r\n  mat-grid-tile,\r\n  mat-grid-tile-footer,\r\n  mat-grid-tile-header,\r\n  mat-header-cell,\r\n  mat-header-row,\r\n  mat-hint,\r\n  mat-horizontal-stepper,\r\n  mat-icon,\r\n  mat-input-container,\r\n  mat-form-field,\r\n  mat-list,\r\n  mat-list-item,\r\n  mat-menu,\r\n  mat-nav-list,\r\n  mat-option,\r\n  mat-placeholder,\r\n  mat-progress-bar,\r\n  mat-pseudo-checkbox,\r\n  mat-radio-button,\r\n  mat-radio-group,\r\n  mat-row,\r\n  mat-select,\r\n  mat-sidenav,\r\n  mat-sidenav-container,\r\n  mat-slider,\r\n  mat-spinner,\r\n  mat-step,\r\n  mat-tab,\r\n  mat-table,\r\n  mat-tab-group,\r\n  mat-toolbar,\r\n  mat-vertical-stepper`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\r\n  [md-button],\r\n  [md-fab],\r\n  [md-icon-button],\r\n  [md-mini-fab],\r\n  [md-raised-button],\r\n  [mdCardSubtitle],\r\n  [mdCardTitle],\r\n  [mdCellDef],\r\n  [mdColumnDef],\r\n  [mdDialogActions],\r\n  [mdDialogClose],\r\n  [mdDialogContent],\r\n  [mdDialogTitle],\r\n  [mdHeaderCellDef],\r\n  [mdHeaderRowDef],\r\n  [mdLine],\r\n  [mdRowDef],\r\n  [mdStepLabel],\r\n  [mdStepperNext],\r\n  [mdStepperPrevious],\r\n  [mdTabLabel],\r\n  [mdTabLink],\r\n  [mdTabNav],\r\n  [mdTooltip],\r\n  [mdInput],\r\n  [mdPrefix],\r\n  [mdSuffix],\r\n  md-autocomplete,\r\n  md-button-toggle,\r\n  md-button-toggle,\r\n  md-button-toggle-group,\r\n  md-card,\r\n  md-card-actions,\r\n  md-card-content,\r\n  md-card-footer,\r\n  md-card-header,\r\n  md-card-subtitle,\r\n  md-card-title,\r\n  md-card-title-group,\r\n  md-cell,\r\n  md-checkbox,\r\n  md-chip,\r\n  md-dialog-actions,\r\n  md-dialog-container,\r\n  md-dialog-content,\r\n  md-divider,\r\n  md-error,\r\n  md-grid-list,\r\n  md-grid-tile,\r\n  md-grid-tile-footer,\r\n  md-grid-tile-header,\r\n  md-header-cell,\r\n  md-header-row,\r\n  md-hint,\r\n  md-horizontal-stepper,\r\n  md-icon,\r\n  md-input-container,\r\n  md-form-field,\r\n  md-list,\r\n  md-list-item,\r\n  md-menu,\r\n  md-nav-list,\r\n  md-option,\r\n  md-placeholder,\r\n  md-progress-bar,\r\n  md-pseudo-checkbox,\r\n  md-radio-button,\r\n  md-radio-group,\r\n  md-row,\r\n  md-select,\r\n  md-sidenav,\r\n  md-sidenav-container,\r\n  md-slider,\r\n  md-spinner,\r\n  md-step,\r\n  md-tab,\r\n  md-table,\r\n  md-tab-group,\r\n  md-toolbar,\r\n  md-vertical-stepper`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\r\n      isCompatibilityMode: boolean,\r\n    elementRef: ElementRef) {\r\n\r\n    if (!isCompatibilityMode) {\r\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\r\n      isCompatibilityMode: boolean,\r\n    elementRef: ElementRef) {\r\n\r\n    if (isCompatibilityMode) {\r\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\rwithout NoConflictStyleCompatibilityMode also being imported, it will throw an error if\rthere are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  declarations: [MatPrefixRejector, MdPrefixRejector],\r\n  exports: [MatPrefixRejector, MdPrefixRejector],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\rit will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  providers: [{\r\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\r\n  }],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\rcomponents. This includes Bidi, compatibility mode, etc.\r\rThis module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\r\n      _sanityChecksEnabled: boolean) {\r\n\r\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\r\n      this._checkDoctype();\r\n      this._checkTheme();\r\n      this._hasDoneGlobalChecks = true;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\r\n    if (!this._document.doctype) {\r\n      console.warn(\r\n        'Current document does not have a doctype. This may cause ' +\r\n        'some Angular Material components not to behave as expected.'\r\n      );\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\r\n    if (typeof getComputedStyle === 'function') {\r\n      const /** @type {?} */ testElement = this._document.createElement('div');\r\n\r\n      testElement.classList.add('mat-theme-loaded-marker');\r\n      this._document.body.appendChild(testElement);\r\n\r\n      if (getComputedStyle(testElement).display !== 'none') {\r\n        console.warn(\r\n          'Could not find Angular Material core theme. Most Material ' +\r\n          'components may not work as expected. For more info refer ' +\r\n          'to the theming guide: https://material.angular.io/guide/theming'\r\n        );\r\n      }\r\n\r\n      this._document.body.removeChild(testElement);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CompatibilityModule, BidiModule],\r\n  exports: [CompatibilityModule, BidiModule],\r\n  providers: [{\r\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\r\n  }],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMdCommonModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nMdCommonModule.prototype._document;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Constructor} from './constructor';\r\n\r\n/** @docs-private */\r\nexport interface CanDisable {\r\n  disabled: boolean;\r\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\r\n  return class extends base {\nprivate _disabled: boolean = false;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\n/**\n * InjectionToken for datepicker that can be used to override default locale code.\n */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n/**\n * Provider for MAT_DATE_LOCALE injection token.\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * A stream that emits when the locale changes.\n * @return {?}\n */\nget localeChanges(): Observable<void> { return this._localeChanges; }\r\n  protected _localeChanges= new Subject<void>();\n/**\n * Gets the year component of the given date.\r\\@param date The date to extract the year from.\r\\@returns The year component.\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\r\\@param date The date to extract the month from.\r\\@returns The month component (0-indexed, 0 = January).\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\r\\@param date The date to extract the date of the month from.\r\\@returns The month component (1-indexed, 1 = first of month).\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\r\\@param date The date to extract the day of the week from.\r\\@returns The month component (0-indexed, 0 = Sunday).\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\r\\@param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\r\\@returns An ordered list of all month names, starting with January.\n * @abstract\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\r\\@returns An ordered list of all date of the month names, starting with '1'.\n * @abstract\n * @return {?}\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\r\\@param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\r\\@returns An ordered list of all weekday names, starting with Sunday.\n * @abstract\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\r\\@param date The date to get the year name for.\r\\@returns The name of the given year (e.g. '2017').\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\r\\@returns The first day of the week (0-indexed, 0 = Sunday).\n * @abstract\n * @return {?}\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\r\\@param date The date whose month should be checked.\r\\@returns The number of days in the month of the given date.\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\r\\@param date The date to clone\r\\@returns A new date equal to the given date.\n * @abstract\n * @param {?} date\n * @return {?}\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\rmonth and date.\r\\@param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\r\\@param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\r\\@param date The date of month of the date. Must be an integer 1 - length of the given month.\r\\@returns The new date, or null if invalid.\n * @abstract\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\r\\@returns Today's date.\n * @abstract\n * @return {?}\n */\ntoday() {}\n/**\n * Parses a date from a value.\r\\@param value The value to parse.\r\\@param parseFormat The expected format of the value being parsed\r    (type is implementation-dependent).\r\\@returns The parsed date.\n * @abstract\n * @param {?} value\n * @param {?} parseFormat\n * @return {?}\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\r\\@param date The value to format.\r\\@param displayFormat The format to use to display the date as a string.\r\\@returns The formatted date string.\n * @abstract\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\rcalendar for each year and then finding the closest date in the new month. For example when\radding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\r\\@param date The date to add years to.\r\\@param years The number of years to add (may be negative).\r\\@returns A new date equal to the given one with the specified number of years added.\n * @abstract\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\rcalendar for each month and then finding the closest date in the new month. For example when\radding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\r\\@param date The date to add months to.\r\\@param months The number of months to add (may be negative).\r\\@returns A new date equal to the given one with the specified number of months added.\n * @abstract\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\rcalendar for each day.\r\\@param date The date to add days to.\r\\@param days The number of days to add (may be negative).\r\\@returns A new date equal to the given one with the specified number of days added.\n * @abstract\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\r\\@param date The date to get the ISO date string for.\r\\@returns The ISO date string date string.\n * @abstract\n * @param {?} date\n * @return {?}\n */\ntoIso8601(date: D) {}\n/**\n * Creates a date from an RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339).\r\\@param iso8601String The ISO date string to create a date from\r\\@returns The date created from the ISO date string.\n * @abstract\n * @param {?} iso8601String\n * @return {?}\n */\nfromIso8601(iso8601String: string) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\r\\@param obj The object to check\r\\@returns Whether the object is a date instance.\n * @abstract\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\r\\@param date The date to check.\r\\@returns Whether the date is valid.\n * @abstract\n * @param {?} date\n * @return {?}\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\r\\@param locale The new locale.\n * @param {?} locale\n * @return {?}\n */\nsetLocale(locale: any) {\r\n    this.locale = locale;\r\n    this._localeChanges.next();\r\n  }\n/**\n * Compares two dates.\r\\@param first The first date to compare.\r\\@param second The second date to compare.\r\\@returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r    a number greater than 0 if the first date is later.\n * @param {?} first\n * @param {?} second\n * @return {?}\n */\ncompareDate(first: D, second: D): number {\r\n    return this.getYear(first) - this.getYear(second) ||\r\n        this.getMonth(first) - this.getMonth(second) ||\r\n        this.getDate(first) - this.getDate(second);\r\n  }\n/**\n * Checks if two dates are equal.\r\\@param first The first date to check.\r\\@param second The second date to check.\r\\@returns {boolean} Whether the two dates are equal.\r    Null dates are considered equal to other null dates.\n * @param {?} first\n * @param {?} second\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\r\n    return first && second ? !this.compareDate(first, second) : first == second;\r\n  }\n/**\n * Clamp the given date between min and max dates.\r\\@param date The date to clamp.\r\\@param min The minimum value to allow. If null or omitted no min is enforced.\r\\@param max The maximum value to allow. If null or omitted no max is enforced.\r\\@returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\r    otherwise `date`.\n * @param {?} date\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\r\n    if (min && this.compareDate(date, min) < 0) {\r\n      return min;\r\n    }\r\n    if (max && this.compareDate(date, max) > 0) {\r\n      return max;\r\n    }\r\n    return date;\r\n  }\r\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n/** @type {?} */\nDateAdapter.prototype._localeChanges;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Inject, Injectable, Optional} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\r\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\r\n  'long': [\r\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n    'October', 'November', 'December'\r\n  ],\r\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\r(https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\rbecause the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\r\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const /** @type {?} */ valuesArray = Array(length);\r\n  for (let /** @type {?} */ i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} matDateLocale\n */\nconstructor(  matDateLocale: string) {\r\n    super();\r\n    super.setLocale(matDateLocale);\r\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\rWithout this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\rthe result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\rwill produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\r\n    return date.getFullYear();\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\r\n    return date.getMonth();\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\r\n    return date.getDate();\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\r\n    return date.getDay();\r\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\r\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\r\n    }\r\n    return DEFAULT_MONTH_NAMES[style];\r\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\r\n      return range(31, i => this._stripDirectionalityCharacters(\r\n          dtf.format(new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DATE_NAMES;\r\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\r\n      return range(7, i => this._stripDirectionalityCharacters(\r\n          dtf.format(new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\r\n      return this._stripDirectionalityCharacters(dtf.format(date));\r\n    }\r\n    return String(this.getYear(date));\r\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\r\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n    return 0;\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\r\n    return this.getDate(this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date) + 1, 0));\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\r\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\r\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\r\n\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() != month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\r\n    return new Date();\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\r\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n    // parameters.\r\n    if (typeof value == 'number') {\r\n      return new Date(value);\r\n    }\r\n    return value ? new Date(Date.parse(value)) : null;\r\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\r\n    if (!this.isValid(date)) {\r\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n    }\r\n    if (SUPPORTS_INTL_API) {\r\n      if (this.useUtcForDisplay) {\r\n        date = new Date(Date.UTC(\r\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\r\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\r\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\r\n      }\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n      return this._stripDirectionalityCharacters(dtf.format(date));\r\n    }\r\n    return this._stripDirectionalityCharacters(date.toDateString());\r\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\r\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n    }\r\n\r\n    return newDate;\r\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ntoIso8601(date: Date): string {\r\n    return [\r\n      date.getUTCFullYear(),\r\n      this._2digit(date.getUTCMonth() + 1),\r\n      this._2digit(date.getUTCDate())\r\n    ].join('-');\r\n  }\n/**\n * @param {?} iso8601String\n * @return {?}\n */\nfromIso8601(iso8601String: string): Date | null {\r\n    // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n    // string is the right format first.\r\n    if (ISO_8601_REGEX.test(iso8601String)) {\r\n      let /** @type {?} */ d = new Date(iso8601String);\r\n      if (this.isValid(d)) {\r\n        return d;\r\n      }\r\n    }\r\n    return null;\r\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\r\n    return obj instanceof Date;\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\r\n    return !isNaN(date.getTime());\r\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\r\n    let /** @type {?} */ result = new Date(year, month, date);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\n/**\n * Pads a number to make it two digits.\r\\@param n The number to pad.\r\\@returns The padded number.\n * @param {?} n\n * @return {?}\n */\nprivate _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\rother browsers do not. We remove them to make output consistent and because they interfere with\rdate parsing.\r\\@param str The string to strip direction characters from.\r\\@returns The stripped string.\n * @param {?} str\n * @return {?}\n */\nprivate _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, '');\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\rWithout this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\rthe result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\rwill produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ElementRef, NgZone} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\r\n\r\nexport type RippleConfig = {\r\n  color?: string;\r\n  centered?: boolean;\r\n  radius?: number;\r\n  speedFactor?: number;\r\n  persistent?: boolean;\r\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\rThe constructor takes a reference to the ripple directive's host element and a map of DOM\revent handlers to be installed on the element that triggers ripple animations.\rThis will eventually become a custom renderer once Angular support exists.\r\\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\r\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\r\n      platform: Platform) {\r\n    // Only do anything if we're on the browser.\r\n    if (platform.isBrowser) {\r\n      this._containerElement = elementRef.nativeElement;\r\n\r\n      // Specify events which need to be registered on the trigger.\r\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\r\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\r\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\r\n\r\n      // By default use the host element as trigger element.\r\n      this.setTriggerElement(this._containerElement);\r\n    }\r\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\r\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\r\n\r\n    if (config.centered) {\r\n      pageX = containerRect.left + containerRect.width / 2;\r\n      pageY = containerRect.top + containerRect.height / 2;\r\n    } else {\r\n      // Subtract scroll values from the coordinates because calculations below\r\n      // are always relative to the viewport rectangle.\r\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\r\n      pageX -= scrollPosition.left;\r\n      pageY -= scrollPosition.top;\r\n    }\r\n\r\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\r\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\r\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\r\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\r\n\r\n    let /** @type {?} */ ripple = document.createElement('div');\r\n    ripple.classList.add('mat-ripple-element');\r\n\r\n    ripple.style.left = `${offsetX - radius}px`;\r\n    ripple.style.top = `${offsetY - radius}px`;\r\n    ripple.style.height = `${radius * 2}px`;\r\n    ripple.style.width = `${radius * 2}px`;\r\n\r\n    // If the color is not set, the default CSS color will be used.\r\n    ripple.style.backgroundColor = config.color || null;\r\n    ripple.style.transitionDuration = `${duration}ms`;\r\n\r\n    this._containerElement.appendChild(ripple);\r\n\r\n    // By default the browser does not recalculate the styles of dynamically created\r\n    // ripple elements. This is critical because then the `scale` would not animate properly.\r\n    enforceStyleRecalculation(ripple);\r\n\r\n    ripple.style.transform = 'scale(1)';\r\n\r\n    // Exposed reference to the ripple that will be returned.\r\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\r\n\r\n    rippleRef.state = RippleState.FADING_IN;\r\n\r\n    // Add the ripple reference to the list of all active ripples.\r\n    this._activeRipples.add(rippleRef);\r\n\r\n    // Wait for the ripple element to be completely faded in.\r\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\r\n    this.runTimeoutOutsideZone(() => {\r\n      rippleRef.state = RippleState.VISIBLE;\r\n\r\n      if (!config.persistent && !this._isMousedown) {\r\n        rippleRef.fadeOut();\r\n      }\r\n    }, duration);\r\n\r\n    return rippleRef;\r\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\r\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\r\n    if (!this._activeRipples.delete(rippleRef)) {\r\n      return;\r\n    }\r\n\r\n    let /** @type {?} */ rippleEl = rippleRef.element;\r\n\r\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\r\n    rippleEl.style.opacity = '0';\r\n\r\n    rippleRef.state = RippleState.FADING_OUT;\r\n\r\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\r\n    this.runTimeoutOutsideZone(() => {\r\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\r\n      rippleEl.parentNode)).removeChild(rippleEl);\r\n    }, RIPPLE_FADE_OUT_DURATION);\r\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\r\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\r\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\r\n    // Remove all previously register event listeners from the trigger element.\r\n    if (this._triggerElement) {\r\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\r\n        this._triggerElement)).removeEventListener(type, fn);\r\n      });\r\n    }\r\n\r\n    if (element) {\r\n      // If the element is not null, register all event listeners on the trigger element.\r\n      this._ngZone.runOutsideAngular(() => {\r\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\r\n      });\r\n    }\r\n\r\n    this._triggerElement = element;\r\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\r\n    if (!this.rippleDisabled) {\r\n      this._isMousedown = true;\r\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\r\n    }\r\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\r\n    this._isMousedown = false;\r\n\r\n    // Fade-out all ripples that are completely visible and not persistent.\r\n    this._activeRipples.forEach(ripple => {\r\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\r\n        ripple.fadeOut();\r\n      }\r\n    });\r\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\r\n    if (this._isMousedown) {\r\n      this.onMouseup();\r\n    }\r\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\r\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\r\n  }\r\n\r\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\r\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\r\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\r\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\r\n  window.getComputedStyle(element).getPropertyValue('opacity');\r\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\r\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\r\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\r\n  return Math.sqrt(distX * distX + distY * distY);\r\n}\r\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldPlaceholderConflictError(): Error {\r\n  return Error('Placeholder attribute and child element were both specified.');\r\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdFormFieldDuplicatedHintError(align: string): Error {\r\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\r\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldMissingControlError(): Error {\r\n  return Error('md-form-field must contain a MdFormFieldControl. ' +\r\n      'Did you forget to add mdInput to the native input or textarea element?');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {DateAdapter} from '@angular/material/core';\n/**\n * Function that attempts to coerce a value to a date using a DateAdapter. Date instances, null,\rand undefined will be passed through. Empty strings will be coerced to null. Valid ISO 8601\rstrings (https://www.ietf.org/rfc/rfc3339.txt) will be coerced to dates. All other values will\rresult in an error being thrown.\r\\@param adapter The date adapter to use for coercion\r\\@param value The value to coerce.\r\\@return A date object coerced from the value.\r\\@throws Throws when the value cannot be coerced.\n * @template D\n * @param {?} adapter\n * @param {?} value\n * @return {?}\n */\nexport function coerceDateProperty<D>(adapter: DateAdapter<D>, value: any): D | null {\r\n  if (typeof value === 'string') {\r\n    if (value == '') {\r\n      value = null;\r\n    } else {\r\n      value = adapter.fromIso8601(value) || value;\r\n    }\r\n  }\r\n  if (value == null || adapter.isDateInstance(value)) {\r\n    return value;\r\n  }\r\n  throw Error(`Datepicker: Value must be either a date object recognized by the DateAdapter or ` +\r\n              `an ISO 8601 string. Instead got: ${value}`);\r\n}\r\n","\n/**\n * Converts values into strings. Falsy values become empty strings.\r\\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToString(value: string | number): string {\r\n  return `${value || ''}`;\r\n}\n/**\n * Converts a value that might be a string into a number.\r\\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToNumber(value: string | number): number {\r\n  return typeof value === 'string' ? parseInt(value, 10) : value;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {\r\n  MdProgressSpinner,\r\n  MdSpinner,\r\n  MdProgressSpinnerCssMatStyler,\r\n} from './progress-spinner';\nexport class MdProgressSpinnerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule],\r\n  exports: [\r\n    MdProgressSpinner,\r\n    MdSpinner,\r\n    MdCommonModule,\r\n    MdProgressSpinnerCssMatStyler\r\n  ],\r\n  declarations: [\r\n    MdProgressSpinner,\r\n    MdSpinner,\r\n    MdProgressSpinnerCssMatStyler\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner,MatProgressSpinner,MatProgressSpinnerBase,MatProgressSpinnerCssMatStyler,MatProgressSpinnerModule,MatSpinner} from './public_api';\n","\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nexport function getMdSortDuplicateMdSortableIdError(id: string): Error {\r\n  return Error(`Cannot have two MdSortables with the same id (${id}).`);\r\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderNotContainedWithinMdSortError(): Error {\r\n  return Error(`MdSortHeader must be placed within a parent element with the MdSort directive.`);\r\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderMissingIdError(): Error {\r\n  return Error(`MdSortHeader must be provided with a unique id.`);\r\n}\r\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\r\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\r\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\r\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\r\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\r\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\r\n  static COMPLEX = '375ms';\r\n  static ENTERING = '225ms';\r\n  static EXITING = '195ms';\r\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Constructor} from './constructor';\r\nimport {ElementRef, Renderer2} from '@angular/core';\r\n\r\n/** @docs-private */\r\nexport interface CanColor {\r\n  color: ThemePalette;\r\n}\r\n\r\n/** @docs-private */\r\nexport interface HasRenderer {\r\n  _renderer: Renderer2;\r\n  _elementRef: ElementRef;\r\n}\r\n\r\n/** Possible color palette values.  */\r\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\r\n    : Constructor<CanColor> & T {\r\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\r\n      const /** @type {?} */ colorPalette = value || defaultColor;\r\n\r\n      if (colorPalette !== this._color) {\r\n        if (this._color) {\r\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\r\n        }\r\n        if (colorPalette) {\r\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\r\n        }\r\n\r\n        this._color = colorPalette;\r\n      }\r\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\r\n      super(...args);\r\n\r\n      // Set the default color that can be specified from the mixin.\r\n      this.color = defaultColor;\r\n    }\r\n  };\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Constructor} from './constructor';\r\n\r\n/** @docs-private */\r\nexport interface CanDisableRipple {\r\n  disableRipple: boolean;\r\n}\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\r\n    : Constructor<CanDisableRipple> & T {\r\n  return class extends base {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect is disabled or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Constructor} from './constructor';\r\nimport {CanDisable} from './disabled';\r\n\r\n/** @docs-private */\r\nexport interface HasTabIndex {\r\n  tabIndex: number;\r\n}\n/**\n * Mixin to augment a directive with a `tabIndex` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultTabIndex\n * @return {?}\n */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\r\n    : Constructor<HasTabIndex> & T {\r\n  return class extends base {\nprivate _tabIndex: number = defaultTabIndex;\n/**\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\r\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\r\n      this._tabIndex = value != null ? value : defaultTabIndex;\r\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\r\n      super(...args);\r\n    }\r\n  };\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\r\n\r\n\r\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\r\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\rIntended to be consumed as an Angular service.\rThis service is needed because native radio change events are only fired on the item currently\rbeing selected, and we still need to uncheck the previous selection.\r\rThis service does not *store* any IDs and names because they may change at any time, so it is\rless error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\r\\@param id ID of the item.\r\\@param name Name of the item.\n * @param {?} id\n * @param {?} name\n * @return {?}\n */\nnotify(id: string, name: string) {\r\n    for (let /** @type {?} */ listener of this._listeners) {\r\n      listener(id, name);\r\n    }\r\n  }\n/**\n * Listen for future changes to item selection.\r\\@return Function used to deregister listener\r\n * @param {?} listener\n * @return {?}\n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\r\n    this._listeners.push(listener);\r\n    return () => {\r\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\r\n        return listener !== registered;\r\n      });\r\n    };\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\r\n    parentDispatcher: UniqueSelectionDispatcher) {\r\n  return parentDispatcher || new UniqueSelectionDispatcher();\r\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\r\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\r\n  provide: UniqueSelectionDispatcher,\r\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\r\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\r\n};\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\rsimilar to Object.assign.\r\r\\@param dest The object which will have properties copied to it.\r\\@param sources The source objects from which properties will be copied.\n * @param {?} dest\n * @param {...?} sources\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\r\n  if (dest == null) {\r\n    throw TypeError('Cannot convert undefined or null to object');\r\n  }\r\n\r\n  for (let /** @type {?} */ source of sources) {\r\n    if (source != null) {\r\n      for (let /** @type {?} */ key in source) {\r\n        if (source.hasOwnProperty(key)) {\r\n          dest[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return dest;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {MdDateFormats} from './date-formats';\r\n\r\n\r\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\r\n  parse: {\r\n    dateInput: null,\r\n  },\r\n  display: {\r\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\r\n    monthYearLabel: {year: 'numeric', month: 'short'},\r\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\r\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\r\nimport {NativeDateAdapter} from './native-date-adapter';\r\nimport {MD_DATE_FORMATS} from './date-formats';\r\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\r\n\r\nexport {MAT_DATE_LOCALE,MAT_DATE_LOCALE_PROVIDER,DateAdapter} from './date-adapter';\r\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\r\nexport {NativeDateAdapter} from './native-date-adapter';\r\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  providers: [\r\n    {provide: DateAdapter, useClass: NativeDateAdapter},\r\n    MAT_DATE_LOCALE_PROVIDER\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [NativeDateModule],\r\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {InjectionToken} from '@angular/core';\r\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MD_ERROR_GLOBAL_OPTIONS = new InjectionToken<ErrorOptions>('md-error-global-options');\r\n\r\nexport type ErrorStateMatcher =\r\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\r\n\r\nexport interface ErrorOptions {\r\n  errorStateMatcher?: ErrorStateMatcher;\r\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\r\n  const /** @type {?} */ isSubmitted = form && form.submitted;\r\n  return !!(control.invalid && (control.touched || isSubmitted));\r\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\r\n    form: FormGroupDirective | NgForm) {\r\n  const /** @type {?} */ isSubmitted = form && form.submitted;\r\n  return !!(control.invalid && (control.dirty || isSubmitted));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable, isDevMode} from '@angular/core';\r\nimport {HammerGestureConfig} from '@angular/platform-browser';\r\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\r\n\r\n  /* List of new event names to add to the gesture support list */\r\n  events: string[] = this._hammer ? [\r\n    'longpress',\r\n    'slide',\r\n    'slidestart',\r\n    'slideend',\r\n    'slideright',\r\n    'slideleft'\r\n  ] : [];\nconstructor() {\r\n    super();\r\n\r\n    if (!this._hammer && isDevMode()) {\r\n      console.warn(\r\n        'Could not find HammerJS. Certain Angular Material ' +\r\n        'components may not work correctly.'\r\n      );\r\n    }\r\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\r\rOur gesture names come from the Material Design gestures spec:\rhttps://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\r\rMore information on default recognizers can be found in Hammer docs:\rhttp://hammerjs.github.io/recognizer-pan/\rhttp://hammerjs.github.io/recognizer-press/\r\r\\@param element Element to which to assign the new HammerJS gestures.\r\\@returns Newly-created HammerJS instance.\n * @param {?} element\n * @return {?}\n */\nbuildHammer(element: HTMLElement): HammerInstance {\r\n    const /** @type {?} */ mc = new this._hammer(element);\r\n\r\n    // Default Hammer Recognizers.\r\n    let /** @type {?} */ pan = new this._hammer.Pan();\r\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\r\n    let /** @type {?} */ press = new this._hammer.Press();\r\n\r\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\r\n    // Otherwise the previous `recognizeWith` will be dropped.\r\n    // TODO: Confirm threshold numbers with Material Design UX Team\r\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\r\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\r\n\r\n    // Overwrite the default `pan` event to use the swipe event.\r\n    pan.recognizeWith(swipe);\r\n\r\n    // Add customized gestures to Hammer manager\r\n    mc.add([swipe, press, pan, slide, longpress]);\r\n\r\n    return /** @type {?} */(( mc as HammerInstance));\r\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\r\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\r\n\r\n    inheritances.push(base);\r\n    inheritances.forEach(item => recognizer.recognizeWith(item));\r\n\r\n    return recognizer;\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\r\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\r\n    this._renderer.fadeOutRipple(this);\r\n  }\r\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  Inject,\r\n  NgZone,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n  InjectionToken,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\r\nimport {RippleRef} from './ripple-ref';\r\n\r\nexport interface RippleGlobalOptions {\r\n  disabled?: boolean;\r\n  baseSpeedFactor?: number;\r\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\r\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\r\n\r\n  /**\r\n   * The element that triggers the ripple when click events are received. Defaults to the\r\n   * directive's host element.\r\n   */\r\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\r\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\r\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\rthan originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\rby using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\rwill be the distance from the center of the ripple to the furthest corner of the host element's\rbounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\rsetting it to 0.5 will cause the animations to take twice as long.\rA changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * @return {?}\n */\nget _matRippleTrigger() { return this.trigger; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleTrigger(v) { this.trigger = v; }\n/**\n * @return {?}\n */\nget _matRippleCentered() { return this.centered; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleCentered(v) { this.centered = v; }\n/**\n * @return {?}\n */\nget _matRippleDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matRippleRadius() { return this.radius; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleRadius(v) { this.radius = v; }\n/**\n * @return {?}\n */\nget _matRippleSpeedFactor() { return this.speedFactor; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleSpeedFactor(v) { this.speedFactor = v; }\n/**\n * @return {?}\n */\nget _matRippleColor() { return this.color; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleColor(v) { this.color = v; }\n/**\n * @return {?}\n */\nget _matRippleUnbounded() { return this.unbounded; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleUnbounded(v) { this.unbounded = v; }\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\r\n    elementRef: ElementRef,\r\n    ngZone: NgZone,\r\n    ruler: ViewportRuler,\r\n    platform: Platform,\r\n      globalOptions: RippleGlobalOptions\r\n  ) {\r\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\r\n    this._globalOptions = globalOptions ? globalOptions : {};\r\n\r\n    this._updateRippleRenderer();\r\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    if ((changes['trigger'] || changes['_matRippleTrigger']) && this.trigger) {\r\n      this._rippleRenderer.setTriggerElement(this.trigger);\r\n    }\r\n\r\n    this._updateRippleRenderer();\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    // Set the trigger element to null to cleanup all listeners.\r\n    this._rippleRenderer.setTriggerElement(null);\r\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\r\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\r\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\r\n    this._rippleRenderer.fadeOutAll();\r\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\r\n    return {\r\n      centered: this.centered,\r\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\r\n      radius: this.radius,\r\n      color: this.color\r\n    };\r\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\n_updateRippleRenderer() {\r\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\r\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\r\n  exportAs: 'mdRipple, matRipple',\r\n  host: {\r\n    'class': 'mat-ripple',\r\n    '[class.mat-ripple-unbounded]': 'unbounded'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n'_matRippleTrigger': [{ type: Input, args: ['matRippleTrigger', ] },],\n'_matRippleCentered': [{ type: Input, args: ['matRippleCentered', ] },],\n'_matRippleDisabled': [{ type: Input, args: ['matRippleDisabled', ] },],\n'_matRippleRadius': [{ type: Input, args: ['matRippleRadius', ] },],\n'_matRippleSpeedFactor': [{ type: Input, args: ['matRippleSpeedFactor', ] },],\n'_matRippleColor': [{ type: Input, args: ['matRippleColor', ] },],\n'_matRippleUnbounded': [{ type: Input, args: ['matRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\rthan originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\rby using the `launch()` method.\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\rwill be the distance from the center of the ripple to the furthest corner of the host element's\rbounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\rsetting it to 0.5 will cause the animations to take twice as long.\rA changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MdCommonModule} from '../common-behaviors/common-module';\r\nimport {MdRipple} from './ripple';\r\n\r\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\r\nexport {RippleRef, RippleState} from './ripple-ref';\r\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\r\n  exports: [MdRipple, MdCommonModule],\r\n  declarations: [MdRipple],\r\n  providers: [VIEWPORT_RULER_PROVIDER],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["MdTabNav","prototype","ngOnDestroy","this","_onDestroy","next","inputs","template","styles","host","class","type","NgZone","ChangeDetectorRef","propDecorators","_tabLinks","ContentChildren","args","forwardRef","MdTabLink","descendants","backgroundColor","Input","MdTabLinkBase","_MdTabLinkMixinBase","mixinDisabled","_mdTabNavBar","_elementRef","ngZone","ruler","platform","globalOptions","_this","_super","call","_isActive","_disableRipple","_tabLinkRipple","MdRipple","Object","defineProperty","get","set","value","updateActiveLink","enumerable","configurable","MdToolbarRow","decorators","Directive","selector","MdToolbarBase","_renderer","MdToolbar","renderer","elementRef","tslib_1.__extends","_MdToolbarMixinBase","Component","role","Renderer2","ElementRef","MdToolbarModule","imports","MdCommonModule","declarations","VERSION","_angular_core","Version","state","style","height","visibility","providers","provide","MdStepper","useExisting","MdVerticalStepper","viewProviders","MATERIAL_COMPATIBILITY_MODE","useValue","encapsulation","ViewEncapsulation","None","preserveWhitespaces","_MdStepperPrevious","CdkStepperPrevious","MdStepperNext","apply","arguments","_MdStepperNext","(click)","CdkStepper","ctorParameters","MdStepperPrevious","_MdTable","CdkTable","MdTable","CDK_TABLE_TEMPLATE","_MdCellDef","CdkCellDef","MdCellDef","MdHeaderCellDef","MdColumnDef","name","CdkColumnDef","_matColumnDefName","MdHeaderCell","columnDef","MdCell","addClass","nativeElement","cssClassFriendlyName","_MdHeaderRowDef","CdkHeaderRowDef","_MdCdkRowDef","CdkRowDef","_MdHeaderRow","CdkHeaderRow","_MdRow","CdkRow","MdHeaderRowDef","MatHeaderRowDef","MdRowDef","MatRowDef","MdHeaderRow","changeDetection","ChangeDetectionStrategy","OnPush","MdInkBar","_ngZone","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","setStyle","hide","left","offsetLeft","width","offsetWidth","MdTabLabel","templateRef","viewContainerRef","_MdTabLabelBaseClass","ViewContainerRef","MdTabBase","_MdTabMixinBase","MdTab","_viewContainerRef","_contentPortal","ngOnChanges","changes","hasOwnProperty","_labelChange","_disableChange","complete","ngOnInit","TemplatePortal","_content","exportAs","textLabel","MdTabBody","_dir","onCentering","EventEmitter","onCentered","position","_getLayoutDirection","origin","dir","_position","_origin","_isCenterPosition","_portalHost","hasAttached","attach","detach","e","toState","emit","animations","transform","transition","animate","Directionality","Optional","ViewChild","PortalHostDirective","nextId","MdTabGroupBase","MdTabGroup","_changeDetectorRef","_tabsSubscription","Subscription","EMPTY","_dynamicHeight","headerPosition","_indexToSelect","_backgroundColor","removeClass","ngAfterContentChecked","indexToSelect","Math","min","_tabs","length","max","Promise","resolve","then","selectedIndexChange","_selectedIndex","tab","markForCheck","ngAfterContentInit","unsubscribe","_tabLabelSubscription","ngAfterViewChecked","_isInitialized","_focusChanged","index","focusChange","_createChangeEvent","event","toArray","merge","map","concat","subscribe","_getTabLabelId","i","_groupId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","_tabBodyWrapperHeight","_tabBodyWrapper","offsetHeight","clientHeight","dynamicHeight","_dynamicHeightDeprecated","Output","selectChange","MdTabLabelWrapperBase","_MdTabLabelWrapperMixinBase","MdTabLabelWrapper","focus","getOffsetWidth","MdTabHeaderBase","MdTabHeader","_scrollDistance","_selectedIndexChanged","_realignInkBar","_disableScrollAfter","selectFocusedIndex","indexFocused","_focusIndex","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","dirChange","change","of","resize","window","auditTime","fromEvent","startWith","_checkPaginationEnabled","_isValidIndex","disabled","_setTabFocus","tabIndex","_showPaginationControls","containerEl","_tabListContainer","scrollLeft","focusIndex","_moveFocus","scrollDistance","translateX","_tabList","labelBeforePos","labelAfterPos","viewLength","selectedLabel","getOffsetLeft","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","MdTabNavBase","Subject","observableOf","coerceBooleanProperty","_setLinkDisableRipple","_activeLinkChanged","_activeLinkElement","MdSnackBarRef","containerInstance","_overlayRef","_onAction","onAction","dismiss","_onExit","_finishDismiss","_afterClosed","closed","exit","clearTimeout","_durationTimeoutId","closeWithAction","_dismissAfter","duration","_open","_afterOpened","dispose","afterDismissed","afterOpened","asObservable","verticalPosition","MdSnackBarConfig","SimpleSnackBar","snackBarRef","data","action","SHOW_ANIMATION","_onEnter","MdSnackBarContainer","_animationState","snackBarConfig","attachComponentPortal","portal","Error","extraClasses","_i","_a","cssClass","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","_destroyed","detectChanges","first","onMicrotaskEmpty","BasePortalHost","[@state]","(@state.done)","trigger","HIDE_ANIMATION","MdSnackBar","_overlay","_live","_injector","_parentSnackBar","parent","_openedSnackBarRef","_snackBarRefAtThisLevel","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","enter","announce","announcementMessage","politeness","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","injector","_createInjector","contentRef","state$$1","OverlayConfig","direction","isRtl","isLeft","horizontalPosition","isRight","positionStrategy","bottom","create","userInjector","injectionTokens","WeakMap","MD_SNACK_BAR_DATA","LiveAnnouncer","Injector","SkipSelf","MdSnackBarModule","MdSort","v","disableClear","sortable","id","getMdSortHeaderMissingIdError","sortables","has","getMdSortDuplicateMdSortableIdError","delete","active","start","getNextSortDirection","sortChange","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","_matSortStart","_matSortChange","MdSortHeaderIntl","_sort","_rerenderSubscription","_intl","MdSortHeader","_disableClear","_cdkColumnDef","register","deregister","_isSorted","[class.mat-sort-header-sorted]","SORT_ANIMATION_TRANSITION","_MdStepLabel","CdkStepLabel","MdStepLabel","MdStepHeader","_active","_stringLabel","label","selected","_MdStep","CdkStep","_MdStepper","MdStep","mdStepper","errorStateMatcher","control","form","originalErrorState","_originalErrorStateMatcher","errorOptions","defaultErrorStateMatcher","Inject","undefined","MD_ERROR_GLOBAL_OPTIONS","stepLabel","ContentChild","_stepHeader","ViewChildren","read","MdHorizontalStepper","MdDrawerContainer","_element","_updateContentMargins","drawer","mode","_watchDrawerPosition","takeUntil","onPositionChanged","_drawers","_validateDrawers","_watchDrawerMode","_modeChanged","isAdd","_end","_left","_start","_right","_onBackdropClicked","backdropClick","_closeModalDrawer","filter","disableClose","forEach","close","_isShowingBackdrop","_isDrawerOpen","opened","right","_width","_contentMargins","MdSidenavContent","MdSidenavContainer","MdSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","coerceNumberProperty","MdDrawer","[@transform]","(@transform.start)","(@transform.done)","(keydown)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[style.top.px]","nextUniqueId","MD_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MdSlideToggle","multi","MdSlideToggleChange","MdSlideToggleBase","_MdSlideToggleMixinBase","mixinTabIndex","mixinColor","mixinDisableRipple","_platform","_focusMonitor","_required","ariaLabelledby","_checked","_uniqueId","focusOrigin","_onInputFocusChange","_slideRenderer","dragging","registerOnChange","fn","focusVia","_inputElement","toggle","checked","_focusRipple","fadeOut","_ripple","launch","persistent","centered","_emitChangeEvent","source","_onDragStart","startThumbDrag","_onDrag","dragPercentage","_previousChecked","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","SlideToggleRenderer","updateThumbPosition","distance","dragX","_thumbBarWidth","applyCssTransform","_thumbEl","_getDragPercentage","percentage","MD_SLIDER_VALUE_ACCESSOR","MdSlider","MdSliderChange","MdSliderBase","_invert","_max","_min","_value","input","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundLabelTo","_step","toString","split","pop","_thumbLabel","tickInterval","_vertical","toFixed","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_direction","backgroundSize","sign","tickSize","rotate","_thumbGap","_invertAxis","monitor","_dirChangeSubscription","stopMonitoring","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_focusHostElement","_onSlide","_onSlideStart","_updateValueFromPosition","x","center","y","_emitInputEvent","preventDefault","_onSlideEnd","_valueOnSlideStart","_onFocus","_onKeydown","PAGE_UP","_increment","END","HOME","DOWN_ARROW","_onKeyup","numSteps","step","_calculateValue","_sliderWrapper","getBoundingClientRect","MdPaginator","MdPaginatorIntl","pageIndex","MdPaginatorModule","MdProgressBar","_bufferValue","clamp","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.aria-valuenow]","[attr.mode]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","MdProgressBarModule","CommonModule","DEGREE_IN_RADIANS","PI","MAX_ANGLE","HAS_RAF","PROGRESS_SPINNER_STROKE_WIDTH","MdProgressSpinnerCssMatStyler","MdProgressSpinnerBase","_MdProgressSpinnerMixinBase","_lastAnimationId","_mode","MdProgressSpinner","clearInterval","_interdeterminateInterval","interval","_cleanupIndeterminateAnimation","newValue","_animateCircle","rotation","startTime","Date","now","changeInValue","animateTo","animateFrom","_renderArc","animation_1","elapsedTime","ease","end","materialEase","rotationStartPoint","temp","interdeterminateInterval","setInterval","currentValue","_path","svgArc","getSvgArc","strokeWidth","setAttribute","MdSpinner","MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MdRadioGroup","MdRadioChange","MdRadioGroupBase","_changeDetector","onTouched","labelPosition","_labelPosition","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_selected","writeValue","registerOnTouched","_MdRadioGroupMixinBase","MdRadioButton","align","MdRadioButtonBase","_MdRadioButtonMixinBase","radioGroup","_removeUniqueSelectionListener","_radioDispatcher","listen","ngAfterViewInit","_onInputClick","stopPropagation","_onInputChange","groupValueChanged","MdDrawerToggleResult","animationFinished","MdDrawerContent","_container","_margins","margins","[style.marginLeft.px]","[style.marginRight.px]","_focusTrapFactory","_doc","onOpen","_elementFocusedBeforeDrawerWasOpened","activeElement","isFocusTrapEnabled","_focusTrap","focusInitialElementWhenReady","_disableClose","_restoreFocus","activeEl","contains","HTMLElement","isOpen","_isAnimating","handleKeydown","ESCAPE","_onAnimationStart","_onAnimationEnd","fromState","onClose","_currentTogglePromise","DOCUMENT","onAlignChanged","_placeholder","stateChanges","MdSelect","_multiple","getMdSelectNonFunctionValueError","_compareWith","_setOptionDisableRipple","_id","_uid","_initKeyManager","_changeSubscription","options","_resetOptions","_initializeSelection","_dropSubscriptions","_tabSubscription","_triggerFontSize","overlayDir","overlayElement","fontSize","_panelOpen","_setSelectionByValue","_onChange","_onTouched","_selectionModel","isEmpty","selectedOptions","join","viewValue","_handleClosedKeydown","UP_ARROW","_handleArrowKey","_handlePanelKeydown","_keyManager","setFirstItemActive","setLastItemActive","_onFadeInDone","focused","_onBlur","panelOpen","_onAttached","_calculateOverlayOffsetX","_setScrollTop","isInvalid","isTouched","isSubmitted","querySelector","scrollTop","_scrollTop","isUserInput","_clearSelection","isArray","_selectValue","_sortValues","correspondingOption","setActiveItem","find","option","console","warn","error","_selectViaInteraction","select","skip","clear","FocusKeyManager","withTypeAhead","tabOut","_listenToOptions","_setOptionIds","_setOptionMultiple","_optionSubscription","optionSelectionChanges","_onSelect","multiple","_propagateChanges","fallbackValue","valueToEmit","Array","MdSelectChange","valueChange","_getOptionIndex","reduce","result","current","_calculateOverlayPosition","itemHeight","panelHeight","items","scrollContainerHeight","selectedOptionOffset","empty","MdOption","countGroupLabelsBeforeOption","optionGroups","scrollBuffer","_calculateOverlayScroll","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","clampValue","overlayRect","offsetX","group","leftOverflow","paddingWidth","rightOverflow","viewportRect","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_viewportRuler","getViewportRect","panelHeightBottom","bottomSpaceAvailable","_adjustPanelUp","panelHeightTop","topSpaceAvailable","_adjustPanelDown","distanceBelowViewport","round","distanceAboveViewport","_transformOrigin","_getOriginBasedOnOption","abs","prevActiveItem","activeItem","onKeydown","currentActiveItem","_getItemCount","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-disabled]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[class.mat-select-disabled]","(blur)","MD_TOOLTIP_SCROLL_STRATEGY","deps","Overlay","useFactory","MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_disabled","showDelay","hideDelay","_message","IOS","_enterListener","_leaveListener","_tooltipInstance","_disposeTooltip","MdTooltip","trim","_updateTooltipMessage","describe","tooltipClass","removeDescription","_createTooltip","_setTooltipClass","_tooltipClass","delay","_isTooltipVisible","isVisible","afterHidden","_getOrigin","_getOverlayPosition","strategy","withScrollableContainers","getScrollContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","panelClass","scrollStrategy","originX","originY","isDirectionLtr","getMdTooltipInvalidPositionError","overlayX","overlayY","isLtr","_markForCheck","updatePosition","(focus)","_positionDeprecated","_matMessage","_matPosition","_matDisabled","TooltipComponent","_closeOnInteraction","_onHide","_hideTimeoutId","_setTransformOrigin","_showTimeoutId","_visibility","_animationDone","_handleBodyInteraction","pageSize","startIndex","page","Injectable","PageEvent","_length","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","_initialized","_intlChanges","_emitPageEvent","previousPage","hasPreviousPage","hasNextPage","numberOfPages","ceil","_changePageSize","_displayedPageSizeOptions","push","sort","a","b","transformMenu","opacity","fadeInItems","MdMenuItemBase","_MdMenuItemMixinBase","MdMenuItem","hover","_highlighted","_triggersSubmenu","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","(mouseenter)","MD_MENU_DEFAULT_OPTIONS","InjectionToken","_xPosition","_defaultOptions","xPosition","_yPosition","yPosition","throwMdMenuInvalidPositionX","setPositionClasses","throwMdMenuInvalidPositionY","classes","_classList","obj","className","MdMenu","withWrap","RxChain","from","switchMap","item","parentMenu","focusFirstItem","posY","posX","customElevation","_previousElevation","_resetAnimation","_panelAnimationState","_onAnimationDone","classList","MD_MENU_SCROLL_STRATEGY","MdMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_positionSubscription","_hoverSubscription","_openedByMouse","menu","_checkMenu","reason","closeMenu","triggersSubmenu","openMenu","_menuClosingActions","_initMenu","_startAnimation","_setMenuElevation","_setIsMenuOpen","setElevation","depth","onMenuOpen","onMenuClose","_portal","_getOverlayConfig","backdropClass","_subscribeToPositions","connectionPair","_getPosition","offsetY","overlayFallbackX","originFallbackX","connectedTo","withDirection","withFallbackPosition","originFallbackY","overlayFallbackY","backdrop","parentClose","_handleMousedown","isFakeMousedownFromScreenReader","_handleClick","toggleMenu","aria-haspopup","(mousedown)","Self","_deprecatedMdMenuTriggerFor","_matMenuTriggerFor","transformPanel","minWidth","fadeInContent","MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MdSelectBase","_MdSelectMixinBase","MdSelectTrigger","_parentForm","_parentFormGroup","ngControl","_scrollStrategyFactory","o1","o2","_optionIds","_panelDoneAnimating","_positions","ariaLabel","valueAccessor","MdListCssMatStyler","MdNavListCssMatStyler","MdDividerCssMatStyler","MdListAvatarCssMatStyler","MdListIconCssMatStyler","MdListSubheaderCssMatStyler","MdListItem","_list","_isNavList","_lineSetter","MdLineSetter","_lines","_isRippleDisabled","_handleBlur","_getHostElement","MdList","_hasAvatar","MdSelectionListBase","MdListOption","_hasFocus","checkboxPosition","deselected","destroyed","selectionList","onFocus","_handleFocus","[attr.aria-selected]","MdSelectionList","_tabIndex","_optionFocusSubscription","SelectionModel","_onFocusSubscription","_optionDestroyStream","_onDestroySubscription","deselectAll","optionIndex","updateActiveItemIndex","SPACE","_toggleSelectOnFocusedOption","focusedIndex","activeItemIndex","focusedOption","_MdSelectionListMixinBase","MdGridTile","colspan","MdGridTileText","MdLine","MdGridAvatarCssMatStyler","MdGridTileHeaderCssMatStyler","TileCoordinator","numColumns","tiles","tracker","fill","rowIndex","lastRowMax","rowCount","_trackTile","tile","gapStartIndex","_findMatchingGap","_markTilePosition","columnIndex","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","sizePercent","_gutterSize","gutterFraction","TileStyler","getTilePosition","baseSize","offset","gutterWidthFractionPerTile","_cols","setRowStyles","percentWidth","gutterWidth","FixedTileStyler","fixedRowHeight","init","gutterSize","cols","normalizeUnits","reset","list","_setStyle","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","getBaseTileSize","calc","getTileSize","getTileSpan","getGutterSpan","_setListStyle","ratioParts","parseFloat","_rowspan","_tiles","MdGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_layoutTiles","_checkRowHeight","rowHeight","_tileStyler","FitTileStyler","pos","positions","row","col","getComputedHeight","MdTextareaAutosize","_minRows","_setMinHeight","maxRows","minHeight","minRows","_cachedLineHeight","_setMaxHeight","_setTextareaStyle","property","textareaClone","border","padding","textarea","removeChild","resizeToFitContent","_previousValue","overflow","scrollHeight","rows","Platform","_matAutosizeMinRows","_matAutosizeMaxRows","MdInput","_previousNativeValue","errorState","_errorOptions","_type","_validateType","_onInput","oldState","_neverEmptyInputTypes","_isTextarea","_isNeverEmpty","_isBadInput","[placeholder]","[disabled]","[required]","MdFormFieldControl","NgControl","FormGroupDirective","MdListBase","MdListItemBase","_MdListItemMixinBase","MdListDivider","MdDatepicker","_dialog","_dateAdapter","_document","selectedChanged","datepickerUid","_validSelected","_datepickerInput","_dateFilter","_inputSubscription","_disabledChange","_popupRef","date","sameDate","_registerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","isAttached","MdDatepickerContent","afterClosed","componentInstance","datepicker","_createPopup","first$1","onStable","overlayState","_createPopupPositionStrategy","hasBackdrop","MdDialog","MD_DATEPICKER_SCROLL_STRATEGY","DateAdapter","MD_DATEPICKER_VALUE_ACCESSOR","MD_DATEPICKER_VALIDATORS","NG_VALIDATORS","MdDatepickerInput","MdDatepickerInputEvent","targetElement","target","_dateFormats","_mdFormField","dateInput","_cvaOnChange","_validatorOnChange","mdDatepickerParse","text","controlValue","coerceDateProperty","compareDate","mdDatepickerMin","actual","_maxValidator","_filterValidator","_validator","Validators","compose","_parseValidator","_minValidator","_lastValueValid","createMissingDateImplError","_localeSubscription","localeChanges","registerDatepicker","mdDatepickerFilter","oldDate","_datepicker","dateChange","_datepickerSubscription","registerOnValidatorChange","validate","c","getPopupConnectionElementRef","underlineRef","altKey","isValid","_getValidDateOrNull","isDateInstance","[attr.max]","(input)","(change)","MdFormField","matDatepickerFilter","MdDatepickerToggle","_stateChanges","datepickerDisabled","inputDisabled","MdMonthView","userSelection","longWeekdays","getDayOfWeekNames","weekdays","long","narrow","narrowWeekdays","_weekdays","slice","firstDayOfWeek","_activeDate","today","oldActiveDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","getMonthNames","getMonth","activeDate","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","createDate","getYear","enabled","dateFilter","d1","d2","MD_DATE_FORMATS","selectedChange","MdYearView","_selectedMonth","_getMonthInCurrentYear","CdkAccordion","_multi","_hideToggle","displayMode","hideToggle","MdAccordion","nextId$1","AccordionItem","accordion","accordionId","_expanded","expanded","_expansionDispatcher","notify","UniqueSelectionDispatcher","_MdExpansionPanelMixinBase","MdExpansionPanelBase","MdExpansionPanel","_uniqueSelectionDispatcher","_inputChanges","_getHideToggle","_getExpandedState","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MdExpansionPanelActionRow","MdExpansionPanelHeader","panel","_parentChangeSubscription","_getPanelId","_showToggle","_keyup","ENTER","_toggle","[attr.aria-controls]","[attr.aria-expanded]","(keyup)","[@expansionHeight]","params","collapsedHeight","expandedHeight","Host","FocusMonitor","MdExpansionPanelDescription","MdExpansionPanelTitle","MdExpansionModule","CompatibilityModule","A11yModule","_colspan","coerceToNumber","MdDialogContainer","FocusTrapFactory","MdDialogRef","_containerInstance","_beforeClose","_animationStateChanged","phaseName","_afterOpen","dialogResult","_result","_startExitAnimation","_getPositionStrategy","centerHorizontally","top","getState","MD_DIALOG_SCROLL_STRATEGY","MD_DIALOG_SCROLL_STRATEGY_PROVIDER","location","_parentDialog","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","afterAllClosed","defer","openDialogs","closeAll","_afterAllClosed","inProgressDialog","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","componentOrTemplateRef","getDialogById","dialog","_getOverlayState","dialogConfig","global","overlay","updateSize","_removeOpenDialog","splice","dialogElementUid","MdDialogClose","proxiedChange","_matDialogClose","_mdDialogClose","_matDialogCloseResult","MdDialogTitle","_ariaLabelledBy","MdDialogContent","MdDialogActions","MdDialogModule","OverlayModule","SvgIconConfig","url","svgElement","MdIconRegistry","_http","_sanitizer","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","key","iconKey","_svgIconConfigs","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","_iconSetConfigs","registerFontClassAlias","alias","_fontCssClassesByAlias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMdIconFailedToSanitizeError","cachedIcon","_cachedIconsByUrl","cloneSvg","_loadSvgIconFromConfig","doOperator","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","_loadSvgIconSetFromConfig","iconSetConfig","catchOperator","err","log","forkJoin","Observable","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_svgElementFromString","iconSet","iconNode","tagName","toLowerCase","_setSvgAttributes","cloneNode","_toSvgElement","str","div","document","createElement","getAttribute","inProgressFetch","_inProgressUrlFetches","response","finallyOperator","share","DomSanitizer","Http","ICON_REGISTRY_PROVIDER_FACTORY","MdIconBase","MdIcon","parts","svgIcon","_usingFontIcon","_updateFontIconClasses","_setSvgElement","_clearSvgElement","appendChild","layoutElement","childCount","childNodes","elem","fontSetClass","fontSet","_mdIconRegistry","_previousFontSetClass","fontIcon","_previousFontIconClass","_MdIconMixinBase","Attribute","MdIconModule","MdDatepickerIntl","minDate","maxDate","changeDetectorRef","MdCalendar","_maxDate","_clampedActiveDate","clampDate","getYearName","_monthView","switchToYearViewLabel","switchToMonthViewLabel","nextMonthLabel","nextYearLabel","startAt","_dateSelected","_userSelected","_monthSelected","month","addCalendarMonths","_nextClicked","addCalendarYears","_previousEnabled","_isSameView","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_focusActiveCell","date1","date2","addCalendarDays","getDate","PAGE_DOWN","_dateFilterForViews","increment","_nextMonthInSameCol","startView","MdCalendarCell","numCols","cellAspectRatio","selectedValueChange","MdCalendarBody","_cellClicked","cell","allowDisabledSelection","cellNumber","colIndex","todayValue","activeCell","MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MD_CHECKBOX_CONTROL_VALUE_ACCESSOR","MdCheckbox","indeterminateChange","indeterminate","_MdCheckboxRequiredValidator","CheckboxRequiredValidator","MdCheckboxRequiredValidator","MdChipSelectionChange","MdChipBase","MdBasicChip","MdChip","onRemove","removed","_removable","selectable","selectionChange","deselect","selectViaInteraction","toggleSelected","remove","removable","DELETE","BACKSPACE","_blur","chip","_MdChipMixinBase","tabindex","[class.mat-chip-selected]","destroy","MdChipRemove","_parentChip","MdChipListChange","_userTabIndex","MdChipList","_chipInput","submitted","_selectable","chips","_resetChips","_tabOutSubscription","registerInput","inputElement","setDisabledState","setProperty","_focusInput","_keydown","code","isInputEmpty","_isInputEmpty","isPrevKey","setPreviousItemActive","setNextItemActive","_updateTabIndex","_updateKeyManager","chipIndex","_updateFocusForDestroyedChips","focusChip","chipsArray","_lastDestroyedIndex","nodeName","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","chipFocusChanges","chipBlurChanges","_","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-invalid]","NgForm","compareWith","placeholder","ariaOrientation","MdChipInput","separatorKeyCodes","chipEnd","_matChipInputTokenEnd","_chipList","_addOnBlur","chipList","MdDialogConfig","ariaDescribedBy","throwMdDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","_trapFocus","hasMovedFocus","toFocus","_elementFocusedBeforeDialogWasOpened","_state","[attr.role]","[@slideDialog]","(@slideDialog.start)","MdButton","MdAnchor","focusMonitor","_haltDisabledEvents","stopImmediatePropagation","MdButtonModule","NgModule","MdRippleModule","exports","MdFab","MdButtonCssMatStyler","MdIconButtonCssMatStyler","MdButtonToggleGroupBase","MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MdButtonToggleGroup","_name","_updateSelectedButtonToggleFromValue","_updateButtonToggleNames","_buttonToggles","buttonToggle","isDisabled","_MdButtonToggleGroupMixinBase","MdButtonToggleGroupMultiple","MdButtonToggle","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-disabled]","MdCardContent","MdCardTitle","MdCardSubtitle","MdCardActions","[class.mat-card-actions-align-end]","MdCardFooter","MdCardImage","MdCardSmImage","MdCardMdImage","MdCardLgImage","MdCardXlImage","MdCardAvatar","MdCard","MdCardHeader","MdCardTitleGroup","MdCardModule","TransitionCheckState","Init","Checked","Unchecked","Indeterminate","MdCheckboxChange","MdCheckboxBase","_currentAnimationClass","_indeterminate","changed","newState","_getAnimationClassForCheckStateTransition","_currentCheckState","_removeFocusRipple","_onInteractionEvent","animSuffix","_MdCheckboxMixinBase","MdOptgroupBase","_MdOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","MdOptgroup","[class.mat-optgroup-disabled]","_uniqueIdCounter","MdOptionSelectionChange","onSelectionChange","_emitSelectionChangeEvent","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MdOptionModule","MdPseudoCheckboxModule","MD_PLACEHOLDER_GLOBAL_OPTIONS","MdError","MdHint","nextUniqueId$2","[class.mat-right]","MdPlaceholder","MdPrefix","MdSuffix","_subscriptAnimationState","floatPlaceholder","_placeholderOptions","float","_hintLabel","_processHints","_floatPlaceholder","_validateControlChild","_control","controlType","_syncDescribedByIds","_hintChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_errorChildren","_canPlaceholderFloat","_showAlwaysAnimate","_validatePlaceholders","getMdFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMdFormFieldDuplicatedHintError","_getDisplayedMessages","startHint","_hintLabelId","endHint","mdError","getMdFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-invalid]","color","dividerColor","hideRequiredMarker","_connectionContainerRef","_suffixChildren","MdFormFieldModule","MdAutocompleteSelectedEvent","MdAutocomplete","showPanel","displayWith","optionSelected","_uniqueAutocompleteIdCounter","ActiveDescendantKeyManager","_getScrollTop","_setVisibility","_emitSelectEvent","_getClassList","mat-autocomplete-visible","mat-autocomplete-hidden","TemplateRef","MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MD_AUTOCOMPLETE_SCROLL_STRATEGY","MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MD_AUTOCOMPLETE_VALUE_ACCESSOR","MdAutocompleteTrigger","_zone","_formField","autocomplete","_destroyPanel","openPanel","_attachOverlay","_closingActionsSubscription","_resetPlaceholder","clickTarget","closePanel","activeOption","_resetActiveItem","isArrowKey_1","_handleInput","shouldAnimate","_animateAndLockPlaceholder","_manuallyFloatingPlaceholder","_scrollToOption","activeOptionIndex","labelCount","optionOffset","panelTop","newScrollTop","_subscribeToClosingActions","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","_setTriggerValue","inputValue","_clearPreviousSelectedOption","_getHostWidth","_getConnectedElement","aria-autocomplete","aria-multiline","[attr.aria-activedescendant]","(focusin)","DEFAULT_ROUND_BUTTON_COLOR","MdRaisedButtonCssMatStyler","button","anchor","MdMiniFab","_MdButtonMixinBase","MdButtonBase","_isIconButton","_hasAttributeWithPrefix","disableRipple","isBrowser","unprefixedAttributeNames","some","suffix","el","hasAttribute","__extends","d","__","constructor","extendStatics","base","class_1","class_2","_color","colorPalette","defaultColor","class_3","defaultTabIndex","class_4","valuesArray","invalid","touched","dirty","getComputedStyle","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","getMdAutocompleteMissingPanelError","MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","block","getMdIconNameNotFoundError","getMdIconNoHttpProviderError","parentRegistry","http","sanitizer","adapter","fromIso8601","parseInt","getMdInputUnsupportedTypeError","scrollThrottle","SCROLL_THROTTLE_MS","linearEase","currentTime","startValue","time","timeCubed","pow","timeQuad","startAngle","startPoint","polarToCartesian","pathRadius","arcSweep","endAngle","throwMdDuplicatedDrawerError","extendObject","sortOrder","reverse","setPrototypeOf","__proto__","p","AnimationCurves","STANDARD_CURVE","DECELERATION_CURVE","AnimationDurations","NoConflictStyleCompatibilityMode","MATERIAL_SANITY_CHECKS","listener","_listeners","UNIQUE_SELECTION_DISPATCHER_PROVIDER","_localeChanges","getDayOfWeek","clone","parse","parseFormat","DEFAULT_DATE_NAMES","range","String","ISO_8601_REGEX","useUtcForDisplay","setLocale","matDateLocale","NativeDateAdapter","getDay","DEFAULT_MONTH_NAMES","_stripDirectionalityCharacters","dtf","format","year","displayFormat","Intl","DateTimeFormat","locale","toDateString","years","_createDateWithOverflow","days","_2digit","getUTCMonth","iso8601String","test","isNaN","getTime","setFullYear","MD_NATIVE_DATE_FORMATS","monthYearLabel","dateA11yLabel","day","monthYearA11yLabel","NativeDateModule","MAT_DATE_LOCALE_PROVIDER","MdNativeDateModule","GestureConfig","_hammer","isDevMode","buildHammer","mc","pan","Pan","press","Press","slide","_createRecognizer","threshold","swipe","longpress","recognizeWith","inheritances","_resetClasses","count","_setClass","MdLineModule","RippleState","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","fadeOutRipple","RippleRef","RippleRenderer","_ruler","_triggerEvents","Map","rippleDisabled","_containerElement","onMousedown","bind","setTriggerElement","containerRect","scrollPosition","getViewportScrollPosition","pageX","ripple","radius","_activeRipples","add","rippleRef","_isMousedown","rippleEl","runTimeoutOutsideZone","_triggerElement","addEventListener","MD_RIPPLE_GLOBAL_OPTIONS","_rippleRenderer","_globalOptions","_updateRippleRenderer","speedFactor","fadeInRipple","pageY","ViewportRuler","unbounded","_matRippleTrigger","_matRippleCentered","_matRippleUnbounded","PlatformModule","ScrollDispatchModule","VIEWPORT_RULER_PROVIDER","MdPseudoCheckbox","[class.mat-pseudo-checkbox-checked]"],"mappings":"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"}