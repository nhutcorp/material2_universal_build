{"version":3,"file":"material-datepicker.umd.min.js","sources":["../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/icon/index.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/form-field/index.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/core/option/index.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/button/button.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/button/button-module.ts","../../src/lib/button/index.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/dialog/index.ts","../../src/lib/icon/icon-registry.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/datepicker/coerce-date-property.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/option.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n  PositionStrategy,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {ComponentPortal} from '@angular/cdk/portal';\r\nimport {first} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter, MATERIAL_COMPATIBILITY_MODE} from '@angular/material/core';\r\nimport {MdDialog, MdDialogRef} from '@angular/material/dialog';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MdCalendar} from './calendar';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\nimport {MdDatepickerInput} from './datepicker-input';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n */\nexport const MD_DATEPICKER_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('md-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\n/**\n * \\@docs-private\n */\nexport const MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MD_DATEPICKER_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\rMdCalendar directly as the content so we can control the initial focus. This also gives us a\rplace to put additional features of the popup that are not part of the calendar itself in the\rfuture. (e.g. confirmation buttons).\r\\@docs-private\n */\nexport class MdDatepickerContent<D> implements AfterContentInit {\r\n  datepicker: MdDatepicker<D>;\r\n\r\n   _calendar: MdCalendar<D>;\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._calendar._focusActiveCell();\r\n  }\n/**\n * Handles keydown event on datepicker content.\r\\@param event The event.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ESCAPE) {\r\n      this.datepicker.close();\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-datepicker-content, mat-datepicker-content',\r\n  templateUrl: 'datepicker-content.html',\r\n  styleUrls: ['datepicker-content.css'],\r\n  host: {\r\n    'class': 'mat-datepicker-content',\r\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n    '(keydown)': '_handleKeydown($event)',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_calendar': [{ type: ViewChild, args: [MdCalendar, ] },],\n};\n}\n\nfunction MdDatepickerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerContent.ctorParameters;\n/** @type {?} */\nMdDatepickerContent.propDecorators;\n/** @type {?} */\nMdDatepickerContent.prototype.datepicker;\n/** @type {?} */\nMdDatepickerContent.prototype._calendar;\n}\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nexport class MdDatepicker<D> implements OnDestroy {\n/**\n * The date to open the calendar to initially.\n * @return {?}\n */\nget startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nset startAt(date: D | null) { this._startAt = coerceDateProperty(this._dateAdapter, date); }\nprivate _startAt: D | null;\n/**\n * The view that the calendar should start in.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\rthan a popup and elements have more padding to allow for bigger touch targets.\n */\ntouchUi = false;\n/**\n * Whether the datepicker pop-up should be disabled.\n * @return {?}\n */\nget disabled() {\r\n    return this._disabled === undefined ? this._datepickerInput.disabled : this._disabled;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\r\n    const /** @type {?} */ newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.next(newValue);\r\n    }\r\n  }\nprivate _disabled: boolean;\n/**\n * Emits new selected date when selected date changes.\r\\@deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n */\nselectedChanged = new EventEmitter<D>();\n/**\n * Whether the calendar is open.\n */\nopened = false;\n/**\n * The id for the datepicker calendar.\n */\nid = `md-datepicker-${datepickerUid++}`;\n/**\n * The currently selected date.\n * @return {?}\n */\nget _selected(): D | null { return this._validSelected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _selected(value: D | null) { this._validSelected = value; }\nprivate _validSelected: D | null = null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget _minDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.min;\r\n  }\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget _maxDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.max;\r\n  }\n/**\n * @return {?}\n */\nget _dateFilter(): (date: D | null) => boolean {\r\n    return this._datepickerInput && this._datepickerInput._dateFilter;\r\n  }\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n */\nprivate _popupRef: OverlayRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n */\nprivate _dialogRef: MdDialogRef<any> | null;\n/**\n * A portal containing the calendar for this datepicker.\n */\nprivate _calendarPortal: ComponentPortal<MdDatepickerContent<D>>;\n/**\n * The element that was focused before the datepicker was opened.\n */\nprivate _focusedElementBeforeOpen: HTMLElement | null = null;\nprivate _inputSubscription = Subscription.EMPTY;\n/**\n * The input element this datepicker is associated with.\n */\n_datepickerInput: MdDatepickerInput<D>;\n/**\n * Emits when the datepicker is disabled.\n */\n_disabledChange = new Subject<boolean>();\n/**\n * @param {?} _dialog\n * @param {?} _overlay\n * @param {?} _ngZone\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _dateAdapter\n * @param {?} _dir\n * @param {?} _document\n */\nconstructor(private _dialog: MdDialog,\nprivate _overlay: Overlay,\nprivate _ngZone: NgZone,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dir: Directionality,\nprivate _document: any) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n    }\r\n  }\n/**\n * Selects the given date\n * @param {?} date\n * @return {?}\n */\n_select(date: D): void {\r\n    let /** @type {?} */ oldValue = this._selected;\r\n    this._selected = date;\r\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\r\n      this.selectedChanged.emit(date);\r\n    }\r\n  }\n/**\n * Register an input with this datepicker.\r\\@param input The datepicker input to register with this datepicker.\n * @param {?} input\n * @return {?}\n */\n_registerInput(input: MdDatepickerInput<D>): void {\r\n    if (this._datepickerInput) {\r\n      throw Error('An MdDatepicker can only be associated with a single input.');\r\n    }\r\n    this._datepickerInput = input;\r\n    this._inputSubscription =\r\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\r\n  }\n/**\n * Open the calendar.\n * @return {?}\n */\nopen(): void {\r\n    if (this.opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._datepickerInput) {\r\n      throw Error('Attempted to open an MdDatepicker with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this.opened = true;\r\n  }\n/**\n * Close the calendar.\n * @return {?}\n */\nclose(): void {\r\n    if (!this.opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n      this._calendarPortal.detach();\r\n    }\r\n    if (this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n\r\n      this._focusedElementBeforeOpen.focus();\r\n      this._focusedElementBeforeOpen = null;\r\n    }\r\n\r\n    this.opened = false;\r\n  }\n/**\n * Open the calendar as a dialog.\n * @return {?}\n */\nprivate _openAsDialog(): void {\r\n    this._dialogRef = this._dialog.open(MdDatepickerContent, {\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      viewContainerRef: this._viewContainerRef,\r\n    });\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.datepicker = this;\r\n  }\n/**\n * Open the calendar as a popup.\n * @return {?}\n */\nprivate _openAsPopup(): void {\r\n    if (!this._calendarPortal) {\r\n      this._calendarPortal = new ComponentPortal(MdDatepickerContent, this._viewContainerRef);\r\n    }\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      let /** @type {?} */ componentRef: ComponentRef<MdDatepickerContent<D>> =\r\n          this._popupRef.attach(this._calendarPortal);\r\n      componentRef.instance.datepicker = this;\r\n\r\n      // Update the position once the calendar has rendered.\r\n      first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\r\n        this._popupRef.updatePosition();\r\n      });\r\n    }\r\n\r\n    this._popupRef.backdropClick().subscribe(() => this.close());\r\n  }\n/**\n * Create the popup.\n * @return {?}\n */\nprivate _createPopup(): void {\r\n    const /** @type {?} */ overlayState = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: true,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      scrollStrategy: this._scrollStrategy()\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayState);\r\n  }\n/**\n * Create the popup PositionStrategy.\n * @return {?}\n */\nprivate _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay.position()\r\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\r\n        {originX: 'start', originY: 'bottom'},\r\n        {overlayX: 'start', overlayY: 'top'}\r\n      )\r\n      .withFallbackPosition(\r\n        { originX: 'start', originY: 'top' },\r\n        { overlayX: 'start', overlayY: 'bottom' }\r\n      )\r\n      .withFallbackPosition(\r\n        {originX: 'end', originY: 'bottom'},\r\n        {overlayX: 'end', overlayY: 'top'}\r\n      )\r\n      .withFallbackPosition(\r\n        { originX: 'end', originY: 'top' },\r\n        { overlayX: 'end', overlayY: 'bottom' }\r\n      );\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-datepicker, mat-datepicker',\r\n  template: '',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n{type: Overlay, },\n{type: NgZone, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_DATEPICKER_SCROLL_STRATEGY, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'touchUi': [{ type: Input },],\n'disabled': [{ type: Input },],\n'selectedChanged': [{ type: Output },],\n};\n}\n\nfunction MdDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepicker.ctorParameters;\n/** @type {?} */\nMdDatepicker.propDecorators;\n/** @type {?} */\nMdDatepicker.prototype._startAt;\n/**\n * The view that the calendar should start in.\n * @type {?}\n */\nMdDatepicker.prototype.startView;\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\rthan a popup and elements have more padding to allow for bigger touch targets.\n * @type {?}\n */\nMdDatepicker.prototype.touchUi;\n/** @type {?} */\nMdDatepicker.prototype._disabled;\n/**\n * Emits new selected date when selected date changes.\r\\@deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n * @type {?}\n */\nMdDatepicker.prototype.selectedChanged;\n/**\n * Whether the calendar is open.\n * @type {?}\n */\nMdDatepicker.prototype.opened;\n/**\n * The id for the datepicker calendar.\n * @type {?}\n */\nMdDatepicker.prototype.id;\n/** @type {?} */\nMdDatepicker.prototype._validSelected;\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n * @type {?}\n */\nMdDatepicker.prototype._popupRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n * @type {?}\n */\nMdDatepicker.prototype._dialogRef;\n/**\n * A portal containing the calendar for this datepicker.\n * @type {?}\n */\nMdDatepicker.prototype._calendarPortal;\n/**\n * The element that was focused before the datepicker was opened.\n * @type {?}\n */\nMdDatepicker.prototype._focusedElementBeforeOpen;\n/** @type {?} */\nMdDatepicker.prototype._inputSubscription;\n/**\n * The input element this datepicker is associated with.\n * @type {?}\n */\nMdDatepicker.prototype._datepickerInput;\n/**\n * Emits when the datepicker is disabled.\n * @type {?}\n */\nMdDatepicker.prototype._disabledChange;\n/** @type {?} */\nMdDatepicker.prototype._dialog;\n/** @type {?} */\nMdDatepicker.prototype._overlay;\n/** @type {?} */\nMdDatepicker.prototype._ngZone;\n/** @type {?} */\nMdDatepicker.prototype._viewContainerRef;\n/** @type {?} */\nMdDatepicker.prototype._scrollStrategy;\n/** @type {?} */\nMdDatepicker.prototype._dateAdapter;\n/** @type {?} */\nMdDatepicker.prototype._dir;\n/** @type {?} */\nMdDatepicker.prototype._document;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport {DateAdapter, MD_DATE_FORMATS, MdDateFormats} from '@angular/material/core';\r\nimport {MdFormField} from '@angular/material/form-field';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {MdDatepicker} from './datepicker';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nexport const /** @type {?} */ MD_DATEPICKER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdDatepickerInput),\r\n  multi: true\r\n};\r\n\r\n\r\nexport const /** @type {?} */ MD_DATEPICKER_VALIDATORS: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MdDatepickerInput),\r\n  multi: true\r\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\rinput or change event because the event may have been triggered by the user clicking on the\rcalendar popup. For consistency, we always use MdDatepickerInputEvent instead.\n */\nexport class MdDatepickerInputEvent<D> {\n/**\n * The new value for the target datepicker input.\n */\nvalue: D | null;\n/**\n * @param {?} target\n * @param {?} targetElement\n */\nconstructor(public target: MdDatepickerInput<D>,\npublic targetElement: HTMLElement) {\r\n    this.value = this.target.value;\r\n  }\r\n}\n\nfunction MdDatepickerInputEvent_tsickle_Closure_declarations() {\n/**\n * The new value for the target datepicker input.\n * @type {?}\n */\nMdDatepickerInputEvent.prototype.value;\n/** @type {?} */\nMdDatepickerInputEvent.prototype.target;\n/** @type {?} */\nMdDatepickerInputEvent.prototype.targetElement;\n}\n\n/**\n * Directive used to connect an input to a MdDatepicker.\n */\nexport class MdDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\r\n    Validator {\n/**\n * The datepicker that this input is associated with.\n * @param {?} value\n * @return {?}\n */\nset mdDatepicker(value: MdDatepicker<D>) {\r\n    this.registerDatepicker(value);\r\n  }\r\n  _datepicker: MdDatepicker<D>;\n/**\n * @param {?} value\n * @return {?}\n */\nprivate registerDatepicker(value: MdDatepicker<D>) {\r\n    if (value) {\r\n      this._datepicker = value;\r\n      this._datepicker._registerInput(this);\r\n    }\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset matDatepicker(value: MdDatepicker<D>) {\r\n    // Note that we don't set `this.mdDatepicker = value` here,\r\n    // because that line gets stripped by the JS compiler.\r\n    this.registerDatepicker(value);\r\n  }\n/**\n * @param {?} filter\n * @return {?}\n */\nset mdDatepickerFilter(filter: (date: D | null) => boolean) {\r\n    this._dateFilter = filter;\r\n    this._validatorOnChange();\r\n  }\r\n  _dateFilter: (date: D | null) => boolean;\n/**\n * @param {?} filter\n * @return {?}\n */\nset matDatepickerFilter(filter: (date: D | null) => boolean) {\r\n    this.mdDatepickerFilter = filter;\r\n  }\n/**\n * The value of the input.\n * @return {?}\n */\nget value(): D | null {\r\n    return this._value;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: D | null) {\r\n    value = coerceDateProperty(this._dateAdapter, value);\r\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n    value = this._getValidDateOrNull(value);\r\n\r\n    let /** @type {?} */ oldDate = this.value;\r\n    this._value = value;\r\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\r\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '');\r\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\r\n      this._valueChange.emit(value);\r\n    }\r\n  }\nprivate _value: D | null;\n/**\n * The minimum valid date.\n * @return {?}\n */\nget min(): D | null { return this._min; }\n/**\n * @param {?} value\n * @return {?}\n */\nset min(value: D | null) {\r\n    this._min = coerceDateProperty(this._dateAdapter, value);\r\n    this._validatorOnChange();\r\n  }\nprivate _min: D | null;\n/**\n * The maximum valid date.\n * @return {?}\n */\nget max(): D | null { return this._max; }\n/**\n * @param {?} value\n * @return {?}\n */\nset max(value: D | null) {\r\n    this._max = coerceDateProperty(this._dateAdapter, value);\r\n    this._validatorOnChange();\r\n  }\nprivate _max: D | null;\n/**\n * Whether the datepicker-input is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\r\n    const /** @type {?} */ newValue = coerceBooleanProperty(value);\r\n\r\n    if (this._disabled !== newValue) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.emit(newValue);\r\n    }\r\n  }\nprivate _disabled: boolean;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n */\ndateChange = new EventEmitter<MdDatepickerInputEvent<D>>();\n/**\n * Emits when an `input` event is fired on this `<input>`.\n */\ndateInput = new EventEmitter<MdDatepickerInputEvent<D>>();\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n */\n_valueChange = new EventEmitter<D|null>();\n/**\n * Emits when the disabled state has changed\n */\n_disabledChange = new EventEmitter<boolean>();\r\n\r\n  _onTouched = () => {};\nprivate _cvaOnChange: (value: any) => void = () => {};\nprivate _validatorOnChange = () => {};\nprivate _datepickerSubscription = Subscription.EMPTY;\nprivate _localeSubscription = Subscription.EMPTY;\n/**\n * The form control validator for whether the input parses.\n */\nprivate _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n    return this._lastValueValid ?\r\n        null : {'mdDatepickerParse': {'text': this._elementRef.nativeElement.value}};\r\n  }\n/**\n * The form control validator for the min date.\n */\nprivate _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\r\n    return (!this.min || !controlValue ||\r\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\r\n        null : {'mdDatepickerMin': {'min': this.min, 'actual': controlValue}};\r\n  }\n/**\n * The form control validator for the max date.\n */\nprivate _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\r\n    return (!this.max || !controlValue ||\r\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\r\n        null : {'mdDatepickerMax': {'max': this.max, 'actual': controlValue}};\r\n  }\n/**\n * The form control validator for the date filter.\n */\nprivate _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\r\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\r\n        null : {'mdDatepickerFilter': true};\r\n  }\n/**\n * The combined form control validator for this input.\n */\nprivate _validator: ValidatorFn | null =\r\n      Validators.compose(\r\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n/**\n * Whether the last value set on the input was valid.\n */\nprivate _lastValueValid = false;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _mdFormField\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\nprivate _mdFormField: MdFormField) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MD_DATE_FORMATS');\r\n    }\r\n\r\n    // Update the displayed date when the locale changes.\r\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n      this.value = this.value;\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    if (this._datepicker) {\r\n      this._datepickerSubscription =\r\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\r\n            this.value = selected;\r\n            this._cvaOnChange(selected);\r\n            this._onTouched();\r\n            this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n            this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n          });\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._datepickerSubscription.unsubscribe();\r\n    this._localeSubscription.unsubscribe();\r\n    this._valueChange.complete();\r\n    this._disabledChange.complete();\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\r\n    this._validatorOnChange = fn;\r\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(c) : null;\r\n  }\n/**\n * Gets the element that the datepicker popup should be connected to.\r\\@return The element to connect the popup to.\n * @return {?}\n */\ngetPopupConnectionElementRef(): ElementRef {\r\n    return this._mdFormField ? this._mdFormField.underlineRef : this._elementRef;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: D): void {\r\n    this.value = value;\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\r\n    this._cvaOnChange = fn;\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\r\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\r\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\r\n      this._datepicker.open();\r\n      event.preventDefault();\r\n    }\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n_onInput(value: string) {\r\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\r\n    date = this._getValidDateOrNull(date);\r\n    this._value = date;\r\n    this._cvaOnChange(date);\r\n    this._valueChange.emit(date);\r\n    this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\n/**\n * @return {?}\n */\n_onChange() {\r\n    this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\n/**\n * @param {?} obj The object to check.\n * @return {?}\n */\nprivate _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'input[mdDatepicker], input[matDatepicker]',\r\n  providers: [MD_DATEPICKER_VALUE_ACCESSOR, MD_DATEPICKER_VALIDATORS],\r\n  host: {\r\n    '[attr.aria-haspopup]': 'true',\r\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n    '[disabled]': 'disabled',\r\n    '(input)': '_onInput($event.target.value)',\r\n    '(change)': '_onChange()',\r\n    '(blur)': '_onTouched()',\r\n    '(keydown)': '_onKeydown($event)',\r\n  },\r\n  exportAs: 'mdDatepickerInput, matDatepickerInput',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: MdFormField, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdDatepicker': [{ type: Input },],\n'matDatepicker': [{ type: Input },],\n'mdDatepickerFilter': [{ type: Input },],\n'matDatepickerFilter': [{ type: Input },],\n'value': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n'disabled': [{ type: Input },],\n'dateChange': [{ type: Output },],\n'dateInput': [{ type: Output },],\n};\n}\n\nfunction MdDatepickerInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerInput.ctorParameters;\n/** @type {?} */\nMdDatepickerInput.propDecorators;\n/** @type {?} */\nMdDatepickerInput.prototype._datepicker;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFilter;\n/** @type {?} */\nMdDatepickerInput.prototype._value;\n/** @type {?} */\nMdDatepickerInput.prototype._min;\n/** @type {?} */\nMdDatepickerInput.prototype._max;\n/** @type {?} */\nMdDatepickerInput.prototype._disabled;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n * @type {?}\n */\nMdDatepickerInput.prototype.dateChange;\n/**\n * Emits when an `input` event is fired on this `<input>`.\n * @type {?}\n */\nMdDatepickerInput.prototype.dateInput;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n * @type {?}\n */\nMdDatepickerInput.prototype._valueChange;\n/**\n * Emits when the disabled state has changed\n * @type {?}\n */\nMdDatepickerInput.prototype._disabledChange;\n/** @type {?} */\nMdDatepickerInput.prototype._onTouched;\n/** @type {?} */\nMdDatepickerInput.prototype._cvaOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._validatorOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._datepickerSubscription;\n/** @type {?} */\nMdDatepickerInput.prototype._localeSubscription;\n/**\n * The form control validator for whether the input parses.\n * @type {?}\n */\nMdDatepickerInput.prototype._parseValidator;\n/**\n * The form control validator for the min date.\n * @type {?}\n */\nMdDatepickerInput.prototype._minValidator;\n/**\n * The form control validator for the max date.\n * @type {?}\n */\nMdDatepickerInput.prototype._maxValidator;\n/**\n * The form control validator for the date filter.\n * @type {?}\n */\nMdDatepickerInput.prototype._filterValidator;\n/**\n * The combined form control validator for this input.\n * @type {?}\n */\nMdDatepickerInput.prototype._validator;\n/**\n * Whether the last value set on the input was valid.\n * @type {?}\n */\nMdDatepickerInput.prototype._lastValueValid;\n/** @type {?} */\nMdDatepickerInput.prototype._elementRef;\n/** @type {?} */\nMdDatepickerInput.prototype._renderer;\n/** @type {?} */\nMdDatepickerInput.prototype._dateAdapter;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFormats;\n/** @type {?} */\nMdDatepickerInput.prototype._mdFormField;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  OnDestroy,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {MdDatepicker} from './datepicker';\r\nimport {MdDatepickerIntl} from './datepicker-intl';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {MATERIAL_COMPATIBILITY_MODE} from '@angular/material/core';\nexport class MdDatepickerToggle<D> implements OnChanges, OnDestroy {\nprivate _stateChanges = Subscription.EMPTY;\n/**\n * Datepicker instance that the button will toggle.\n */\ndatepicker: MdDatepicker<D>;\n/**\n * Whether the toggle button is disabled.\n * @return {?}\n */\nget disabled() {\r\n    return this._disabled === undefined ? this.datepicker.disabled : this._disabled;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\nprivate _disabled: boolean;\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n */\nconstructor(\npublic _intl: MdDatepickerIntl,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    if (changes.datepicker) {\r\n      const /** @type {?} */ datepicker: MdDatepicker<D> = changes.datepicker.currentValue;\r\n      const /** @type {?} */ datepickerDisabled = datepicker ? datepicker._disabledChange : observableOf();\r\n      const /** @type {?} */ inputDisabled = datepicker && datepicker._datepickerInput ?\r\n        datepicker._datepickerInput._disabledChange :\r\n        observableOf();\r\n\r\n      this._stateChanges.unsubscribe();\r\n      this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\r\n        .subscribe(() => this._changeDetectorRef.markForCheck());\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_open(event: Event): void {\r\n    if (this.datepicker && !this.disabled) {\r\n      this.datepicker.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-datepicker-toggle, mat-datepicker-toggle',\r\n  templateUrl: 'datepicker-toggle.html',\r\n  host: {\r\n    'class': 'mat-datepicker-toggle',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDatepickerIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'datepicker': [{ type: Input, args: ['for', ] },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdDatepickerToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerToggle.ctorParameters;\n/** @type {?} */\nMdDatepickerToggle.propDecorators;\n/** @type {?} */\nMdDatepickerToggle.prototype._stateChanges;\n/**\n * Datepicker instance that the button will toggle.\n * @type {?}\n */\nMdDatepickerToggle.prototype.datepicker;\n/** @type {?} */\nMdDatepickerToggle.prototype._disabled;\n/** @type {?} */\nMdDatepickerToggle.prototype._intl;\n/** @type {?} */\nMdDatepickerToggle.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  DateAdapter, MATERIAL_COMPATIBILITY_MODE, MD_DATE_FORMATS,\r\n  MdDateFormats\r\n} from '@angular/material/core';\r\nimport {MdCalendarCell} from './calendar-body';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\r\\@docs-private\n */\nexport class MdMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\r\n    let /** @type {?} */ oldActiveDate = this._activeDate;\r\n    this._activeDate = coerceDateProperty(this._dateAdapter, value) || this._dateAdapter.today();\r\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) {\r\n    this._selected = coerceDateProperty(this._dateAdapter, value);\r\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\r\n  }\nprivate _selected: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D | null>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MdCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\rNull if the currently selected Date is in another month.\n */\n_selectedDate: number | null;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number | null;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MD_DATE_FORMATS');\r\n    }\r\n\r\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    let weekdays = longWeekdays.map((long, i) => {\r\n      return {long, narrow: narrowWeekdays[i]};\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\r\n    this._init();\r\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\r\n    if (this._selectedDate != date) {\r\n      const /** @type {?} */ selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n      const /** @type {?} */ selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n      const /** @type {?} */ selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\r\n\r\n      this.selectedChange.emit(selectedDate);\r\n    }\r\n\r\n    this.userSelection.emit();\r\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\r\n    this._monthLabel =\r\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\r\n            .toLocaleUpperCase();\r\n\r\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate), 1);\r\n    this._firstWeekOffset =\r\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\r\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\r\n\r\n    this._createWeekCells();\r\n  }\n/**\n * Creates MdCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\r\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\r\n      if (cell == DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      let /** @type {?} */ date = this._dateAdapter.createDate(\r\n          this._dateAdapter.getYear(this.activeDate),\r\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\r\n      let /** @type {?} */ enabled = !this.dateFilter ||\r\n          this.dateFilter(date);\r\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      this._weeks[this._weeks.length - 1]\r\n          .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\r\n    }\r\n  }\n/**\n * Gets the date in this month that the given Date falls on.\rReturns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D | null): number | null {\r\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\r\n        this._dateAdapter.getDate(date) : null;\r\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\r\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\r\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-month-view',\r\n  templateUrl: 'month-view.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MdMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMonthView.ctorParameters;\n/** @type {?} */\nMdMonthView.propDecorators;\n/** @type {?} */\nMdMonthView.prototype._activeDate;\n/** @type {?} */\nMdMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMdMonthView.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMdMonthView.prototype.userSelection;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMdMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMdMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMdMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\rNull if the currently selected Date is in another month.\n * @type {?}\n */\nMdMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMdMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMdMonthView.prototype._weekdays;\n/** @type {?} */\nMdMonthView.prototype._dateAdapter;\n/** @type {?} */\nMdMonthView.prototype._dateFormats;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter, MD_DATE_FORMATS, MdDateFormats} from '@angular/material/core';\r\nimport {MdCalendarCell} from './calendar-body';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {createMissingDateImplError} from './datepicker-errors';\n/**\n * An internal component used to display a single year in the datepicker.\r\\@docs-private\n */\nexport class MdYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\r\n    let /** @type {?} */ oldActiveDate = this._activeDate;\r\n    this._activeDate = coerceDateProperty(this._dateAdapter, value) || this._dateAdapter.today();\r\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) {\r\n    this._selected = coerceDateProperty(this._dateAdapter, value);\r\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\r\n  }\nprivate _selected: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MdCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number | null;\n/**\n * The month in this year that the selected Date falls on.\rNull if the selected Date is in a different year.\n */\n_selectedMonth: number | null;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MD_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._init();\r\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\r\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(\r\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\r\n    this.selectedChange.emit(this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate), month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n\r\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\r\n        month => this._createCellForMonth(month, monthNames[month])));\r\n  }\n/**\n * Gets the month in this year that the given Date falls on.\rReturns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D | null) {\r\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\r\n        this._dateAdapter.getMonth(date) : null;\r\n  }\n/**\n * Creates an MdCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\r\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\r\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\r\n        this._dateFormats.display.monthYearA11yLabel);\r\n    return new MdCalendarCell(\r\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\r\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate), month, 1);\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\r\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-year-view, mat-year-view',\r\n  templateUrl: 'year-view.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdYearView.ctorParameters;\n/** @type {?} */\nMdYearView.propDecorators;\n/** @type {?} */\nMdYearView.prototype._activeDate;\n/** @type {?} */\nMdYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMdYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMdYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMdYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMdYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\rNull if the selected Date is in a different year.\n * @type {?}\n */\nMdYearView.prototype._selectedMonth;\n/** @type {?} */\nMdYearView.prototype._dateAdapter;\n/** @type {?} */\nMdYearView.prototype._dateFormats;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MdButtonModule} from '@angular/material/button';\r\nimport {MdDialogModule} from '@angular/material/dialog';\r\nimport {MdIconModule} from '@angular/material/icon';\r\nimport {MdCalendar} from './calendar';\r\nimport {MdCalendarBody} from './calendar-body';\r\nimport {\r\n  MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\r\n  MdDatepicker,\r\n  MdDatepickerContent,\r\n} from './datepicker';\r\nimport {MdDatepickerInput} from './datepicker-input';\r\nimport {MdDatepickerIntl} from './datepicker-intl';\r\nimport {MdDatepickerToggle} from './datepicker-toggle';\r\nimport {MdMonthView} from './month-view';\r\nimport {MdYearView} from './year-view';\nexport class MdDatepickerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    CommonModule,\r\n    MdButtonModule,\r\n    MdDialogModule,\r\n    MdIconModule,\r\n    OverlayModule,\r\n    A11yModule,\r\n  ],\r\n  exports: [\r\n    MdCalendar,\r\n    MdCalendarBody,\r\n    MdDatepicker,\r\n    MdDatepickerContent,\r\n    MdDatepickerInput,\r\n    MdDatepickerToggle,\r\n    MdMonthView,\r\n    MdYearView,\r\n  ],\r\n  declarations: [\r\n    MdCalendar,\r\n    MdCalendarBody,\r\n    MdDatepicker,\r\n    MdDatepickerContent,\r\n    MdDatepickerInput,\r\n    MdDatepickerToggle,\r\n    MdMonthView,\r\n    MdYearView,\r\n  ],\r\n  providers: [\r\n    MdDatepickerIntl,\r\n    MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\r\n  ],\r\n  entryComponents: [\r\n    MdDatepickerContent,\r\n  ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {first} from '@angular/cdk/rxjs';\r\nimport {\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\r\nimport {MdIconRegistry} from './icon-registry';\n/**\n * \\@docs-private\n */\nexport class MdIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconBase.prototype._renderer;\n/** @type {?} */\nMdIconBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdIconMixinBase = mixinColor(MdIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\r\r- Specify the svgIcon input to load an SVG icon from a URL previously registered with the\r  addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\r  MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\r  \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\r  Examples:\r    <md-icon svgIcon=\"left-arrow\"></md-icon>\r    <md-icon svgIcon=\"animals:cat\"></md-icon>\r\r- Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\r  component. By default the Material icons font is used as described at\r  http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\r  alternate font by setting the fontSet input to either the CSS class to apply to use the\r  desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\r  Examples:\r    <md-icon>home</md-icon>\r    <md-icon fontSet=\"myfont\">sun</md-icon>\r\r- Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\r  font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\r  CSS class which causes the glyph to be displayed via a :before selector, as in\r  https://fortawesome.github.io/Font-Awesome/examples/\r  Example:\r    <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon extends _MdIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _mdIconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\r\n      renderer: Renderer2,\r\n      elementRef: ElementRef,\nprivate _mdIconRegistry: MdIconRegistry,\r\n       ariaHidden: string) {\r\n    super(renderer, elementRef);\r\n\r\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\r\n    // the right thing to do for the majority of icon use-cases.\r\n    if (!ariaHidden) {\r\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\r\n    }\r\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\rReturns a 2-element array of [(icon set), (icon name)].\rThe separator for the two fields is ':'. If there is no separator, an empty\rstring is returned for the icon set and the entire value is returned for\rthe icon name. If the argument is falsy, returns an array of two empty strings.\rThrows an error if the name contains two or more ':' separators.\rExamples:\r  'social:cake' -> ['social', 'cake']\r  'penguin' -> ['', 'penguin']\r  null -> ['', '']\r  'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\r\n    if (!iconName) {\r\n      return ['', ''];\r\n    }\r\n    const /** @type {?} */ parts = iconName.split(':');\r\n    switch (parts.length) {\r\n      case 1: return ['', parts[0]]; // Use default namespace.\r\n      case 2: return /** @type {?} */(( <[string, string]>parts));\r\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\r\n    }\r\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\r\n    if (changes.svgIcon) {\r\n      if (this.svgIcon) {\r\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\r\n\r\n        first.call(this._mdIconRegistry.getNamedSvgIcon(iconName, namespace)).subscribe(\r\n            svg => this._setSvgElement(svg),\r\n            (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\r\n      } else {\r\n        this._clearSvgElement();\r\n      }\r\n    }\r\n\r\n    if (this._usingFontIcon()) {\r\n      this._updateFontIconClasses();\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\r\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\r\n    if (this._usingFontIcon()) {\r\n      this._updateFontIconClasses();\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\r\n    return !this.svgIcon;\r\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\r\n    this._clearSvgElement();\r\n    this._renderer.appendChild(this._elementRef.nativeElement, svg);\r\n  }\n/**\n * @return {?}\n */\nprivate _clearSvgElement() {\r\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\r\n    const /** @type {?} */ childCount = layoutElement.childNodes.length;\r\n\r\n    // Remove existing child nodes and add the new SVG element. Note that we can't\r\n    // use innerHTML, because IE will throw if the element has a data binding.\r\n    for (let /** @type {?} */ i = 0; i < childCount; i++) {\r\n      this._renderer.removeChild(layoutElement, layoutElement.childNodes[i]);\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\r\n    if (!this._usingFontIcon()) {\r\n      return;\r\n    }\r\n\r\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\r\n    const /** @type {?} */ fontSetClass = this.fontSet ?\r\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\r\n        this._mdIconRegistry.getDefaultFontSetClass();\r\n\r\n    if (fontSetClass != this._previousFontSetClass) {\r\n      if (this._previousFontSetClass) {\r\n        this._renderer.removeClass(elem, this._previousFontSetClass);\r\n      }\r\n      if (fontSetClass) {\r\n        this._renderer.addClass(elem, fontSetClass);\r\n      }\r\n      this._previousFontSetClass = fontSetClass;\r\n    }\r\n\r\n    if (this.fontIcon != this._previousFontIconClass) {\r\n      if (this._previousFontIconClass) {\r\n        this._renderer.removeClass(elem, this._previousFontIconClass);\r\n      }\r\n      if (this.fontIcon) {\r\n        this._renderer.addClass(elem, this.fontIcon);\r\n      }\r\n      this._previousFontIconClass = this.fontIcon;\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  template: '<ng-content></ng-content>',\r\n  selector: 'md-icon, mat-icon',\r\n  styleUrls: ['icon.css'],\r\n  inputs: ['color'],\r\n  host: {\r\n    'role': 'img',\r\n    'class': 'mat-icon',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MdIcon} from './icon';\r\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\nexport class MdIconModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule],\r\n  exports: [MdIcon, MdCommonModule],\r\n  declarations: [MdIcon],\r\n  providers: [ICON_REGISTRY_PROVIDER],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdIconModule,MdIconBase,_MdIconMixinBase,MdIcon,getMdIconNameNotFoundError,getMdIconNoHttpProviderError,getMdIconFailedToSanitizeError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER,MatIcon,MatIconBase,MatIconModule,MatIconRegistry} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nexport class MdError {\r\n   id: string = `mat-error-${nextUniqueId++}`;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-error, mat-error',\r\n  host: {\r\n    'class': 'mat-error',\r\n    'role': 'alert',\r\n    '[attr.id]': 'id',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdError_tsickle_Closure_declarations() {\n/** @type {?} */\nMdError.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdError.ctorParameters;\n/** @type {?} */\nMdError.propDecorators;\n/** @type {?} */\nMdError.prototype.id;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Observable} from 'rxjs/Observable';\r\nimport {NgControl} from '@angular/forms';\n/**\n * An interface which allows a control to work inside of a `MdFormField`.\n * @abstract\n */\nexport abstract class MdFormFieldControl<T> {\n/**\n * The value of the control.\n */\nvalue: T;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\rneeds to run change detection.\n */\nreadonly stateChanges: Observable<void>;\n/**\n * The element ID for this control.\n */\nreadonly id: string;\n/**\n * The placeholder for this control.\n */\nreadonly placeholder: string;\n/**\n * Gets the NgControl for this control.\n */\nreadonly ngControl: NgControl | null;\n/**\n * Whether the control is focused.\n */\nreadonly focused: boolean;\n/**\n * Whether the control is empty.\n */\nreadonly empty: boolean;\n/**\n * Whether the `MdFormField` label should try to float.\n */\nreadonly shouldPlaceholderFloat: boolean;\n/**\n * Whether the control is required.\n */\nreadonly required: boolean;\n/**\n * Whether the control is disabled.\n */\nreadonly disabled: boolean;\n/**\n * Whether the control is in an error state.\n */\nreadonly errorState: boolean;\n/**\n * An optional name for the control type that can be used to distinguish `md-form-field` elements\rbased on their control type. The form field will add a class,\r`mat-form-field-type-{{controlType}}` to its root element.\n */\nreadonly controlType?: string;\n/**\n * Sets the list of element IDs that currently describe this control.\n * @abstract\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) {}\n/**\n * Handles a click on the control's container.\n * @abstract\n * @param {?} event\n * @return {?}\n */\nonContainerClick(event: MouseEvent) {}\r\n}\n\nfunction MdFormFieldControl_tsickle_Closure_declarations() {\n/**\n * The value of the control.\n * @type {?}\n */\nMdFormFieldControl.prototype.value;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\rneeds to run change detection.\n * @type {?}\n */\nMdFormFieldControl.prototype.stateChanges;\n/**\n * The element ID for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.id;\n/**\n * The placeholder for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.placeholder;\n/**\n * Gets the NgControl for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.ngControl;\n/**\n * Whether the control is focused.\n * @type {?}\n */\nMdFormFieldControl.prototype.focused;\n/**\n * Whether the control is empty.\n * @type {?}\n */\nMdFormFieldControl.prototype.empty;\n/**\n * Whether the `MdFormField` label should try to float.\n * @type {?}\n */\nMdFormFieldControl.prototype.shouldPlaceholderFloat;\n/**\n * Whether the control is required.\n * @type {?}\n */\nMdFormFieldControl.prototype.required;\n/**\n * Whether the control is disabled.\n * @type {?}\n */\nMdFormFieldControl.prototype.disabled;\n/**\n * Whether the control is in an error state.\n * @type {?}\n */\nMdFormFieldControl.prototype.errorState;\n/**\n * An optional name for the control type that can be used to distinguish `md-form-field` elements\rbased on their control type. The form field will add a class,\r`mat-form-field-type-{{controlType}}` to its root element.\n * @type {?}\n */\nMdFormFieldControl.prototype.controlType;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n */\nid: string = `mat-hint-${nextUniqueId++}`;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-hint, mat-hint',\r\n  host: {\r\n    'class': 'mat-hint',\r\n    '[class.mat-right]': 'align == \"end\"',\r\n    '[attr.id]': 'id',\r\n    // Remove align attribute to prevent it from interfering with layout.\r\n    '[attr.align]': 'null',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive} from '@angular/core';\n/**\n * The floating placeholder for an `MdFormField`.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-placeholder, mat-placeholder'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive} from '@angular/core';\n/**\n * Prefix to be placed the the front of the form field.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdPrefix], [matPrefix]',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive} from '@angular/core';\n/**\n * Suffix to be placed at the end of the form field.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdSuffix], [matSuffix]',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {first, startWith} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  QueryList, Renderer2,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  FloatPlaceholderType,\r\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\r\n  PlaceholderOptions,\r\n} from '@angular/material/core';\r\nimport {fromEvent} from 'rxjs/observable/fromEvent';\r\nimport {MdError} from './error';\r\nimport {MdFormFieldControl} from './form-field-control';\r\nimport {\r\n  getMdFormFieldDuplicatedHintError,\r\n  getMdFormFieldMissingControlError,\r\n  getMdFormFieldPlaceholderConflictError,\r\n} from './form-field-errors';\r\nimport {MdHint} from './hint';\r\nimport {MdPlaceholder} from './placeholder';\r\nimport {MdPrefix} from './prefix';\r\nimport {MdSuffix} from './suffix';\r\n\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nexport class MdFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use `color` instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\r\n    this._hideRequiredMarker = coerceBooleanProperty(value);\r\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n */\nprivate _showAlwaysAnimate = false;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() {\r\n    return this._floatPlaceholder === 'always' && !this._showAlwaysAnimate;\r\n  }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the form field hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\r\n    this._hintLabel = value;\r\n    this._processHints();\r\n  }\nprivate _hintLabel = '';\r\n\r\n  // Unique id for the hint label.\r\n  _hintLabelId: string = `md-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\r\n    if (value !== this._floatPlaceholder) {\r\n      this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the form field's underline element.\n */\nunderlineRef: ElementRef;\r\n   _connectionContainerRef: ElementRef;\nprivate _placeholder: ElementRef;\r\n   _control: MdFormFieldControl<any>;\r\n   _placeholderChild: MdPlaceholder;\r\n   _errorChildren: QueryList<MdError>;\r\n   _hintChildren: QueryList<MdHint>;\r\n   _prefixChildren: QueryList<MdPrefix>;\r\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _changeDetectorRef: ChangeDetectorRef,\r\n        placeholderOptions: PlaceholderOptions) {\r\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\r\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._validateControlChild();\r\n    if (this._control.controlType) {\r\n      this._renderer.addClass(\r\n          this._elementRef.nativeElement, `mat-form-field-type-${this._control.controlType}`);\r\n    }\r\n\r\n    // Subscribe to changes in the child control state in order to update the form field UI.\r\n    startWith.call(this._control.stateChanges, null).subscribe(() => {\r\n      this._validatePlaceholders();\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    let /** @type {?} */ ngControl = this._control.ngControl;\r\n    if (ngControl && ngControl.valueChanges) {\r\n      ngControl.valueChanges.subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n\r\n    // Re-validate when the number of hints changes.\r\n    startWith.call(this._hintChildren.changes, null).subscribe(() => {\r\n      this._processHints();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    // Update the aria-described by when the number of errors changes.\r\n    startWith.call(this._errorChildren.changes, null).subscribe(() => {\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\r\n    this._validateControlChild();\r\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\r\n    // Avoid animations on load.\r\n    this._subscriptAnimationState = 'enter';\r\n    this._changeDetectorRef.detectChanges();\r\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\r\n    let /** @type {?} */ ngControl = this._control ? this._control.ngControl : null;\r\n    return ngControl && ( /** @type {?} */((ngControl as any)))[prop];\r\n  }\n/**\n * Whether the form field has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() {\r\n    return !!(this._control.placeholder || this._placeholderChild);\r\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\r\n    return (this._errorChildren && this._errorChildren.length > 0 &&\r\n        this._control.errorState) ? 'error' : 'hint';\r\n  }\n/**\n * Animates the placeholder up and locks it in position.\n * @return {?}\n */\n_animateAndLockPlaceholder(): void {\r\n    if (this._placeholder && this._canPlaceholderFloat) {\r\n      this._showAlwaysAnimate = true;\r\n      this._floatPlaceholder = 'always';\r\n\r\n      first.call(fromEvent(this._placeholder.nativeElement, 'transitionend')).subscribe(() => {\r\n        this._showAlwaysAnimate = false;\r\n      });\r\n\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\ror child element with the `md-placeholder` directive).\n * @return {?}\n */\nprivate _validatePlaceholders() {\r\n    if (this._control.placeholder && this._placeholderChild) {\r\n      throw getMdFormFieldPlaceholderConflictError();\r\n    }\r\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\r\n    this._validateHints();\r\n    this._syncDescribedByIds();\r\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\rattribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\r\n    if (this._hintChildren) {\r\n      let /** @type {?} */ startHint: MdHint;\r\n      let /** @type {?} */ endHint: MdHint;\r\n      this._hintChildren.forEach((hint: MdHint) => {\r\n        if (hint.align == 'start') {\r\n          if (startHint || this.hintLabel) {\r\n            throw getMdFormFieldDuplicatedHintError('start');\r\n          }\r\n          startHint = hint;\r\n        } else if (hint.align == 'end') {\r\n          if (endHint) {\r\n            throw getMdFormFieldDuplicatedHintError('end');\r\n          }\r\n          endHint = hint;\r\n        }\r\n      });\r\n    }\r\n  }\n/**\n * Sets the list of element IDs that describe the child control. This allows the control to update\rits `aria-describedby` attribute accordingly.\n * @return {?}\n */\nprivate _syncDescribedByIds() {\r\n    if (this._control) {\r\n      let /** @type {?} */ ids: string[] = [];\r\n\r\n      if (this._getDisplayedMessages() === 'hint') {\r\n        let /** @type {?} */ startHint = this._hintChildren ?\r\n            this._hintChildren.find(hint => hint.align === 'start') : null;\r\n        let /** @type {?} */ endHint = this._hintChildren ?\r\n            this._hintChildren.find(hint => hint.align === 'end') : null;\r\n\r\n        if (startHint) {\r\n          ids.push(startHint.id);\r\n        } else if (this._hintLabel) {\r\n          ids.push(this._hintLabelId);\r\n        }\r\n\r\n        if (endHint) {\r\n          ids.push(endHint.id);\r\n        }\r\n      } else if (this._errorChildren) {\r\n        ids = this._errorChildren.map(mdError => mdError.id);\r\n      }\r\n\r\n      this._control.setDescribedByIds(ids);\r\n    }\r\n  }\n/**\n * Throws an error if the form field's control is missing.\n * @return {?}\n */\nprotected _validateControlChild() {\r\n    if (!this._control) {\r\n      throw getMdFormFieldMissingControlError();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\r\n  selector: 'md-input-container, mat-input-container, md-form-field, mat-form-field',\r\n  templateUrl: 'form-field.html',\r\n  // MdInput is a directive and can't have styles, so we need to include its styles here.\r\n  // The MdInput styles are fairly minimal so it shouldn't be a big deal for people who aren't using\r\n  // MdInput.\r\n  styleUrls: ['form-field.css', '../input/input.css'],\r\n  animations: [\r\n    // TODO(mmalerba): Use angular animations for placeholder animation as well.\r\n    trigger('transitionMessages', [\r\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\r\n      transition('void => enter', [\r\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\r\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\r\n      ]),\r\n    ]),\r\n  ],\r\n  host: {\r\n    'class': 'mat-input-container mat-form-field',\r\n    '[class.mat-input-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-can-float]': '_canPlaceholderFloat',\r\n    '[class.mat-form-field-should-float]': '_control.shouldPlaceholderFloat || _shouldAlwaysFloat',\r\n    '[class.mat-focused]': '_control.focused',\r\n    '[class.mat-primary]': 'color == \"primary\"',\r\n    '[class.mat-accent]': 'color == \"accent\"',\r\n    '[class.mat-warn]': 'color == \"warn\"',\r\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\r\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\r\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\r\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\r\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\r\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\r\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_connectionContainerRef': [{ type: ViewChild, args: ['connectionContainer', ] },],\n'_placeholder': [{ type: ViewChild, args: ['placeholder', ] },],\n'_control': [{ type: ContentChild, args: [MdFormFieldControl, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdError, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdFormField_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormField.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormField.ctorParameters;\n/** @type {?} */\nMdFormField.propDecorators;\n/** @type {?} */\nMdFormField.prototype._placeholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n * @type {?}\n */\nMdFormField.prototype.color;\n/** @type {?} */\nMdFormField.prototype._hideRequiredMarker;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n * @type {?}\n */\nMdFormField.prototype._showAlwaysAnimate;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdFormField.prototype._subscriptAnimationState;\n/** @type {?} */\nMdFormField.prototype._hintLabel;\n/** @type {?} */\nMdFormField.prototype._hintLabelId;\n/** @type {?} */\nMdFormField.prototype._floatPlaceholder;\n/**\n * Reference to the form field's underline element.\n * @type {?}\n */\nMdFormField.prototype.underlineRef;\n/** @type {?} */\nMdFormField.prototype._connectionContainerRef;\n/** @type {?} */\nMdFormField.prototype._placeholder;\n/** @type {?} */\nMdFormField.prototype._control;\n/** @type {?} */\nMdFormField.prototype._placeholderChild;\n/** @type {?} */\nMdFormField.prototype._errorChildren;\n/** @type {?} */\nMdFormField.prototype._hintChildren;\n/** @type {?} */\nMdFormField.prototype._prefixChildren;\n/** @type {?} */\nMdFormField.prototype._suffixChildren;\n/** @type {?} */\nMdFormField.prototype._elementRef;\n/** @type {?} */\nMdFormField.prototype._renderer;\n/** @type {?} */\nMdFormField.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MdError} from './error';\r\nimport {MdFormField} from './form-field';\r\nimport {MdHint} from './hint';\r\nimport {MdPlaceholder} from './placeholder';\r\nimport {MdPrefix} from './prefix';\r\nimport {MdSuffix} from './suffix';\nexport class MdFormFieldModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  declarations: [\r\n    MdError,\r\n    MdHint,\r\n    MdFormField,\r\n    MdPlaceholder,\r\n    MdPrefix,\r\n    MdSuffix,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    PlatformModule,\r\n  ],\r\n  exports: [\r\n    MdError,\r\n    MdHint,\r\n    MdFormField,\r\n    MdPlaceholder,\r\n    MdPrefix,\r\n    MdSuffix,\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdFormFieldModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormFieldModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormFieldModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdFormFieldModule,MdError,MdFormField,MdFormFieldControl,getMdFormFieldPlaceholderConflictError,getMdFormFieldDuplicatedHintError,getMdFormFieldMissingControlError,MdHint,MdPlaceholder,MdPrefix,MdSuffix,MatFormFieldModule,MatError,MatFormField,MatFormFieldControl,MatHint,MatPlaceholder,MatPrefix,MatSuffix} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MdDatepickerIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\rcomponents if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\rcomponents if the labels have changed after initialization.\n * @type {?}\n */\nMdDatepickerIntl.prototype.changes;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  DateAdapter,\r\n  MATERIAL_COMPATIBILITY_MODE,\r\n  MD_DATE_FORMATS,\r\n  MdDateFormats,\r\n} from '@angular/material/core';\r\nimport {first} from 'rxjs/operator/first';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\nimport {MdDatepickerIntl} from './datepicker-intl';\n/**\n * A calendar that is used as part of the datepicker.\r\\@docs-private\n */\nexport class MdCalendar<D> implements AfterContentInit, OnDestroy {\nprivate _intlChanges: Subscription;\n/**\n * A date representing the period (month or year) to start the calendar in.\n * @return {?}\n */\nget startAt(): D | null { return this._startAt; }\n/**\n * @param {?} value\n * @return {?}\n */\nset startAt(value: D | null) { this._startAt = coerceDateProperty(this._dateAdapter, value); }\nprivate _startAt: D | null;\n/**\n * Whether the calendar should be started in month or year view.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) { this._selected = coerceDateProperty(this._dateAdapter, value); }\nprivate _selected: D | null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget minDate(): D | null { return this._minDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minDate(value: D | null) { this._minDate = coerceDateProperty(this._dateAdapter, value); }\nprivate _minDate: D | null;\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget maxDate(): D | null { return this._maxDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxDate(value: D | null) { this._maxDate = coerceDateProperty(this._dateAdapter, value); }\nprivate _maxDate: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when the currently selected date changes.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * Date filter for the month and year views.\n */\n_dateFilterForViews = (date: D) => {\r\n    return !!date &&\r\n        (!this.dateFilter || this.dateFilter(date)) &&\r\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\r\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\r\n  }\n/**\n * The current active date. This determines which time period is shown and which date is\rhighlighted when using keyboard navigation.\n * @return {?}\n */\nget _activeDate(): D { return this._clampedActiveDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _activeDate(value: D) {\r\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n  }\nprivate _clampedActiveDate: D;\n/**\n * Whether the calendar is in month view.\n */\n_monthView: boolean;\n/**\n * The label for the current calendar view.\n * @return {?}\n */\nget _periodButtonText(): string {\r\n    return this._monthView ?\r\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\r\n            .toLocaleUpperCase() :\r\n        this._dateAdapter.getYearName(this._activeDate);\r\n  }\n/**\n * @return {?}\n */\nget _periodButtonLabel(): string {\r\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\r\n  }\n/**\n * The label for the the previous button.\n * @return {?}\n */\nget _prevButtonLabel(): string {\r\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\r\n  }\n/**\n * The label for the the next button.\n * @return {?}\n */\nget _nextButtonLabel(): string {\r\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\r\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _intl\n * @param {?} _ngZone\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} changeDetectorRef\n */\nconstructor(private _elementRef: ElementRef,\nprivate _intl: MdDatepickerIntl,\nprivate _ngZone: NgZone,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\r\n              changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MD_DATE_FORMATS');\r\n    }\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._activeDate = this.startAt || this._dateAdapter.today();\r\n    this._focusActiveCell();\r\n    this._monthView = this.startView != 'year';\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n  }\n/**\n * Handles date selection in the month view.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: D): void {\r\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\r\n      this.selectedChange.emit(date);\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_userSelected(): void {\r\n    this.userSelection.emit();\r\n  }\n/**\n * Handles month selection in the year view.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: D): void {\r\n    this._activeDate = month;\r\n    this._monthView = true;\r\n  }\n/**\n * Handles user clicks on the period label.\n * @return {?}\n */\n_currentPeriodClicked(): void {\r\n    this._monthView = !this._monthView;\r\n  }\n/**\n * Handles user clicks on the previous button.\n * @return {?}\n */\n_previousClicked(): void {\r\n    this._activeDate = this._monthView ?\r\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\r\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\r\n  }\n/**\n * Handles user clicks on the next button.\n * @return {?}\n */\n_nextClicked(): void {\r\n    this._activeDate = this._monthView ?\r\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\r\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\r\n  }\n/**\n * Whether the previous period button is enabled.\n * @return {?}\n */\n_previousEnabled(): boolean {\r\n    if (!this.minDate) {\r\n      return true;\r\n    }\r\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\r\n  }\n/**\n * Whether the next period button is enabled.\n * @return {?}\n */\n_nextEnabled(): boolean {\r\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\r\n  }\n/**\n * Handles keydown events on the calendar body.\n * @param {?} event\n * @return {?}\n */\n_handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n    if (this._monthView) {\r\n      this._handleCalendarBodyKeydownInMonthView(event);\r\n    } else {\r\n      this._handleCalendarBodyKeydownInYearView(event);\r\n    }\r\n  }\n/**\n * Focuses the active cell after the microtask queue is empty.\n * @return {?}\n */\n_focusActiveCell() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\r\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\r\n      });\r\n    });\r\n  }\n/**\n * Whether the two dates represent the same view in the current view mode (month or year).\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nprivate _isSameView(date1: D, date2: D): boolean {\r\n    return this._monthView ?\r\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\r\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\r\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\r\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in month view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            1 - this._dateAdapter.getDate(this._activeDate));\r\n        break;\r\n      case END:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\r\n             this._dateAdapter.getDate(this._activeDate)));\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n        if (this._dateFilterForViews(this._activeDate)) {\r\n          this._dateSelected(this._activeDate);\r\n          // Prevent unexpected default actions such as form submission.\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in year view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n            -this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case END:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n            11 - this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate =\r\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate =\r\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\r\n        break;\r\n      case ENTER:\r\n        this._monthSelected(this._activeDate);\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\n/**\n * Determine the date for the month that comes before the given month in the same column in the\rcalendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _prevMonthInSameCol(date: D): D {\r\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\r\n    // of each year.\r\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\r\n        (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\r\n    return this._dateAdapter.addCalendarMonths(date, increment);\r\n  }\n/**\n * Determine the date for the month that comes after the given month in the same column in the\rcalendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _nextMonthInSameCol(date: D): D {\r\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\r\n    // of each year.\r\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\r\n        (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\r\n    return this._dateAdapter.addCalendarMonths(date, increment);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-calendar, mat-calendar',\r\n  templateUrl: 'calendar.html',\r\n  styleUrls: ['calendar.css'],\r\n  host: {\r\n    'class': 'mat-calendar',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdDatepickerIntl, },\n{type: NgZone, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'selected': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MdCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendar.ctorParameters;\n/** @type {?} */\nMdCalendar.propDecorators;\n/** @type {?} */\nMdCalendar.prototype._intlChanges;\n/** @type {?} */\nMdCalendar.prototype._startAt;\n/**\n * Whether the calendar should be started in month or year view.\n * @type {?}\n */\nMdCalendar.prototype.startView;\n/** @type {?} */\nMdCalendar.prototype._selected;\n/** @type {?} */\nMdCalendar.prototype._minDate;\n/** @type {?} */\nMdCalendar.prototype._maxDate;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdCalendar.prototype.dateFilter;\n/**\n * Emits when the currently selected date changes.\n * @type {?}\n */\nMdCalendar.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMdCalendar.prototype.userSelection;\n/**\n * Date filter for the month and year views.\n * @type {?}\n */\nMdCalendar.prototype._dateFilterForViews;\n/** @type {?} */\nMdCalendar.prototype._clampedActiveDate;\n/**\n * Whether the calendar is in month view.\n * @type {?}\n */\nMdCalendar.prototype._monthView;\n/** @type {?} */\nMdCalendar.prototype._elementRef;\n/** @type {?} */\nMdCalendar.prototype._intl;\n/** @type {?} */\nMdCalendar.prototype._ngZone;\n/** @type {?} */\nMdCalendar.prototype._dateAdapter;\n/** @type {?} */\nMdCalendar.prototype._dateFormats;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\r\\@docs-private\n */\nexport class MdCalendarCell {\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n */\nconstructor(public value: number,\npublic displayValue: string,\npublic ariaLabel: string,\npublic enabled: boolean) {}\r\n}\n\nfunction MdCalendarCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarCell.prototype.value;\n/** @type {?} */\nMdCalendarCell.prototype.displayValue;\n/** @type {?} */\nMdCalendarCell.prototype.ariaLabel;\n/** @type {?} */\nMdCalendarCell.prototype.enabled;\n}\n\n/**\n * An internal component used to display calendar data in a table.\r\\@docs-private\n */\nexport class MdCalendarBody {\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n */\nlabel: string;\n/**\n * The cells to display in the table.\n */\nrows: MdCalendarCell[][];\n/**\n * The value in the table that corresponds to today.\n */\ntodayValue: number;\n/**\n * The value in the table that is currently selected.\n */\nselectedValue: number;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n */\nlabelMinRequiredCells: number;\n/**\n * The number of columns in the table.\n */\nnumCols = 7;\n/**\n * Whether to allow selection of disabled cells.\n */\nallowDisabledSelection = false;\n/**\n * The cell number of the active cell in the table.\n */\nactiveCell = 0;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\rmaintained even as the table resizes.\n */\ncellAspectRatio = 1;\n/**\n * Emits when a new value is selected.\n */\nselectedValueChange = new EventEmitter<number>();\n/**\n * @param {?} cell\n * @return {?}\n */\n_cellClicked(cell: MdCalendarCell): void {\r\n    if (!this.allowDisabledSelection && !cell.enabled) {\r\n      return;\r\n    }\r\n    this.selectedValueChange.emit(cell.value);\r\n  }\n/**\n * The number of blank cells to put at the beginning for the first row.\n * @return {?}\n */\nget _firstRowOffset(): number {\r\n    return this.rows && this.rows.length && this.rows[0].length ?\r\n        this.numCols - this.rows[0].length : 0;\r\n  }\n/**\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\n_isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber == this.activeCell;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: '[md-calendar-body], [mat-calendar-body]',\r\n  templateUrl: 'calendar-body.html',\r\n  styleUrls: ['calendar-body.css'],\r\n  host: {\r\n    'class': 'mat-calendar-body',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'rows': [{ type: Input },],\n'todayValue': [{ type: Input },],\n'selectedValue': [{ type: Input },],\n'labelMinRequiredCells': [{ type: Input },],\n'numCols': [{ type: Input },],\n'allowDisabledSelection': [{ type: Input },],\n'activeCell': [{ type: Input },],\n'cellAspectRatio': [{ type: Input },],\n'selectedValueChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendarBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendarBody.ctorParameters;\n/** @type {?} */\nMdCalendarBody.propDecorators;\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n * @type {?}\n */\nMdCalendarBody.prototype.label;\n/**\n * The cells to display in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.rows;\n/**\n * The value in the table that corresponds to today.\n * @type {?}\n */\nMdCalendarBody.prototype.todayValue;\n/**\n * The value in the table that is currently selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValue;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n * @type {?}\n */\nMdCalendarBody.prototype.labelMinRequiredCells;\n/**\n * The number of columns in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.numCols;\n/**\n * Whether to allow selection of disabled cells.\n * @type {?}\n */\nMdCalendarBody.prototype.allowDisabledSelection;\n/**\n * The cell number of the active cell in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.activeCell;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\rmaintained even as the table resizes.\n * @type {?}\n */\nMdCalendarBody.prototype.cellAspectRatio;\n/**\n * Emits when a new value is selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValueChange;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MdRippleModule} from '../ripple/index';\r\nimport {MdPseudoCheckboxModule} from '../selection/index';\r\nimport {MdOption} from './option';\r\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdRippleModule, CommonModule, MdPseudoCheckboxModule],\r\n  exports: [MdOption, MdOptgroup],\r\n  declarations: [MdOption, MdOptgroup]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\r\n\r\n\r\nexport {MdOptionSelectionChange,MdOption} from './option';\r\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\r\\@param element\r\\@param transformValue\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\r\n  // It's important to trim the result, because the browser will ignore the set operation\r\n  // if the string contains only whitespace.\r\n  let /** @type {?} */ value = transformValue.trim();\r\n\r\n  element.style.transform = value;\r\n  element.style.webkitTransform = value;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Inject,\r\n  OnDestroy,\r\n  Optional,\r\n  Renderer2,\r\n  Self,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  MATERIAL_COMPATIBILITY_MODE,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple\r\n} from '@angular/material/core';\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\n/**\n * Default color palette for round buttons (md-fab and md-mini-fab)\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\r\n  host: {'class': 'mat-button'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector:\r\n      'button[md-raised-button], button[mat-raised-button], ' +\r\n      'a[md-raised-button], a[mat-raised-button]',\r\n  host: {'class': 'mat-raised-button'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector:\r\n      'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\r\n  host: {'class': 'mat-icon-button'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\r\n                 anchor: MdAnchor) {\r\n    // Set the default color palette for the md-fab components.\r\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\r\n  host: {'class': 'mat-fab'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFab.ctorParameters;\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\rto all mini-fab buttons and also is responsible for setting the default color palette.\r\\@docs-private\n */\nexport class MdMiniFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\r\n                 anchor: MdAnchor) {\r\n    // Set the default color palette for the md-mini-fab components.\r\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\r\n  host: {'class': 'mat-mini-fab'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdMiniFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMiniFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMiniFab.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonBase.prototype._renderer;\n/** @type {?} */\nMdButtonBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MdButtonBase)));\n/**\n * Material design button.\n */\nexport class MdButton extends _MdButtonMixinBase\r\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _platform\n * @param {?} _focusMonitor\n */\nconstructor(renderer: Renderer2,\r\n              elementRef: ElementRef,\nprivate _platform: Platform,\nprivate _focusMonitor: FocusMonitor) {\r\n    super(renderer, elementRef);\r\n    this._focusMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\r\n    this._getHostElement().focus();\r\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\r\n    return this._elementRef.nativeElement;\r\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\n/**\n * Gets whether the button has one of the given attributes\rwith either an 'md-' or 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\r\n    // If not on the browser, say that there are none of the attributes present.\r\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\r\n    // detecting these attributes isn't necessary when not on the browser.\r\n    if (!this._platform.isBrowser) {\r\n      return false;\r\n    }\r\n\r\n    return unprefixedAttributeNames.some(suffix => {\r\n      const /** @type {?} */ el = this._getHostElement();\r\n\r\n      return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: `button[md-button], button[md-raised-button], button[md-icon-button],\r\n             button[md-fab], button[md-mini-fab],\r\n             button[mat-button], button[mat-raised-button], button[mat-icon-button],\r\n             button[mat-fab], button[mat-mini-fab]`,\r\n  host: {\r\n    '[disabled]': 'disabled || null',\r\n  },\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Platform, },\n{type: FocusMonitor, },\n];\n}\n\nfunction MdButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButton.ctorParameters;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMdButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMdButton.prototype._isIconButton;\n/** @type {?} */\nMdButton.prototype._platform;\n/** @type {?} */\nMdButton.prototype._focusMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MdAnchor extends MdButton {\n/**\n * @param {?} platform\n * @param {?} focusMonitor\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\r\n      platform: Platform,\r\n      focusMonitor: FocusMonitor,\r\n      elementRef: ElementRef,\r\n      renderer: Renderer2) {\r\n    super(renderer, elementRef, platform, focusMonitor);\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\r\n    // A disabled button shouldn't apply any actions\r\n    if (this.disabled) {\r\n      event.preventDefault();\r\n      event.stopImmediatePropagation();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: `a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\r\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\r\n  host: {\r\n    '[attr.tabindex]': 'disabled ? -1 : 0',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '(click)': '_haltDisabledEvents($event)',\r\n  },\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  templateUrl: 'button.html',\r\n  styleUrls: ['button.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: FocusMonitor, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAnchor.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\rcomponents. This includes Bidi, compatibility mode, etc.\r\rThis module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\r\n      _sanityChecksEnabled: boolean) {\r\n\r\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\r\n      this._checkDoctype();\r\n      this._checkTheme();\r\n      this._hasDoneGlobalChecks = true;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\r\n    if (!this._document.doctype) {\r\n      console.warn(\r\n        'Current document does not have a doctype. This may cause ' +\r\n        'some Angular Material components not to behave as expected.'\r\n      );\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\r\n    if (typeof getComputedStyle === 'function') {\r\n      const /** @type {?} */ testElement = this._document.createElement('div');\r\n\r\n      testElement.classList.add('mat-theme-loaded-marker');\r\n      this._document.body.appendChild(testElement);\r\n\r\n      if (getComputedStyle(testElement).display !== 'none') {\r\n        console.warn(\r\n          'Could not find Angular Material core theme. Most Material ' +\r\n          'components may not work as expected. For more info refer ' +\r\n          'to the theming guide: https://material.angular.io/guide/theming'\r\n        );\r\n      }\r\n\r\n      this._document.body.removeChild(testElement);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CompatibilityModule, BidiModule],\r\n  exports: [CompatibilityModule, BidiModule],\r\n  providers: [{\r\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\r\n  }],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMdCommonModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nMdCommonModule.prototype._document;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MdCommonModule, MdRippleModule} from '@angular/material/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {\r\n  MdAnchor,\r\n  MdButton,\r\n  MdMiniFab,\r\n  MdButtonCssMatStyler,\r\n  MdFab,\r\n  MdIconButtonCssMatStyler,\r\n  MdRaisedButtonCssMatStyler\r\n} from './button';\nexport class MdButtonModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    CommonModule,\r\n    MdRippleModule,\r\n    MdCommonModule,\r\n    A11yModule,\r\n  ],\r\n  exports: [\r\n    MdButton,\r\n    MdAnchor,\r\n    MdMiniFab,\r\n    MdFab,\r\n    MdCommonModule,\r\n    MdButtonCssMatStyler,\r\n    MdRaisedButtonCssMatStyler,\r\n    MdIconButtonCssMatStyler,\r\n  ],\r\n  declarations: [\r\n    MdButton,\r\n    MdAnchor,\r\n    MdMiniFab,\r\n    MdFab,\r\n    MdButtonCssMatStyler,\r\n    MdRaisedButtonCssMatStyler,\r\n    MdIconButtonCssMatStyler,\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor,MatButton,MatButtonBase,MatButtonCssMatStyler,MatButtonModule,MatAnchor,MatIconButtonCssMatStyler,MatFab,MatMiniFab,MatRaisedButtonCssMatStyler} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ViewContainerRef} from '@angular/core';\r\nimport {Direction} from '@angular/cdk/bidi';\r\n\r\n/** Valid ARIA roles for a dialog element. */\r\nexport type DialogRole = 'dialog' | 'alertdialog';\r\n\r\n/** Possible overrides for a dialog's position. */\r\nexport interface DialogPosition {\r\n  top?: string;\r\n  bottom?: string;\r\n  left?: string;\r\n  right?: string;\r\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\rThis affects what is available for injection and the change detection order for the\rcomponent instantiated inside of the dialog. This does not affect where the dialog\rcontent will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n */\nid?: string;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string | string[] = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: Direction = 'ltr';\n/**\n * ID of the element that describes the dialog.\n */\nariaDescribedBy?: string | null = null;\r\n\r\n\r\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\r\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\rThis affects what is available for injection and the change detection order for the\rcomponent instantiated inside of the dialog. This does not affect where the dialog\rcontent will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n * @type {?}\n */\nMdDialogConfig.prototype.id;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMdDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMdDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMdDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMdDialogConfig.prototype.direction;\n/**\n * ID of the element that describes the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.ariaDescribedBy;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Optional,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {\r\n  BasePortalHost,\r\n  ComponentPortal,\r\n  PortalHostDirective,\r\n  TemplatePortal\r\n} from '@angular/cdk/portal';\r\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\r\nimport {MdDialogConfig} from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\rattached to a DomPortalHost without an origin.\r\\@docs-private\n * @return {?}\n */\nexport function throwMdDialogContentAlreadyAttachedError() {\r\n  throw Error('Attempting to attach dialog content after content is already attached');\r\n}\n/**\n * Internal component that wraps user-provided dialog content.\rAnimation is based on https://material.io/guidelines/motion/choreography.html.\r\\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n/**\n * The dialog configuration.\n */\n_config: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits when an animation state changes.\n */\n_animationStateChanged = new EventEmitter<AnimationEvent>();\n/**\n * ID of the element that should be considered as the dialog's label.\n */\n_ariaLabelledBy: string | null = null;\n/**\n * Whether the container is currently mid-animation.\n */\n_isAnimating = false;\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _changeDetectorRef\n * @param {?} _document\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _document: any) {\r\n\r\n    super();\r\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\r\\@param portal Portal to be attached as the dialog content.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    if (this._portalHost.hasAttached()) {\r\n      throwMdDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalHost.attachComponentPortal(portal);\r\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\r\\@param portal Portal to be attached as the dialog content.\n * @template C\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    if (this._portalHost.hasAttached()) {\r\n      throwMdDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalHost.attachTemplatePortal(portal);\r\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\r\n    if (!this._focusTrap) {\r\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    }\r\n\r\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\r\n    // ready in instances where change detection has to run first. To deal with this, we simply\r\n    // wait for the microtask queue to be empty.\r\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\r\n      // If we didn't find any focusable elements inside the dialog, focus the\r\n      // container so the user can't tab into other elements behind it.\r\n      if (!hasMovedFocus) {\r\n        this._elementRef.nativeElement.focus();\r\n      }\r\n    });\r\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\r\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\r\n\r\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\r\n    if (toFocus && typeof toFocus.focus === 'function') {\r\n      toFocus.focus();\r\n    }\r\n\r\n    if (this._focusTrap) {\r\n      this._focusTrap.destroy();\r\n    }\r\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\r\n    if (this._document) {\r\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\r\n    }\r\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\r\n    if (event.toState === 'enter') {\r\n      this._trapFocus();\r\n    } else if (event.toState === 'exit') {\r\n      this._restoreFocus();\r\n    }\r\n\r\n    this._animationStateChanged.emit(event);\r\n    this._isAnimating = false;\r\n  }\n/**\n * Callback, invoked when an animation on the host starts.\n * @param {?} event\n * @return {?}\n */\n_onAnimationStart(event: AnimationEvent) {\r\n    this._isAnimating = true;\r\n    this._animationStateChanged.emit(event);\r\n  }\n/**\n * Starts the dialog exit animation.\n * @return {?}\n */\n_startExitAnimation(): void {\r\n    this._state = 'exit';\r\n\r\n    // Mark the container for check so it can react if the\r\n    // view container is using OnPush change detection.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-dialog-container, mat-dialog-container',\r\n  templateUrl: 'dialog-container.html',\r\n  styleUrls: ['dialog.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  animations: [\r\n    trigger('slideDialog', [\r\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\r\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\r\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\r\n      // solves both issues.\r\n      state('enter', style({ transform: 'none', opacity: 1 })),\r\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\r\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\r\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\r\n    ])\r\n  ],\r\n  host: {\r\n    'class': 'mat-dialog-container',\r\n    'tabindex': '-1',\r\n    '[attr.role]': '_config?.role',\r\n    '[attr.aria-labelledby]': '_ariaLabelledBy',\r\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\r\n    '[@slideDialog]': '_state',\r\n    '(@slideDialog.start)': '_onAnimationStart($event)',\r\n    '(@slideDialog.done)': '_onAnimationDone($event)',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits when an animation state changes.\n * @type {?}\n */\nMdDialogContainer.prototype._animationStateChanged;\n/**\n * ID of the element that should be considered as the dialog's label.\n * @type {?}\n */\nMdDialogContainer.prototype._ariaLabelledBy;\n/**\n * Whether the container is currently mid-animation.\n * @type {?}\n */\nMdDialogContainer.prototype._isAnimating;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDialogContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMdDialogContainer.prototype._document;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\r\nimport {filter, first, RxChain} from '@angular/cdk/rxjs';\r\nimport {DialogPosition} from './dialog-config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdDialogContainer} from './dialog-container';\r\n\r\n\r\n// TODO(jelbourn): resizing\r\n\r\n// Counter for unique dialog ids.\r\nlet /** @type {?} */ uniqueId = 0;\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n */\nprivate _afterOpen = new Subject<void>();\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed = new Subject<any>();\n/**\n * Subject for notifying the user that the dialog has started closing.\n */\nprivate _beforeClose = new Subject<any>();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n * @param {?=} id\n */\nconstructor(\nprivate _overlayRef: OverlayRef,\nprivate _containerInstance: MdDialogContainer,\npublic readonly id: string = `md-dialog-${uniqueId++}`) {\r\n\r\n    // Emit when opening animation completes\r\n    RxChain.from(_containerInstance._animationStateChanged)\r\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'enter')\r\n      .call(first)\r\n      .subscribe(() => {\r\n        this._afterOpen.next();\r\n        this._afterOpen.complete();\r\n      });\r\n\r\n    // Dispose overlay when closing animation is complete\r\n    RxChain.from(_containerInstance._animationStateChanged)\r\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'exit')\r\n      .call(first)\r\n      .subscribe(() => {\r\n        this._overlayRef.dispose();\r\n        this._afterClosed.next(this._result);\r\n        this._afterClosed.complete();\r\n        this.componentInstance = null!;\r\n      });\r\n  }\n/**\n * Close the dialog.\r\\@param dialogResult Optional result to return to the dialog opener.\n * @param {?=} dialogResult\n * @return {?}\n */\nclose(dialogResult?: any): void {\r\n    this._result = dialogResult;\r\n\r\n    // Transition the backdrop in parallel to the dialog.\r\n    RxChain.from(this._containerInstance._animationStateChanged)\r\n      .call(filter, event => event.phaseName === 'start')\r\n      .call(first)\r\n      .subscribe(() => {\r\n        this._beforeClose.next(dialogResult);\r\n        this._beforeClose.complete();\r\n        this._overlayRef.detachBackdrop();\r\n      });\r\n\r\n    this._containerInstance._startExitAnimation();\r\n  }\n/**\n * Gets an observable that is notified when the dialog is finished opening.\n * @return {?}\n */\nafterOpen(): Observable<void> {\r\n    return this._afterOpen.asObservable();\r\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\r\n    return this._afterClosed.asObservable();\r\n  }\n/**\n * Gets an observable that is notified when the dialog has started closing.\n * @return {?}\n */\nbeforeClose(): Observable<any> {\r\n    return this._beforeClose.asObservable();\r\n  }\n/**\n * Gets an observable that emits when the overlay's backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\r\n    return this._overlayRef.backdropClick();\r\n  }\n/**\n * Updates the dialog's position.\r\\@param position New dialog position.\n * @param {?=} position\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\r\n    let /** @type {?} */ strategy = this._getPositionStrategy();\r\n\r\n    if (position && (position.left || position.right)) {\r\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\r\n    } else {\r\n      strategy.centerHorizontally();\r\n    }\r\n\r\n    if (position && (position.top || position.bottom)) {\r\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\r\n    } else {\r\n      strategy.centerVertically();\r\n    }\r\n\r\n    this._overlayRef.updatePosition();\r\n\r\n    return this;\r\n  }\n/**\n * Updates the dialog's width and height.\r\\@param width New width of the dialog.\r\\@param height New height of the dialog.\n * @param {?=} width\n * @param {?=} height\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\r\n    this._getPositionStrategy().width(width).height(height);\r\n    this._overlayRef.updatePosition();\r\n    return this;\r\n  }\n/**\n * Returns whether the dialog is animating.\n * @return {?}\n */\n_isAnimating(): boolean {\r\n    return this._containerInstance._isAnimating;\r\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\r\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\r\n  }\r\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n * @type {?}\n */\nMdDialogRef.prototype._afterOpen;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the dialog has started closing.\n * @type {?}\n */\nMdDialogRef.prototype._beforeClose;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n/** @type {?} */\nMdDialogRef.prototype.id;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {\r\n  BlockScrollStrategy,\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\r\nimport {startWith} from '@angular/cdk/rxjs';\r\nimport {Location} from '@angular/common';\r\nimport {\r\n  ComponentRef,\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Injector,\r\n  Optional,\r\n  SkipSelf,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport {extendObject} from '@angular/material/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {defer} from 'rxjs/observable/defer';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdDialogConfig} from './dialog-config';\r\nimport {MdDialogContainer} from './dialog-container';\r\nimport {MdDialogRef} from './dialog-ref';\r\n\r\n\r\nexport const /** @type {?} */ MD_DIALOG_DATA = new InjectionToken<any>('MdDialogData');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n */\nexport const MD_DIALOG_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('md-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => BlockScrollStrategy {\r\n  return () => overlay.scrollStrategies.block();\r\n}\n/**\n * \\@docs-private\n */\nexport const MD_DIALOG_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MD_DIALOG_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget openDialogs(): MdDialogRef<any>[] {\r\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\r\n  }\n/**\n * Stream that emits when a dialog has been opened.\n * @return {?}\n */\nget afterOpen(): Subject<MdDialogRef<any>> {\r\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\r\n  }\n/**\n * @return {?}\n */\nget _afterAllClosed() {\r\n    const /** @type {?} */ parent = this._parentDialog;\r\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\r\n  }\n/**\n * Stream that emits when all open dialog have finished closing.\rWill emit on subscribe if there are no open dialogs to begin with.\n */\nafterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\r\n      this._afterAllClosed :\r\n      startWith.call(this._afterAllClosed, undefined));\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} location\n * @param {?} _scrollStrategy\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\r\n       location: Location,\nprivate _scrollStrategy,\nprivate _parentDialog: MdDialog) {\r\n\r\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\r\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\r\n    // the user is using the `HashLocationStrategy`).\r\n    if (!_parentDialog && location) {\r\n      location.subscribe(() => this.closeAll());\r\n    }\r\n  }\n/**\n * Opens a modal dialog containing the given component.\r\\@param componentOrTemplateRef Type of the component to load into the dialog,\r    or a TemplateRef to instantiate as the dialog content.\r\\@param config Extra configuration options.\r\\@returns Reference to the newly-opened dialog.\n * @template T\n * @param {?} componentOrTemplateRef\n * @param {?=} config\n * @return {?}\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n          config?: MdDialogConfig): MdDialogRef<T> {\r\n\r\n    const /** @type {?} */ inProgressDialog = this.openDialogs.find(dialog => dialog._isAnimating());\r\n\r\n    // If there's a dialog that is in the process of being opened, return it instead.\r\n    if (inProgressDialog) {\r\n      return inProgressDialog;\r\n    }\r\n\r\n    config = _applyConfigDefaults(config);\r\n\r\n    if (config.id && this.getDialogById(config.id)) {\r\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\r\n    }\r\n\r\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\r\n    const /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n    const /** @type {?} */ dialogRef =\r\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\r\n\r\n    if (!this.openDialogs.length) {\r\n      document.addEventListener('keydown', this._boundKeydown);\r\n    }\r\n\r\n    this.openDialogs.push(dialogRef);\r\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\r\n    this.afterOpen.next(dialogRef);\r\n\r\n    return dialogRef;\r\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\r\n    let /** @type {?} */ i = this.openDialogs.length;\r\n\r\n    while (i--) {\r\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\r\n      // runs on the next microtask, in addition to modifying the array as we're going\r\n      // through it. We loop through all of them and call close without assuming that\r\n      // they'll be removed from the list instantaneously.\r\n      this.openDialogs[i].close();\r\n    }\r\n  }\n/**\n * Finds an open dialog by its id.\r\\@param id ID to use when looking up the dialog.\n * @param {?} id\n * @return {?}\n */\ngetDialogById(id: string): MdDialogRef<any> | undefined {\r\n    return this.openDialogs.find(dialog => dialog.id === id);\r\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\r\\@param config The dialog configuration.\r\\@returns A promise resolving to the OverlayRef for the created overlay.\n * @param {?} config\n * @return {?}\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\r\n    const /** @type {?} */ overlayState = this._getOverlayState(config);\r\n    return this._overlay.create(overlayState);\r\n  }\n/**\n * Creates an overlay state from a dialog config.\r\\@param dialogConfig The dialog configuration.\r\\@returns The overlay configuration.\n * @param {?} dialogConfig\n * @return {?}\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayConfig {\r\n    const /** @type {?} */ state = new OverlayConfig({\r\n      positionStrategy: this._overlay.position().global(),\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: dialogConfig.panelClass,\r\n      hasBackdrop: dialogConfig.hasBackdrop,\r\n      direction: dialogConfig.direction\r\n    });\r\n\r\n    if (dialogConfig.backdropClass) {\r\n      state.backdropClass = dialogConfig.backdropClass;\r\n    }\r\n\r\n    return state;\r\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\r\\@param overlay Reference to the dialog's underlying overlay.\r\\@param config The dialog configuration.\r\\@returns A promise resolving to a ComponentRef for the attached container.\n * @param {?} overlay\n * @param {?} config\n * @return {?}\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\r\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, config.viewContainerRef);\r\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\r\n    containerRef.instance._config = config;\r\n\r\n    return containerRef.instance;\r\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\r\\@param componentOrTemplateRef The type of component being loaded into the dialog,\r    or a TemplateRef to instantiate as the content.\r\\@param dialogContainer Reference to the wrapping MdDialogContainer.\r\\@param overlayRef Reference to the overlay in which the dialog resides.\r\\@param config The dialog configuration.\r\\@returns A promise resolving to the MdDialogRef that should be returned to the user.\n * @template T\n * @param {?} componentOrTemplateRef\n * @param {?} dialogContainer\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachDialogContent<T>(\r\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n      dialogContainer: MdDialogContainer,\r\n      overlayRef: OverlayRef,\r\n      config: MdDialogConfig): MdDialogRef<T> {\r\n\r\n    // Create a reference to the dialog we're creating in order to give the user a handle\r\n    // to modify and close it.\r\n    const /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer, config.id);\r\n\r\n    // When the dialog backdrop is clicked, we want to close it.\r\n    if (config.hasBackdrop) {\r\n      overlayRef.backdropClick().subscribe(() => {\r\n        if (!dialogRef.disableClose) {\r\n          dialogRef.close();\r\n        }\r\n      });\r\n    }\r\n\r\n    if (componentOrTemplateRef instanceof TemplateRef) {\r\n      dialogContainer.attachTemplatePortal(\r\n        new TemplatePortal<T>(componentOrTemplateRef, /** @type {?} */(( null)), /** @type {?} */((\r\n          <any>{ $implicit: config.data, dialogRef }))));\r\n    } else {\r\n      const /** @type {?} */ injector = this._createInjector<T>(config, dialogRef, dialogContainer);\r\n      const /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\r\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\r\n      dialogRef.componentInstance = contentRef.instance;\r\n    }\r\n\r\n    dialogRef\r\n      .updateSize(config.width, config.height)\r\n      .updatePosition(config.position);\r\n\r\n    return dialogRef;\r\n  }\n/**\n * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\rof a dialog to close itself and, optionally, to return a value.\r\\@param config Config object that is used to construct the dialog.\r\\@param dialogRef Reference to the dialog.\r\\@param container Dialog container element that wraps all of the contents.\r\\@returns The custom injector that can be used inside the dialog.\n * @template T\n * @param {?} config\n * @param {?} dialogRef\n * @param {?} dialogContainer\n * @return {?}\n */\nprivate _createInjector<T>(\r\n      config: MdDialogConfig,\r\n      dialogRef: MdDialogRef<T>,\r\n      dialogContainer: MdDialogContainer): PortalInjector {\r\n\r\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const /** @type {?} */ injectionTokens = new WeakMap();\r\n\r\n    injectionTokens.set(MdDialogRef, dialogRef);\r\n    injectionTokens.set(MdDialogContainer, dialogContainer);\r\n    injectionTokens.set(MD_DIALOG_DATA, config.data);\r\n\r\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\r\n  }\n/**\n * Removes a dialog from the array of open dialogs.\r\\@param dialogRef Dialog to be removed.\n * @param {?} dialogRef\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\r\n    const /** @type {?} */ index = this.openDialogs.indexOf(dialogRef);\r\n\r\n    if (index > -1) {\r\n      this.openDialogs.splice(index, 1);\r\n\r\n      // no open dialogs are left, call next on afterAllClosed Subject\r\n      if (!this.openDialogs.length) {\r\n        this._afterAllClosed.next();\r\n        document.removeEventListener('keydown', this._boundKeydown);\r\n      }\r\n    }\r\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\rtop dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\r\n    const /** @type {?} */ topDialog = this.openDialogs[this.openDialogs.length - 1];\r\n    const /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\r\n\r\n    if (event.keyCode === ESCAPE && canClose) {\r\n      topDialog.close();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_SCROLL_STRATEGY, ] }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Stream that emits when all open dialog have finished closing.\rWill emit on subscribe if there are no open dialogs to begin with.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._scrollStrategy;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\r\\@param config Config to be modified.\r\\@returns The new configuration object.\n * @param {?=} config\n * @return {?}\n */\nfunction _applyConfigDefaults(config?: MdDialogConfig): MdDialogConfig {\r\n  return extendObject(new MdDialogConfig(), config);\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\r\nimport {MdDialogRef} from './dialog-ref';\r\nimport {MdDialogContainer} from './dialog-container';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose implements OnChanges {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\r\n\r\n   _matDialogClose: any;\r\n   _mdDialogClose: any;\r\n   _matDialogCloseResult: any;\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    const /** @type {?} */ proxiedChange = changes._matDialogClose || changes._mdDialogClose ||\r\n        changes._matDialogCloseResult;\r\n\r\n    if (proxiedChange) {\r\n      this.dialogResult = proxiedChange.currentValue;\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `button[md-dialog-close], button[mat-dialog-close],\r\n             button[mdDialogClose], button[matDialogClose]`,\r\n  host: {\r\n    '(click)': 'dialogRef.close(dialogResult)',\r\n    '[attr.aria-label]': 'ariaLabel',\r\n    'type': 'button', // Prevents accidental form submits.\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['md-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['matDialogClose', ] },],\n'_mdDialogClose': [{ type: Input, args: ['mdDialogClose', ] },],\n'_matDialogCloseResult': [{ type: Input, args: ['mat-dialog-close', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMdDialogClose.prototype.dialogResult;\n/** @type {?} */\nMdDialogClose.prototype._matDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._mdDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._matDialogCloseResult;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle implements OnInit {\r\n   id = `md-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: MdDialogContainer) { }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    if (this._container && !this._container._ariaLabelledBy) {\r\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-dialog-title], [mat-dialog-title], [mdDialogTitle], [matDialogTitle]',\r\n  host: {\r\n    'class': 'mat-dialog-title',\r\n    '[id]': 'id',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n/** @type {?} */\nMdDialogTitle.propDecorators;\n/** @type {?} */\nMdDialogTitle.prototype.id;\n/** @type {?} */\nMdDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content,\r\n             [mdDialogContent], [matDialogContent]`,\r\n  host: {'class': 'mat-dialog-content'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\rStays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions,\r\n             [mdDialogActions], [matDialogActions]`,\r\n  host: {'class': 'mat-dialog-actions'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MdDialog, MD_DIALOG_SCROLL_STRATEGY_PROVIDER} from './dialog';\r\nimport {MdDialogContainer} from './dialog-container';\r\nimport {\r\n  MdDialogClose,\r\n  MdDialogContent,\r\n  MdDialogTitle,\r\n  MdDialogActions\r\n} from './dialog-content-directives';\nexport class MdDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    PortalModule,\r\n    A11yModule,\r\n    MdCommonModule,\r\n  ],\r\n  exports: [\r\n    MdDialogContainer,\r\n    MdDialogClose,\r\n    MdDialogTitle,\r\n    MdDialogContent,\r\n    MdDialogActions,\r\n    MdCommonModule,\r\n  ],\r\n  declarations: [\r\n    MdDialogContainer,\r\n    MdDialogClose,\r\n    MdDialogTitle,\r\n    MdDialogActions,\r\n    MdDialogContent,\r\n  ],\r\n  providers: [\r\n    MdDialog,\r\n    MD_DIALOG_SCROLL_STRATEGY_PROVIDER,\r\n  ],\r\n  entryComponents: [MdDialogContainer],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdDialogModule,MD_DIALOG_DATA,MD_DIALOG_SCROLL_STRATEGY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER,MdDialog,throwMdDialogContentAlreadyAttachedError,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef,MAT_DIALOG_DATA,MAT_DIALOG_SCROLL_STRATEGY,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MatDialog,MatDialogActions,MatDialogClose,MatDialogConfig,MatDialogContainer,MatDialogContent,MatDialogModule,MatDialogRef,MatDialogTitle} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {catchOperator, doOperator, finallyOperator, map, RxChain, share} from '@angular/cdk/rxjs';\r\nimport {Injectable, Optional, SecurityContext, SkipSelf} from '@angular/core';\r\nimport {Http} from '@angular/http';\r\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {forkJoin} from 'rxjs/observable/forkJoin';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\n/**\n * Returns an exception to be thrown in the case when attempting to\rload an icon with a name that cannot be found.\r\\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMdIconNameNotFoundError(iconName: string): Error {\r\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\r\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\r`<md-icon>` without including \\@angular/http.\r\\@docs-private\n * @return {?}\n */\nexport function getMdIconNoHttpProviderError(): Error {\r\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\r\n               'Please include the HttpModule from @angular/http in your app imports.');\r\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\r\\@param url URL that was attempted to be sanitized.\r\\@docs-private\n * @param {?} url\n * @return {?}\n */\nexport function getMdIconFailedToSanitizeError(url: SafeResourceUrl): Error {\r\n  return Error(`The URL provided to MdIconRegistry was not trusted as a resource URL ` +\r\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\r\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\r\\@docs-private\n */\nclass SvgIconConfig {\r\n  svgElement: SVGElement | null = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\r\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <md-icon> component.\r- Registers icon URLs by namespace and name.\r- Registers icon set URLs by namespace.\r- Registers aliases for CSS classes, for use with icon fonts.\r- Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\rMultiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\rThe default 'material-icons' value assumes that the material icon font has been loaded as\rdescribed at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\r\\@param iconName Name under which the icon should be registered.\r\\@param url\n * @param {?} iconName\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\r\n    return this.addSvgIconInNamespace('', iconName, url);\r\n  }\n/**\n * Registers an icon by URL in the specified namespace.\r\\@param namespace Namespace in which the icon should be registered.\r\\@param iconName Name under which the icon should be registered.\r\\@param url\n * @param {?} namespace\n * @param {?} iconName\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\r\n    const /** @type {?} */ key = iconKey(namespace, iconName);\r\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\r\n    return this;\r\n  }\n/**\n * Registers an icon set by URL in the default namespace.\r\\@param url\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\r\n    return this.addSvgIconSetInNamespace('', url);\r\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\r\\@param namespace Namespace in which to register the icon set.\r\\@param url\n * @param {?} namespace\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\r\n    const /** @type {?} */ config = new SvgIconConfig(url);\r\n    const /** @type {?} */ configNamespace = this._iconSetConfigs.get(namespace);\r\n\r\n    if (configNamespace) {\r\n      configNamespace.push(config);\r\n    } else {\r\n      this._iconSetConfigs.set(namespace, [config]);\r\n    }\r\n    return this;\r\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\rcomponent with the alias as the fontSet input will cause the class name to be applied\rto the <md-icon> element.\r\r\\@param alias Alias for the font.\r\\@param className Class name override to be used instead of the alias.\n * @param {?} alias\n * @param {?=} className\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\r\n    this._fontCssClassesByAlias.set(alias, className);\r\n    return this;\r\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\rregisterFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\r\n    return this._fontCssClassesByAlias.get(alias) || alias;\r\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\rhave a fontSet input value, and is not loading an icon by name or URL.\r\r\\@param className\n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\r\n    this._defaultFontSetClass = className;\r\n    return this;\r\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\rhave a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\r\n    return this._defaultFontSetClass;\r\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\rThe response from the URL may be cached so this will not always cause an HTTP request, but\rthe produced element will always be a new copy of the originally fetched icon. (That is,\rit will not contain any modifications made to elements previously returned).\r\r\\@param safeUrl URL from which to fetch the SVG icon.\n * @param {?} safeUrl\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\r\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (!url) {\r\n      throw getMdIconFailedToSanitizeError(safeUrl);\r\n    }\r\n\r\n    let /** @type {?} */ cachedIcon = this._cachedIconsByUrl.get(url);\r\n\r\n    if (cachedIcon) {\r\n      return observableOf(cloneSvg(cachedIcon));\r\n    }\r\n\r\n    return RxChain.from(this._loadSvgIconFromConfig(new SvgIconConfig(url)))\r\n      .call(doOperator, svg => this._cachedIconsByUrl.set( /** @type {?} */((url)), svg))\r\n      .call(map, svg => cloneSvg(svg))\r\n      .result();\r\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\rand namespace. The icon must have been previously registered with addIcon or addIconSet;\rif not, the Observable will throw an error.\r\r\\@param name Name of the icon to be retrieved.\r\\@param namespace Namespace in which to look for the icon.\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\r\n    // Return (copy of) cached icon if possible.\r\n    const /** @type {?} */ key = iconKey(namespace, name);\r\n    const /** @type {?} */ config = this._svgIconConfigs.get(key);\r\n\r\n    if (config) {\r\n      return this._getSvgFromConfig(config);\r\n    }\r\n\r\n    // See if we have any icon sets registered for the namespace.\r\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\r\n\r\n    if (iconSetConfigs) {\r\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\r\n    }\r\n\r\n    return observableThrow(getMdIconNameNotFoundError(key));\r\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    if (config.svgElement) {\r\n      // We already have the SVG element for this icon, return a copy.\r\n      return observableOf(cloneSvg(config.svgElement));\r\n    } else {\r\n      // Fetch the icon from the config's URL, cache it, and return a copy.\r\n      return RxChain.from(this._loadSvgIconFromConfig(config))\r\n          .call(doOperator, svg => config.svgElement = svg)\r\n          .call(map, svg => cloneSvg(svg))\r\n          .result();\r\n    }\r\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\rFirst searches the available cached icons for a nested element with a matching name, and\rif found copies the element to a new <svg> element. If not found, fetches all icon sets\rthat have not been cached, and searches again after all fetches are completed.\rThe returned Observable produces the SVG element if possible, and throws\ran error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\r\n      Observable<SVGElement> {\r\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\r\n    // requested name.\r\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n\r\n    if (namedIcon) {\r\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\r\n      // time anyway, there's probably not much advantage compared to just always extracting\r\n      // it from the icon set.\r\n      return observableOf(namedIcon);\r\n    }\r\n\r\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\r\n    // fetched, fetch them now and look for iconName in the results.\r\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\r\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\r\n      .map(iconSetConfig => {\r\n        return RxChain.from(this._loadSvgIconSetFromConfig(iconSetConfig))\r\n          .call(catchOperator, (err: any): Observable<SVGElement | null> => {\r\n            let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\r\n\r\n            // Swallow errors fetching individual URLs so the combined Observable won't\r\n            // necessarily fail.\r\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\r\n            return observableOf(null);\r\n          })\r\n          .call(doOperator, svg => {\r\n            // Cache the SVG element.\r\n            if (svg) {\r\n              iconSetConfig.svgElement = svg;\r\n            }\r\n          })\r\n          .result();\r\n      });\r\n\r\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\r\n    // cached SVG element (unless the request failed), and we can check again for the icon.\r\n    return map.call(forkJoin.call(Observable, iconSetFetchRequests), () => {\r\n      const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n\r\n      if (!foundIcon) {\r\n        throw getMdIconNameNotFoundError(name);\r\n      }\r\n\r\n      return foundIcon;\r\n    });\r\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\rtag matches the specified name. If found, copies the nested element to a new SVG element and\rreturns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\r\n      SVGElement | null {\r\n    // Iterate backwards, so icon sets added later have precedence.\r\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\r\n      const /** @type {?} */ config = iconSetConfigs[i];\r\n      if (config.svgElement) {\r\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\r\n        if (foundIcon) {\r\n          return foundIcon;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\rfrom it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    return map.call(this._fetchUrl(config.url),\r\n        svgText => this._createSvgElementForSingleIcon(svgText));\r\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\rfrom it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n      // TODO: Document that icons should only be loaded from trusted sources.\r\n    return map.call(this._fetchUrl(config.url),\r\n        svgText => this._svgElementFromString(svgText));\r\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\r\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\r\n    this._setSvgAttributes(svg);\r\n    return svg;\r\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\rtag matches the specified name. If found, copies the nested element to a new SVG element and\rreturns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\r\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\r\n\r\n    if (!iconNode) {\r\n      return null;\r\n    }\r\n\r\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\r\n    // the content of a new <svg> node.\r\n    if (iconNode.tagName.toLowerCase() === 'svg') {\r\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\r\n    }\r\n\r\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\r\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\r\n    // tag is problematic on Firefox, because it needs to include the current page path.\r\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\r\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\r\n    }\r\n\r\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\r\n    // the correct nodes, but the SVG content doesn't render. Instead we\r\n    // have to create an empty SVG node using innerHTML and append its content.\r\n    // Elements created using DOMParser.parseFromString have the same problem.\r\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\r\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\r\n    // Clone the node so we don't remove it from the parent icon set element.\r\n    svg.appendChild(iconNode.cloneNode(true));\r\n\r\n    return this._setSvgAttributes(svg);\r\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\r\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\r\n    // creating an element from an HTML string.\r\n    const /** @type {?} */ div = document.createElement('DIV');\r\n    div.innerHTML = str;\r\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\r\n    if (!svg) {\r\n      throw Error('<svg> tag not found');\r\n    }\r\n    return svg;\r\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\r\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\r\n\r\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\r\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\r\n        svg.appendChild(element.childNodes[i].cloneNode(true));\r\n      }\r\n    }\r\n\r\n    return svg;\r\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\r\n    if (!svg.getAttribute('xmlns')) {\r\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\r\n    }\r\n    svg.setAttribute('fit', '');\r\n    svg.setAttribute('height', '100%');\r\n    svg.setAttribute('width', '100%');\r\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\r\n    return svg;\r\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\rcached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\r\n    if (!this._http) {\r\n      throw getMdIconNoHttpProviderError();\r\n    }\r\n\r\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (!url) {\r\n      throw getMdIconFailedToSanitizeError(safeUrl);\r\n    }\r\n\r\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\r\n    // already a request in progress for that URL. It's necessary to call share() on the\r\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\r\n    const /** @type {?} */ inProgressFetch = this._inProgressUrlFetches.get(url);\r\n\r\n    if (inProgressFetch) {\r\n      return inProgressFetch;\r\n    }\r\n\r\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\r\n    // Observable. Figure out why and fix it.\r\n    const /** @type {?} */ req = RxChain.from(this._http.get(url))\r\n      .call(map, response => response.text())\r\n      .call(finallyOperator, () => this._inProgressUrlFetches.delete(url))\r\n      .call(share)\r\n      .result();\r\n\r\n    this._inProgressUrlFetches.set(url, req);\r\n    return req;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\rMultiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\rThe default 'material-icons' value assumes that the material icon font has been loaded as\rdescribed at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\r\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\r\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\r\n}\n/**\n * \\@docs-private\n */\nexport const ICON_REGISTRY_PROVIDER = {\r\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\r\n  provide: MdIconRegistry,\r\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], [new Optional(), Http], DomSanitizer],\r\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\r\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\r\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\r\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\r\n  return namespace + ':' + name;\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\r\n\r\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\ran invalid Material prefix on a component.\r\\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\r\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\r\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\r\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\r\n  [mat-button],\r\n  [mat-fab],\r\n  [mat-icon-button],\r\n  [mat-mini-fab],\r\n  [mat-raised-button],\r\n  [matCardSubtitle],\r\n  [matCardTitle],\r\n  [matCellDef],\r\n  [matColumnDef],\r\n  [matDialogActions],\r\n  [matDialogClose],\r\n  [matDialogContent],\r\n  [matDialogTitle],\r\n  [matHeaderCellDef],\r\n  [matHeaderRowDef],\r\n  [matLine],\r\n  [matRowDef],\r\n  [matStepLabel],\r\n  [matStepperNext],\r\n  [matStepperPrevious],\r\n  [matTabLabel],\r\n  [matTabLink],\r\n  [matTabNav],\r\n  [matTooltip],\r\n  [matInput],\r\n  [matPrefix],\r\n  [matSuffix],\r\n  mat-autocomplete,\r\n  mat-button-toggle,\r\n  mat-button-toggle,\r\n  mat-button-toggle-group,\r\n  mat-card,\r\n  mat-card-actions,\r\n  mat-card-content,\r\n  mat-card-footer,\r\n  mat-card-header,\r\n  mat-card-subtitle,\r\n  mat-card-title,\r\n  mat-card-title-group,\r\n  mat-cell,\r\n  mat-checkbox,\r\n  mat-chip,\r\n  mat-dialog-actions,\r\n  mat-dialog-container,\r\n  mat-dialog-content,\r\n  mat-divider,\r\n  mat-error,\r\n  mat-grid-list,\r\n  mat-grid-tile,\r\n  mat-grid-tile-footer,\r\n  mat-grid-tile-header,\r\n  mat-header-cell,\r\n  mat-header-row,\r\n  mat-hint,\r\n  mat-horizontal-stepper,\r\n  mat-icon,\r\n  mat-input-container,\r\n  mat-form-field,\r\n  mat-list,\r\n  mat-list-item,\r\n  mat-menu,\r\n  mat-nav-list,\r\n  mat-option,\r\n  mat-placeholder,\r\n  mat-progress-bar,\r\n  mat-pseudo-checkbox,\r\n  mat-radio-button,\r\n  mat-radio-group,\r\n  mat-row,\r\n  mat-select,\r\n  mat-sidenav,\r\n  mat-sidenav-container,\r\n  mat-slider,\r\n  mat-spinner,\r\n  mat-step,\r\n  mat-tab,\r\n  mat-table,\r\n  mat-tab-group,\r\n  mat-toolbar,\r\n  mat-vertical-stepper`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\r\n  [md-button],\r\n  [md-fab],\r\n  [md-icon-button],\r\n  [md-mini-fab],\r\n  [md-raised-button],\r\n  [mdCardSubtitle],\r\n  [mdCardTitle],\r\n  [mdCellDef],\r\n  [mdColumnDef],\r\n  [mdDialogActions],\r\n  [mdDialogClose],\r\n  [mdDialogContent],\r\n  [mdDialogTitle],\r\n  [mdHeaderCellDef],\r\n  [mdHeaderRowDef],\r\n  [mdLine],\r\n  [mdRowDef],\r\n  [mdStepLabel],\r\n  [mdStepperNext],\r\n  [mdStepperPrevious],\r\n  [mdTabLabel],\r\n  [mdTabLink],\r\n  [mdTabNav],\r\n  [mdTooltip],\r\n  [mdInput],\r\n  [mdPrefix],\r\n  [mdSuffix],\r\n  md-autocomplete,\r\n  md-button-toggle,\r\n  md-button-toggle,\r\n  md-button-toggle-group,\r\n  md-card,\r\n  md-card-actions,\r\n  md-card-content,\r\n  md-card-footer,\r\n  md-card-header,\r\n  md-card-subtitle,\r\n  md-card-title,\r\n  md-card-title-group,\r\n  md-cell,\r\n  md-checkbox,\r\n  md-chip,\r\n  md-dialog-actions,\r\n  md-dialog-container,\r\n  md-dialog-content,\r\n  md-divider,\r\n  md-error,\r\n  md-grid-list,\r\n  md-grid-tile,\r\n  md-grid-tile-footer,\r\n  md-grid-tile-header,\r\n  md-header-cell,\r\n  md-header-row,\r\n  md-hint,\r\n  md-horizontal-stepper,\r\n  md-icon,\r\n  md-input-container,\r\n  md-form-field,\r\n  md-list,\r\n  md-list-item,\r\n  md-menu,\r\n  md-nav-list,\r\n  md-option,\r\n  md-placeholder,\r\n  md-progress-bar,\r\n  md-pseudo-checkbox,\r\n  md-radio-button,\r\n  md-radio-group,\r\n  md-row,\r\n  md-select,\r\n  md-sidenav,\r\n  md-sidenav-container,\r\n  md-slider,\r\n  md-spinner,\r\n  md-step,\r\n  md-tab,\r\n  md-table,\r\n  md-tab-group,\r\n  md-toolbar,\r\n  md-vertical-stepper`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\r\n      isCompatibilityMode: boolean,\r\n    elementRef: ElementRef) {\r\n\r\n    if (!isCompatibilityMode) {\r\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\r\n      isCompatibilityMode: boolean,\r\n    elementRef: ElementRef) {\r\n\r\n    if (isCompatibilityMode) {\r\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\rwithout NoConflictStyleCompatibilityMode also being imported, it will throw an error if\rthere are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  declarations: [MatPrefixRejector, MdPrefixRejector],\r\n  exports: [MatPrefixRejector, MdPrefixRejector],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\rit will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  providers: [{\r\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\r\n  }],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\n/**\n * InjectionToken for datepicker that can be used to override default locale code.\n */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n/**\n * Provider for MAT_DATE_LOCALE injection token.\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * A stream that emits when the locale changes.\n * @return {?}\n */\nget localeChanges(): Observable<void> { return this._localeChanges; }\r\n  protected _localeChanges= new Subject<void>();\n/**\n * Gets the year component of the given date.\r\\@param date The date to extract the year from.\r\\@returns The year component.\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\r\\@param date The date to extract the month from.\r\\@returns The month component (0-indexed, 0 = January).\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\r\\@param date The date to extract the date of the month from.\r\\@returns The month component (1-indexed, 1 = first of month).\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\r\\@param date The date to extract the day of the week from.\r\\@returns The month component (0-indexed, 0 = Sunday).\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\r\\@param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\r\\@returns An ordered list of all month names, starting with January.\n * @abstract\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\r\\@returns An ordered list of all date of the month names, starting with '1'.\n * @abstract\n * @return {?}\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\r\\@param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\r\\@returns An ordered list of all weekday names, starting with Sunday.\n * @abstract\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\r\\@param date The date to get the year name for.\r\\@returns The name of the given year (e.g. '2017').\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\r\\@returns The first day of the week (0-indexed, 0 = Sunday).\n * @abstract\n * @return {?}\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\r\\@param date The date whose month should be checked.\r\\@returns The number of days in the month of the given date.\n * @abstract\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\r\\@param date The date to clone\r\\@returns A new date equal to the given date.\n * @abstract\n * @param {?} date\n * @return {?}\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\rmonth and date.\r\\@param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\r\\@param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\r\\@param date The date of month of the date. Must be an integer 1 - length of the given month.\r\\@returns The new date, or null if invalid.\n * @abstract\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\r\\@returns Today's date.\n * @abstract\n * @return {?}\n */\ntoday() {}\n/**\n * Parses a date from a value.\r\\@param value The value to parse.\r\\@param parseFormat The expected format of the value being parsed\r    (type is implementation-dependent).\r\\@returns The parsed date.\n * @abstract\n * @param {?} value\n * @param {?} parseFormat\n * @return {?}\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\r\\@param date The value to format.\r\\@param displayFormat The format to use to display the date as a string.\r\\@returns The formatted date string.\n * @abstract\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\rcalendar for each year and then finding the closest date in the new month. For example when\radding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\r\\@param date The date to add years to.\r\\@param years The number of years to add (may be negative).\r\\@returns A new date equal to the given one with the specified number of years added.\n * @abstract\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\rcalendar for each month and then finding the closest date in the new month. For example when\radding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\r\\@param date The date to add months to.\r\\@param months The number of months to add (may be negative).\r\\@returns A new date equal to the given one with the specified number of months added.\n * @abstract\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\rcalendar for each day.\r\\@param date The date to add days to.\r\\@param days The number of days to add (may be negative).\r\\@returns A new date equal to the given one with the specified number of days added.\n * @abstract\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\r\\@param date The date to get the ISO date string for.\r\\@returns The ISO date string date string.\n * @abstract\n * @param {?} date\n * @return {?}\n */\ntoIso8601(date: D) {}\n/**\n * Creates a date from an RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339).\r\\@param iso8601String The ISO date string to create a date from\r\\@returns The date created from the ISO date string.\n * @abstract\n * @param {?} iso8601String\n * @return {?}\n */\nfromIso8601(iso8601String: string) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\r\\@param obj The object to check\r\\@returns Whether the object is a date instance.\n * @abstract\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\r\\@param date The date to check.\r\\@returns Whether the date is valid.\n * @abstract\n * @param {?} date\n * @return {?}\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\r\\@param locale The new locale.\n * @param {?} locale\n * @return {?}\n */\nsetLocale(locale: any) {\r\n    this.locale = locale;\r\n    this._localeChanges.next();\r\n  }\n/**\n * Compares two dates.\r\\@param first The first date to compare.\r\\@param second The second date to compare.\r\\@returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r    a number greater than 0 if the first date is later.\n * @param {?} first\n * @param {?} second\n * @return {?}\n */\ncompareDate(first: D, second: D): number {\r\n    return this.getYear(first) - this.getYear(second) ||\r\n        this.getMonth(first) - this.getMonth(second) ||\r\n        this.getDate(first) - this.getDate(second);\r\n  }\n/**\n * Checks if two dates are equal.\r\\@param first The first date to check.\r\\@param second The second date to check.\r\\@returns {boolean} Whether the two dates are equal.\r    Null dates are considered equal to other null dates.\n * @param {?} first\n * @param {?} second\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\r\n    return first && second ? !this.compareDate(first, second) : first == second;\r\n  }\n/**\n * Clamp the given date between min and max dates.\r\\@param date The date to clamp.\r\\@param min The minimum value to allow. If null or omitted no min is enforced.\r\\@param max The maximum value to allow. If null or omitted no max is enforced.\r\\@returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\r    otherwise `date`.\n * @param {?} date\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\r\n    if (min && this.compareDate(date, min) < 0) {\r\n      return min;\r\n    }\r\n    if (max && this.compareDate(date, max) > 0) {\r\n      return max;\r\n    }\r\n    return date;\r\n  }\r\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n/** @type {?} */\nDateAdapter.prototype._localeChanges;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ElementRef, NgZone} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\r\n\r\nexport type RippleConfig = {\r\n  color?: string;\r\n  centered?: boolean;\r\n  radius?: number;\r\n  speedFactor?: number;\r\n  persistent?: boolean;\r\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\rThe constructor takes a reference to the ripple directive's host element and a map of DOM\revent handlers to be installed on the element that triggers ripple animations.\rThis will eventually become a custom renderer once Angular support exists.\r\\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\r\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\r\n      platform: Platform) {\r\n    // Only do anything if we're on the browser.\r\n    if (platform.isBrowser) {\r\n      this._containerElement = elementRef.nativeElement;\r\n\r\n      // Specify events which need to be registered on the trigger.\r\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\r\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\r\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\r\n\r\n      // By default use the host element as trigger element.\r\n      this.setTriggerElement(this._containerElement);\r\n    }\r\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\r\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\r\n\r\n    if (config.centered) {\r\n      pageX = containerRect.left + containerRect.width / 2;\r\n      pageY = containerRect.top + containerRect.height / 2;\r\n    } else {\r\n      // Subtract scroll values from the coordinates because calculations below\r\n      // are always relative to the viewport rectangle.\r\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\r\n      pageX -= scrollPosition.left;\r\n      pageY -= scrollPosition.top;\r\n    }\r\n\r\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\r\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\r\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\r\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\r\n\r\n    let /** @type {?} */ ripple = document.createElement('div');\r\n    ripple.classList.add('mat-ripple-element');\r\n\r\n    ripple.style.left = `${offsetX - radius}px`;\r\n    ripple.style.top = `${offsetY - radius}px`;\r\n    ripple.style.height = `${radius * 2}px`;\r\n    ripple.style.width = `${radius * 2}px`;\r\n\r\n    // If the color is not set, the default CSS color will be used.\r\n    ripple.style.backgroundColor = config.color || null;\r\n    ripple.style.transitionDuration = `${duration}ms`;\r\n\r\n    this._containerElement.appendChild(ripple);\r\n\r\n    // By default the browser does not recalculate the styles of dynamically created\r\n    // ripple elements. This is critical because then the `scale` would not animate properly.\r\n    enforceStyleRecalculation(ripple);\r\n\r\n    ripple.style.transform = 'scale(1)';\r\n\r\n    // Exposed reference to the ripple that will be returned.\r\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\r\n\r\n    rippleRef.state = RippleState.FADING_IN;\r\n\r\n    // Add the ripple reference to the list of all active ripples.\r\n    this._activeRipples.add(rippleRef);\r\n\r\n    // Wait for the ripple element to be completely faded in.\r\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\r\n    this.runTimeoutOutsideZone(() => {\r\n      rippleRef.state = RippleState.VISIBLE;\r\n\r\n      if (!config.persistent && !this._isMousedown) {\r\n        rippleRef.fadeOut();\r\n      }\r\n    }, duration);\r\n\r\n    return rippleRef;\r\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\r\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\r\n    if (!this._activeRipples.delete(rippleRef)) {\r\n      return;\r\n    }\r\n\r\n    let /** @type {?} */ rippleEl = rippleRef.element;\r\n\r\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\r\n    rippleEl.style.opacity = '0';\r\n\r\n    rippleRef.state = RippleState.FADING_OUT;\r\n\r\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\r\n    this.runTimeoutOutsideZone(() => {\r\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\r\n      rippleEl.parentNode)).removeChild(rippleEl);\r\n    }, RIPPLE_FADE_OUT_DURATION);\r\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\r\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\r\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\r\n    // Remove all previously register event listeners from the trigger element.\r\n    if (this._triggerElement) {\r\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\r\n        this._triggerElement)).removeEventListener(type, fn);\r\n      });\r\n    }\r\n\r\n    if (element) {\r\n      // If the element is not null, register all event listeners on the trigger element.\r\n      this._ngZone.runOutsideAngular(() => {\r\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\r\n      });\r\n    }\r\n\r\n    this._triggerElement = element;\r\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\r\n    if (!this.rippleDisabled) {\r\n      this._isMousedown = true;\r\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\r\n    }\r\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\r\n    this._isMousedown = false;\r\n\r\n    // Fade-out all ripples that are completely visible and not persistent.\r\n    this._activeRipples.forEach(ripple => {\r\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\r\n        ripple.fadeOut();\r\n      }\r\n    });\r\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\r\n    if (this._isMousedown) {\r\n      this.onMouseup();\r\n    }\r\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\r\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\r\n  }\r\n\r\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\r\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\r\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\r\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\r\n  window.getComputedStyle(element).getPropertyValue('opacity');\r\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\r\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\r\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\r\n  return Math.sqrt(distX * distX + distY * distY);\r\n}\r\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldPlaceholderConflictError(): Error {\r\n  return Error('Placeholder attribute and child element were both specified.');\r\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdFormFieldDuplicatedHintError(align: string): Error {\r\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\r\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldMissingControlError(): Error {\r\n  return Error('md-form-field must contain a MdFormFieldControl. ' +\r\n      'Did you forget to add mdInput to the native input or textarea element?');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {DateAdapter} from '@angular/material/core';\n/**\n * Function that attempts to coerce a value to a date using a DateAdapter. Date instances, null,\rand undefined will be passed through. Empty strings will be coerced to null. Valid ISO 8601\rstrings (https://www.ietf.org/rfc/rfc3339.txt) will be coerced to dates. All other values will\rresult in an error being thrown.\r\\@param adapter The date adapter to use for coercion\r\\@param value The value to coerce.\r\\@return A date object coerced from the value.\r\\@throws Throws when the value cannot be coerced.\n * @template D\n * @param {?} adapter\n * @param {?} value\n * @return {?}\n */\nexport function coerceDateProperty<D>(adapter: DateAdapter<D>, value: any): D | null {\r\n  if (typeof value === 'string') {\r\n    if (value == '') {\r\n      value = null;\r\n    } else {\r\n      value = adapter.fromIso8601(value) || value;\r\n    }\r\n  }\r\n  if (value == null || adapter.isDateInstance(value)) {\r\n    return value;\r\n  }\r\n  throw Error(`Datepicker: Value must be either a date object recognized by the DateAdapter or ` +\r\n              `an ISO 8601 string. Instead got: ${value}`);\r\n}\r\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\r\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\r\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\r\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\r\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\r\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\r\n  static COMPLEX = '375ms';\r\n  static ENTERING = '225ms';\r\n  static EXITING = '195ms';\r\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Constructor} from './constructor';\r\nimport {ElementRef, Renderer2} from '@angular/core';\r\n\r\n/** @docs-private */\r\nexport interface CanColor {\r\n  color: ThemePalette;\r\n}\r\n\r\n/** @docs-private */\r\nexport interface HasRenderer {\r\n  _renderer: Renderer2;\r\n  _elementRef: ElementRef;\r\n}\r\n\r\n/** Possible color palette values.  */\r\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\r\n    : Constructor<CanColor> & T {\r\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\r\n      const /** @type {?} */ colorPalette = value || defaultColor;\r\n\r\n      if (colorPalette !== this._color) {\r\n        if (this._color) {\r\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\r\n        }\r\n        if (colorPalette) {\r\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\r\n        }\r\n\r\n        this._color = colorPalette;\r\n      }\r\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\r\n      super(...args);\r\n\r\n      // Set the default color that can be specified from the mixin.\r\n      this.color = defaultColor;\r\n    }\r\n  };\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Constructor} from './constructor';\r\n\r\n/** @docs-private */\r\nexport interface CanDisableRipple {\r\n  disableRipple: boolean;\r\n}\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\r\n    : Constructor<CanDisableRipple> & T {\r\n  return class extends base {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect is disabled or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Constructor} from './constructor';\r\nimport {CanDisable} from './disabled';\r\n\r\n/** @docs-private */\r\nexport interface HasTabIndex {\r\n  tabIndex: number;\r\n}\n/**\n * Mixin to augment a directive with a `tabIndex` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultTabIndex\n * @return {?}\n */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\r\n    : Constructor<HasTabIndex> & T {\r\n  return class extends base {\nprivate _tabIndex: number = defaultTabIndex;\n/**\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\r\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\r\n      this._tabIndex = value != null ? value : defaultTabIndex;\r\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\r\n      super(...args);\r\n    }\r\n  };\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\r\n\r\n\r\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\r\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\rIntended to be consumed as an Angular service.\rThis service is needed because native radio change events are only fired on the item currently\rbeing selected, and we still need to uncheck the previous selection.\r\rThis service does not *store* any IDs and names because they may change at any time, so it is\rless error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\r\\@param id ID of the item.\r\\@param name Name of the item.\n * @param {?} id\n * @param {?} name\n * @return {?}\n */\nnotify(id: string, name: string) {\r\n    for (let /** @type {?} */ listener of this._listeners) {\r\n      listener(id, name);\r\n    }\r\n  }\n/**\n * Listen for future changes to item selection.\r\\@return Function used to deregister listener\r\n * @param {?} listener\n * @return {?}\n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\r\n    this._listeners.push(listener);\r\n    return () => {\r\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\r\n        return listener !== registered;\r\n      });\r\n    };\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\r\n    parentDispatcher: UniqueSelectionDispatcher) {\r\n  return parentDispatcher || new UniqueSelectionDispatcher();\r\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\r\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\r\n  provide: UniqueSelectionDispatcher,\r\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\r\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\r\n};\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\rsimilar to Object.assign.\r\r\\@param dest The object which will have properties copied to it.\r\\@param sources The source objects from which properties will be copied.\n * @param {?} dest\n * @param {...?} sources\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\r\n  if (dest == null) {\r\n    throw TypeError('Cannot convert undefined or null to object');\r\n  }\r\n\r\n  for (let /** @type {?} */ source of sources) {\r\n    if (source != null) {\r\n      for (let /** @type {?} */ key in source) {\r\n        if (source.hasOwnProperty(key)) {\r\n          dest[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return dest;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Inject, Injectable, Optional} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\r\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\r\n  'long': [\r\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n    'October', 'November', 'December'\r\n  ],\r\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\r(https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\rbecause the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\r\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const /** @type {?} */ valuesArray = Array(length);\r\n  for (let /** @type {?} */ i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} matDateLocale\n */\nconstructor(  matDateLocale: string) {\r\n    super();\r\n    super.setLocale(matDateLocale);\r\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\rWithout this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\rthe result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\rwill produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\r\n    return date.getFullYear();\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\r\n    return date.getMonth();\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\r\n    return date.getDate();\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\r\n    return date.getDay();\r\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\r\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\r\n    }\r\n    return DEFAULT_MONTH_NAMES[style];\r\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\r\n      return range(31, i => this._stripDirectionalityCharacters(\r\n          dtf.format(new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DATE_NAMES;\r\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\r\n      return range(7, i => this._stripDirectionalityCharacters(\r\n          dtf.format(new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\r\n    if (SUPPORTS_INTL_API) {\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\r\n      return this._stripDirectionalityCharacters(dtf.format(date));\r\n    }\r\n    return String(this.getYear(date));\r\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\r\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n    return 0;\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\r\n    return this.getDate(this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date) + 1, 0));\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\r\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\r\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\r\n\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() != month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\r\n    return new Date();\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\r\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n    // parameters.\r\n    if (typeof value == 'number') {\r\n      return new Date(value);\r\n    }\r\n    return value ? new Date(Date.parse(value)) : null;\r\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\r\n    if (!this.isValid(date)) {\r\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n    }\r\n    if (SUPPORTS_INTL_API) {\r\n      if (this.useUtcForDisplay) {\r\n        date = new Date(Date.UTC(\r\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\r\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\r\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\r\n      }\r\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n      return this._stripDirectionalityCharacters(dtf.format(date));\r\n    }\r\n    return this._stripDirectionalityCharacters(date.toDateString());\r\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\r\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n    }\r\n\r\n    return newDate;\r\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ntoIso8601(date: Date): string {\r\n    return [\r\n      date.getUTCFullYear(),\r\n      this._2digit(date.getUTCMonth() + 1),\r\n      this._2digit(date.getUTCDate())\r\n    ].join('-');\r\n  }\n/**\n * @param {?} iso8601String\n * @return {?}\n */\nfromIso8601(iso8601String: string): Date | null {\r\n    // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n    // string is the right format first.\r\n    if (ISO_8601_REGEX.test(iso8601String)) {\r\n      let /** @type {?} */ d = new Date(iso8601String);\r\n      if (this.isValid(d)) {\r\n        return d;\r\n      }\r\n    }\r\n    return null;\r\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\r\n    return obj instanceof Date;\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\r\n    return !isNaN(date.getTime());\r\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\r\n    let /** @type {?} */ result = new Date(year, month, date);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\n/**\n * Pads a number to make it two digits.\r\\@param n The number to pad.\r\\@returns The padded number.\n * @param {?} n\n * @return {?}\n */\nprivate _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\rother browsers do not. We remove them to make output consistent and because they interfere with\rdate parsing.\r\\@param str The string to strip direction characters from.\r\\@returns The stripped string.\n * @param {?} str\n * @return {?}\n */\nprivate _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, '');\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\rWithout this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\rthe result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\rwill produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {MdDateFormats} from './date-formats';\r\n\r\n\r\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\r\n  parse: {\r\n    dateInput: null,\r\n  },\r\n  display: {\r\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\r\n    monthYearLabel: {year: 'numeric', month: 'short'},\r\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\r\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\r\nimport {NativeDateAdapter} from './native-date-adapter';\r\nimport {MD_DATE_FORMATS} from './date-formats';\r\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\r\n\r\nexport {MAT_DATE_LOCALE,MAT_DATE_LOCALE_PROVIDER,DateAdapter} from './date-adapter';\r\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\r\nexport {NativeDateAdapter} from './native-date-adapter';\r\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  providers: [\r\n    {provide: DateAdapter, useClass: NativeDateAdapter},\r\n    MAT_DATE_LOCALE_PROVIDER\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [NativeDateModule],\r\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {InjectionToken} from '@angular/core';\r\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MD_ERROR_GLOBAL_OPTIONS = new InjectionToken<ErrorOptions>('md-error-global-options');\r\n\r\nexport type ErrorStateMatcher =\r\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\r\n\r\nexport interface ErrorOptions {\r\n  errorStateMatcher?: ErrorStateMatcher;\r\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\r\n  const /** @type {?} */ isSubmitted = form && form.submitted;\r\n  return !!(control.invalid && (control.touched || isSubmitted));\r\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\r\n    form: FormGroupDirective | NgForm) {\r\n  const /** @type {?} */ isSubmitted = form && form.submitted;\r\n  return !!(control.invalid && (control.dirty || isSubmitted));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable, isDevMode} from '@angular/core';\r\nimport {HammerGestureConfig} from '@angular/platform-browser';\r\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\r\n\r\n  /* List of new event names to add to the gesture support list */\r\n  events: string[] = this._hammer ? [\r\n    'longpress',\r\n    'slide',\r\n    'slidestart',\r\n    'slideend',\r\n    'slideright',\r\n    'slideleft'\r\n  ] : [];\nconstructor() {\r\n    super();\r\n\r\n    if (!this._hammer && isDevMode()) {\r\n      console.warn(\r\n        'Could not find HammerJS. Certain Angular Material ' +\r\n        'components may not work correctly.'\r\n      );\r\n    }\r\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\r\rOur gesture names come from the Material Design gestures spec:\rhttps://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\r\rMore information on default recognizers can be found in Hammer docs:\rhttp://hammerjs.github.io/recognizer-pan/\rhttp://hammerjs.github.io/recognizer-press/\r\r\\@param element Element to which to assign the new HammerJS gestures.\r\\@returns Newly-created HammerJS instance.\n * @param {?} element\n * @return {?}\n */\nbuildHammer(element: HTMLElement): HammerInstance {\r\n    const /** @type {?} */ mc = new this._hammer(element);\r\n\r\n    // Default Hammer Recognizers.\r\n    let /** @type {?} */ pan = new this._hammer.Pan();\r\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\r\n    let /** @type {?} */ press = new this._hammer.Press();\r\n\r\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\r\n    // Otherwise the previous `recognizeWith` will be dropped.\r\n    // TODO: Confirm threshold numbers with Material Design UX Team\r\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\r\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\r\n\r\n    // Overwrite the default `pan` event to use the swipe event.\r\n    pan.recognizeWith(swipe);\r\n\r\n    // Add customized gestures to Hammer manager\r\n    mc.add([swipe, press, pan, slide, longpress]);\r\n\r\n    return /** @type {?} */(( mc as HammerInstance));\r\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\r\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\r\n\r\n    inheritances.push(base);\r\n    inheritances.forEach(item => recognizer.recognizeWith(item));\r\n\r\n    return recognizer;\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  NgModule,\r\n  Directive,\r\n  Renderer2,\r\n  ElementRef,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\rLine elements can be extracted with a \\@ContentChildren(MdLine) query, then\rcounted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\r\n  host: {'class': 'mat-line'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\r\\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\r\n    this._setLineClass(this._lines.length);\r\n\r\n    this._lines.changes.subscribe(() => {\r\n      this._setLineClass(this._lines.length);\r\n    });\r\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\r\n    this._resetClasses();\r\n    if (count === 2 || count === 3) {\r\n      this._setClass(`mat-${count}-line`, true);\r\n    } else if (count > 3) {\r\n      this._setClass(`mat-multi-line`, true);\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\r\n    this._setClass('mat-2-line', false);\r\n    this._setClass('mat-3-line', false);\r\n    this._setClass('mat-multi-line', false);\r\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\r\n    if (isAdd) {\r\n      this._renderer.addClass(this._element.nativeElement, className);\r\n    } else {\r\n      this._renderer.removeClass(this._element.nativeElement, className);\r\n    }\r\n  }\r\n\r\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule],\r\n  exports: [MdLine, MdCommonModule],\r\n  declarations: [MdLine],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\r\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\r\n    this._renderer.fadeOutRipple(this);\r\n  }\r\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  Inject,\r\n  NgZone,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n  InjectionToken,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\r\nimport {RippleRef} from './ripple-ref';\r\n\r\nexport interface RippleGlobalOptions {\r\n  disabled?: boolean;\r\n  baseSpeedFactor?: number;\r\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\r\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\r\n\r\n  /**\r\n   * The element that triggers the ripple when click events are received. Defaults to the\r\n   * directive's host element.\r\n   */\r\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\r\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\r\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\rthan originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\rby using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\rwill be the distance from the center of the ripple to the furthest corner of the host element's\rbounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\rsetting it to 0.5 will cause the animations to take twice as long.\rA changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * @return {?}\n */\nget _matRippleTrigger() { return this.trigger; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleTrigger(v) { this.trigger = v; }\n/**\n * @return {?}\n */\nget _matRippleCentered() { return this.centered; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleCentered(v) { this.centered = v; }\n/**\n * @return {?}\n */\nget _matRippleDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matRippleRadius() { return this.radius; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleRadius(v) { this.radius = v; }\n/**\n * @return {?}\n */\nget _matRippleSpeedFactor() { return this.speedFactor; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleSpeedFactor(v) { this.speedFactor = v; }\n/**\n * @return {?}\n */\nget _matRippleColor() { return this.color; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleColor(v) { this.color = v; }\n/**\n * @return {?}\n */\nget _matRippleUnbounded() { return this.unbounded; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleUnbounded(v) { this.unbounded = v; }\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\r\n    elementRef: ElementRef,\r\n    ngZone: NgZone,\r\n    ruler: ViewportRuler,\r\n    platform: Platform,\r\n      globalOptions: RippleGlobalOptions\r\n  ) {\r\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\r\n    this._globalOptions = globalOptions ? globalOptions : {};\r\n\r\n    this._updateRippleRenderer();\r\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    if ((changes['trigger'] || changes['_matRippleTrigger']) && this.trigger) {\r\n      this._rippleRenderer.setTriggerElement(this.trigger);\r\n    }\r\n\r\n    this._updateRippleRenderer();\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    // Set the trigger element to null to cleanup all listeners.\r\n    this._rippleRenderer.setTriggerElement(null);\r\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\r\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\r\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\r\n    this._rippleRenderer.fadeOutAll();\r\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\r\n    return {\r\n      centered: this.centered,\r\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\r\n      radius: this.radius,\r\n      color: this.color\r\n    };\r\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\n_updateRippleRenderer() {\r\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\r\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\r\n  exportAs: 'mdRipple, matRipple',\r\n  host: {\r\n    'class': 'mat-ripple',\r\n    '[class.mat-ripple-unbounded]': 'unbounded'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n'_matRippleTrigger': [{ type: Input, args: ['matRippleTrigger', ] },],\n'_matRippleCentered': [{ type: Input, args: ['matRippleCentered', ] },],\n'_matRippleDisabled': [{ type: Input, args: ['matRippleDisabled', ] },],\n'_matRippleRadius': [{ type: Input, args: ['matRippleRadius', ] },],\n'_matRippleSpeedFactor': [{ type: Input, args: ['matRippleSpeedFactor', ] },],\n'_matRippleColor': [{ type: Input, args: ['matRippleColor', ] },],\n'_matRippleUnbounded': [{ type: Input, args: ['matRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\rthan originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\rby using the `launch()` method.\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\rwill be the distance from the center of the ripple to the furthest corner of the host element's\rbounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\rsetting it to 0.5 will cause the animations to take twice as long.\rA changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MdCommonModule} from '../common-behaviors/common-module';\r\nimport {MdRipple} from './ripple';\r\n\r\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\r\nexport {RippleRef, RippleState} from './ripple-ref';\r\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\r\n  exports: [MdRipple, MdCommonModule],\r\n  declarations: [MdRipple],\r\n  providers: [VIEWPORT_RULER_PROVIDER],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\r\n\r\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\rMeant to be used when the checkbox is purely decorative and a large number of them will be\rincluded, such as for the options in a multi-select. Uses no SVGs or complex animations.\rNote that theming is meant to be handled by the parent element, e.g.\r`mat-primary .mat-pseudo-checkbox`.\r\rNote that this component will be completely invisible to screen-reader users. This is *not*\rinterchangeable with <md-checkbox> and should *not* be used if the user would directly interact\rwith the checkbox. The pseudo-checkbox should only be used as an implementation detail of\rmore complex components that appropriately handle selected / checked state.\r\\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\r\n  styleUrls: ['pseudo-checkbox.css'],\r\n  template: '',\r\n  host: {\r\n    'class': 'mat-pseudo-checkbox',\r\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\r\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\r\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdPseudoCheckboxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  exports: [MdPseudoCheckbox],\r\n  declarations: [MdPseudoCheckbox]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPseudoCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckboxModule.ctorParameters;\n}\n\r\n\r\n\r\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\r\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdOptgroupBase { }\r\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\r\n\r\n// Counter for unique group ids.\r\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-optgroup, mat-optgroup',\r\n  templateUrl: 'optgroup.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled'],\r\n  host: {\r\n    'class': 'mat-optgroup',\r\n    'role': 'group',\r\n    '[class.mat-optgroup-disabled]': 'disabled',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-labelledby]': '_labelId',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {MATERIAL_COMPATIBILITY_MODE} from '../compatibility/compatibility';\r\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\rthe component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\r\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\r\n    if (value !== this._multiple) {\r\n      this._multiple = value;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\r\n    this._disableRipple = value;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MdOptgroup) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\rAn active option displays styles as if it is focused, but the\rfocus is actually retained somewhere else. This comes in handy\rfor components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\r\n    return this._active;\r\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\rselect's trigger.\n * @return {?}\n */\nget viewValue(): string {\r\n    // TODO(kara): Add input property alternative for node envs.\r\n    return (this._getHostElement().textContent || '').trim();\r\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\r\n    this._selected = true;\r\n    this._changeDetectorRef.markForCheck();\r\n    this._emitSelectionChangeEvent();\r\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\r\n    this._selected = false;\r\n    this._changeDetectorRef.markForCheck();\r\n    this._emitSelectionChangeEvent();\r\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\r\n    const /** @type {?} */ element = this._getHostElement();\r\n\r\n    if (typeof element.focus === 'function') {\r\n      element.focus();\r\n    }\r\n  }\n/**\n * This method sets display styles on the option to make it appear\ractive. This is used by the ActiveDescendantKeyManager so key\revents will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\r\n    if (!this._active) {\r\n      this._active = true;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * This method removes display styles on the option that made it appear\ractive. This is used by the ActiveDescendantKeyManager so key\revents will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\r\n    if (this._active) {\r\n      this._active = false;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * Gets the label to be used when determining whether the option should be focused.\n * @return {?}\n */\ngetLabel(): string {\r\n    return this.viewValue;\r\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\r\n      this._selectViaInteraction();\r\n\r\n      // Prevent the page from scrolling down and form submits.\r\n      event.preventDefault();\r\n    }\r\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\rdetermine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\r\n    if (!this.disabled) {\r\n      this._selected = this.multiple ? !this._selected : true;\r\n      this._changeDetectorRef.markForCheck();\r\n      this._emitSelectionChangeEvent(true);\r\n    }\r\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\r\n    return this.disabled ? '-1' : '0';\r\n  }\n/**\n * Gets the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\r\n    return this._element.nativeElement;\r\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\r\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\r\n  }\n/**\n * Counts the amount of option group labels that precede the specified option.\r\\@param optionIndex Index of the option at which to start counting.\r\\@param options Flat list of all of the options.\r\\@param optionGroups Flat list of all of the option groups.\n * @param {?} optionIndex\n * @param {?} options\n * @param {?} optionGroups\n * @return {?}\n */\nstatic countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MdOption>,\r\n    optionGroups: QueryList<MdOptgroup>): number {\r\n\r\n    if (optionGroups.length) {\r\n      let /** @type {?} */ optionsArray = options.toArray();\r\n      let /** @type {?} */ groups = optionGroups.toArray();\r\n      let /** @type {?} */ groupCounter = 0;\r\n\r\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\r\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\r\n          groupCounter++;\r\n        }\r\n      }\r\n\r\n      return groupCounter;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-option, mat-option',\r\n  host: {\r\n    'role': 'option',\r\n    '[attr.tabindex]': '_getTabIndex()',\r\n    '[class.mat-selected]': 'selected',\r\n    '[class.mat-option-multiple]': 'multiple',\r\n    '[class.mat-active]': 'active',\r\n    '[id]': 'id',\r\n    '[attr.aria-selected]': 'selected.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[class.mat-option-disabled]': 'disabled',\r\n    '(click)': '_selectViaInteraction()',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    'class': 'mat-option',\r\n  },\r\n  templateUrl: 'option.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/** @type {?} */\nMdOption.prototype._multiple;\n/** @type {?} */\nMdOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._changeDetectorRef;\n/** @type {?} */\nMdOption.prototype.group;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["this","_datepickerInput","_dateFilter","enumerable","configurable","MdDatepicker","prototype","ngOnDestroy","close","_inputSubscription","unsubscribe","_disabledChange","complete","_popupRef","dispose","oldValue","_selected","date","_dateAdapter","sameDate","selectedChanged","emit","_registerInput","input","_this","Error","_valueChange","subscribe","value","open","opened","disabled","_focusedElementBeforeOpen","_document","activeElement","touchUi","_openAsDialog","_openAsPopup","detach","_dialogRef","_calendarPortal","isAttached","focus","_dialog","MdDatepickerContent","direction","_dir","viewContainerRef","_viewContainerRef","afterClosed","componentInstance","datepicker","ComponentPortal","_createPopup","hasAttached","attach","instance","first$1","call","_ngZone","onStable","asObservable","overlayState","OverlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","scrollStrategy","_scrollStrategy","withFallbackPosition","originX","originY","overlayX","overlayY","decorators","encapsulation","ViewEncapsulation","None","type","MdDialog","undefined","Inject","args","MD_DATEPICKER_SCROLL_STRATEGY","DateAdapter","Optional","Directionality","DOCUMENT","propDecorators","Input","Output","MD_DATEPICKER_VALUE_ACCESSOR","MD_DATEPICKER_VALIDATORS","provide","NG_VALIDATORS","useExisting","forwardRef","MdDatepickerInput","multi","MdDatepickerInputEvent","targetElement","target","_elementRef","_renderer","_dateFormats","_mdFormField","dateInput","EventEmitter","_onTouched","_cvaOnChange","_validatorOnChange","mdDatepickerParse","text","nativeElement","controlValue","coerceDateProperty","control","min","compareDate","mdDatepickerMin","actual","_maxValidator","max","_filterValidator","_validator","Validators","compose","_parseValidator","_minValidator","_lastValueValid","createMissingDateImplError","_localeSubscription","localeChanges","registerDatepicker","Object","defineProperty","set","filter","mdDatepickerFilter","get","_value","oldDate","_max","_disabled","newValue","coerceBooleanProperty","ngAfterContentInit","_datepicker","selected","dateChange","_datepickerSubscription","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","underlineRef","_onKeydown","event","altKey","keyCode","DOWN_ARROW","observableOf","preventDefault","isValid","_getValidDateOrNull","_onChange","obj","isDateInstance","Directive","selector","providers","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","ctorParameters","MdFormField","matDatepickerFilter","MdDatepickerToggle","_intl","_changeDetectorRef","_stateChanges","Subscription","EMPTY","of","merge","changes","datepickerDisabled","inputDisabled","_open","stopPropagation","host","class","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","viewProviders","MATERIAL_COMPATIBILITY_MODE","useValue","MdMonthView","userSelection","longWeekdays","getDayOfWeekNames","weekdays","map","long","i","narrow","narrowWeekdays","_weekdays","slice","firstDayOfWeek","concat","_activeDate","today","oldActiveDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","getMonthNames","getMonth","activeDate","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","createDate","getYear","enabled","dateFilter","d1","d2","Component","template","MD_DATE_FORMATS","selectedChange","MdYearView","_selectedMonth","_getMonthInCurrentYear","fontSetClass","addClass","elem","fontIcon","_previousFontIconClass","removeClass","MdIcon","_MdIconMixinBase","role","Renderer2","ElementRef","MdIconRegistry","Attribute","svgIcon","fontSet","MdIconModule","MdError","id","nextUniqueId","[attr.id]","MdFormFieldControl","onContainerClick","MdHint","align","nextUniqueId$2","[class.mat-right]","[attr.align]","MdPlaceholder","MdPrefix","MdSuffix","_subscriptAnimationState","floatPlaceholder","_placeholderOptions","float","_hintLabel","_processHints","_floatPlaceholder","markForCheck","_validateControlChild","_control","controlType","startWith","stateChanges","_syncDescribedByIds","_hintChildren","ngAfterContentChecked","detectChanges","_shouldForward","prop","ngControl","_hasPlaceholder","placeholder","_placeholderChild","_errorChildren","length","errorState","_placeholder","_canPlaceholderFloat","_showAlwaysAnimate","first","fromEvent","_validatePlaceholders","getMdFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","forEach","hint","hintLabel","getMdFormFieldDuplicatedHintError","ids","_getDisplayedMessages","startHint","push","_hintLabelId","endHint","mdError","setDescribedByIds","getMdFormFieldMissingControlError","state","style","opacity","transform","transition","animate","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-focused]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-invalid]","ChangeDetectorRef","MD_PLACEHOLDER_GLOBAL_OPTIONS","color","dividerColor","hideRequiredMarker","ViewChild","_connectionContainerRef","ContentChildren","_suffixChildren","MdFormFieldModule","MdDatepickerIntl","minDate","maxDate","_intlChanges","changeDetectorRef","MdCalendar","_maxDate","_clampedActiveDate","clampDate","getYearName","_monthView","switchToYearViewLabel","switchToMonthViewLabel","nextMonthLabel","nextYearLabel","startAt","_dateSelected","_userSelected","_monthSelected","month","addCalendarMonths","_nextClicked","addCalendarYears","_previousEnabled","_isSameView","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_focusActiveCell","runOutsideAngular","querySelector","date1","date2","LEFT_ARROW","addCalendarDays","RIGHT_ARROW","END","getDate","PAGE_UP","PAGE_DOWN","ENTER","_dateFilterForViews","HOME","increment","_nextMonthInSameCol","styles","startView","MdCalendarCell","numCols","cellAspectRatio","selectedValueChange","MdCalendarBody","_cellClicked","cell","allowDisabledSelection","rows","cellNumber","rowIndex","colIndex","todayValue","activeCell","InjectionToken","MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER","deps","Overlay","useFactory","MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_overlay","datepickerUid","_validSelected","MdOptionModule","NgModule","imports","MdRippleModule","CommonModule","MdPseudoCheckboxModule","exports","MdOption","MdOptgroup","DEFAULT_ROUND_BUTTON_COLOR","MdButtonCssMatStyler","MdRaisedButtonCssMatStyler","MdIconButtonCssMatStyler","MdFab","button","anchor","MdMiniFab","MdButton","Self","MdAnchor","_MdButtonMixinBase","mixinColor","mixinDisabled","base","_super","class_3","_i","arguments","apply","_disableRipple","MdButtonBase","renderer","elementRef","_platform","_focusMonitor","_isIconButton","_hasAttributeWithPrefix","monitor","stopMonitoring","_isRippleDisabled","disableRipple","isBrowser","unprefixedAttributeNames","some","suffix","el","_getHostElement","hasAttribute","platform","focusMonitor","tslib_1.__extends","_haltDisabledEvents","stopImmediatePropagation","[attr.disabled]","[attr.aria-disabled]","(click)","inputs","Platform","FocusMonitor","MdButtonModule","MdCommonModule","A11yModule","MdDialogConfig","panelClass","disableClose","width","height","data","ariaDescribedBy","MdDialogContainer","_focusTrapFactory","_isAnimating","attachComponentPortal","portal","_portalHost","throwMdDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","attachTemplatePortal","_trapFocus","_focusTrap","focusInitialElementWhenReady","then","hasMovedFocus","_restoreFocus","toFocus","_elementFocusedBeforeDialogWasOpened","_onAnimationDone","toState","_onAnimationStart","_state","BasePortalHost","tabindex","[attr.role]","[attr.aria-labelledby]","[attr.aria-describedby]","[@slideDialog]","(@slideDialog.start)","FocusTrapFactory","MdDialogRef","_overlayRef","_containerInstance","_beforeClose","Subject","RxChain","from","_animationStateChanged","phaseName","_afterOpen","next","dialogResult","_result","_startExitAnimation","_afterClosed","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","getState","MD_DIALOG_SCROLL_STRATEGY","MD_DIALOG_SCROLL_STRATEGY_PROVIDER","_injector","location","_parentDialog","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","afterAllClosed","defer","openDialogs","closeAll","parent","_afterAllClosed","inProgressDialog","overlayRef","_createOverlay","config","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","componentOrTemplateRef","getDialogById","find","dialog","_getOverlayState","dialogConfig","state$$1","global","containerRef","overlay","containerPortal","injector","_createInjector","contentRef","updateSize","userInjector","injectionTokens","WeakMap","_removeOpenDialog","index","indexOf","splice","Injectable","Injector","dialogElementUid","MdDialogClose","ariaLabel","ngOnChanges","proxiedChange","_matDialogClose","_mdDialogClose","_matDialogCloseResult","currentValue","MdDialogTitle","ngOnInit","_container","_ariaLabelledBy","[id]","MdDialogContent","MdDialogActions","MdDialogModule","OverlayModule","SvgIconConfig","url","svgElement","_http","_sanitizer","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","key","iconKey","_svgIconConfigs","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","_iconSetConfigs","registerFontClassAlias","alias","className","_fontCssClassesByAlias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMdIconFailedToSanitizeError","cachedIcon","_cachedIconsByUrl","cloneSvg","_loadSvgIconFromConfig","doOperator","svg","getNamedSvgIcon","name","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","_loadSvgIconSetFromConfig","iconSetConfig","catchOperator","err","console","log","result","forkJoin","Observable","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_svgElementFromString","iconSet","iconNode","tagName","toLowerCase","_setSvgAttributes","cloneNode","_toSvgElement","str","div","document","createElement","element","getAttribute","setAttribute","inProgressFetch","_inProgressUrlFetches","response","finallyOperator","delete","share","DomSanitizer","SkipSelf","Http","ICON_REGISTRY_PROVIDER_FACTORY","MdIconBase","parts","split","_usingFontIcon","_updateFontIconClasses","_setSvgElement","_clearSvgElement","appendChild","layoutElement","childCount","childNodes","removeChild","_mdIconRegistry","_previousFontSetClass","__extends","d","b","__","constructor","extendStatics","create","nodeName","class_1","class_2","_color","colorPalette","defaultColor","source","valuesArray","window","getComputedStyle","getPropertyValue","distanceToFurthestCorner","x","y","rect","distX","Math","abs","distY","sqrt","MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","scrollStrategies","block","getMdIconNameNotFoundError","getMdIconNoHttpProviderError","parentRegistry","http","sanitizer","adapter","fromIso8601","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","AnimationCurves","STANDARD_CURVE","DECELERATION_CURVE","AnimationDurations","NoConflictStyleCompatibilityMode","MATERIAL_SANITY_CHECKS","UniqueSelectionDispatcher","listen","listener","_listeners","_localeChanges","getDayOfWeek","clone","parse","parseFormat","DEFAULT_DATE_NAMES","range","String","ISO_8601_REGEX","useUtcForDisplay","setLocale","matDateLocale","NativeDateAdapter","getDay","DEFAULT_MONTH_NAMES","_stripDirectionalityCharacters","dtf","format","year","Date","displayFormat","Intl","DateTimeFormat","locale","toDateString","years","_createDateWithOverflow","days","_2digit","getUTCMonth","iso8601String","test","isNaN","getTime","setFullYear","MD_NATIVE_DATE_FORMATS","monthYearLabel","dateA11yLabel","day","monthYearA11yLabel","NativeDateModule","MAT_DATE_LOCALE_PROVIDER","MdNativeDateModule","GestureConfig","_hammer","isDevMode","warn","buildHammer","mc","pan","Pan","press","Press","slide","_createRecognizer","threshold","swipe","longpress","time","recognizeWith","options","inheritances","MdLine","MdLineModule","RippleState","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","fadeOutRipple","RippleRef","RippleRenderer","_ruler","_triggerEvents","Map","rippleDisabled","_containerElement","onMousedown","bind","setTriggerElement","containerRect","getBoundingClientRect","centered","scrollPosition","getViewportScrollPosition","pageX","offsetX","ripple","radius","_activeRipples","add","rippleRef","persistent","_isMousedown","rippleEl","runTimeoutOutsideZone","_triggerElement","addEventListener","fadeOut","delay","MD_RIPPLE_GLOBAL_OPTIONS","MdRipple","ngZone","ruler","globalOptions","_rippleRenderer","_globalOptions","_updateRippleRenderer","v","trigger","speedFactor","fadeInRipple","pageY","NgZone","ViewportRuler","unbounded","_matRippleTrigger","_matRippleCentered","_matRippleUnbounded","PlatformModule","ScrollDispatchModule","declarations","VIEWPORT_RULER_PROVIDER","MdPseudoCheckbox","[class.mat-pseudo-checkbox-checked]","MdOptgroupBase","_MdOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","label","_uniqueIdCounter","MdOptionSelectionChange","isUserInput","_element","group","_multiple","onSelectionChange","_emitSelectionChangeEvent","_active","viewValue","SPACE","_selectViaInteraction","multiple","countGroupLabelsBeforeOption","optionIndex","optionGroups","optionsArray","toArray","groups","groupCounter","[attr.tabindex]","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[attr.aria-selected]","[class.mat-option-disabled]"],"mappings":"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"}