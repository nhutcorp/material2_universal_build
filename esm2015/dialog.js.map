{"version":3,"file":"dialog.js","sources":["../../../src/lib/dialog/index.ts","../../../src/lib/dialog/dialog-module.ts","../../../src/lib/dialog/dialog-content-directives.ts","../../../src/lib/dialog/dialog.ts","../../../src/lib/dialog/dialog-ref.ts","../../../src/lib/dialog/dialog-container.ts","../../../src/lib/dialog/dialog-config.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdDialogModule,MD_DIALOG_DATA,MD_DIALOG_SCROLL_STRATEGY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER,MdDialog,throwMdDialogContentAlreadyAttachedError,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef,MAT_DIALOG_DATA,MAT_DIALOG_SCROLL_STRATEGY,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MatDialog,MatDialogActions,MatDialogClose,MatDialogConfig,MatDialogContainer,MatDialogContent,MatDialogModule,MatDialogRef,MatDialogTitle} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MdDialog, MD_DIALOG_SCROLL_STRATEGY_PROVIDER} from './dialog';\r\nimport {MdDialogContainer} from './dialog-container';\r\nimport {\r\n  MdDialogClose,\r\n  MdDialogContent,\r\n  MdDialogTitle,\r\n  MdDialogActions\r\n} from './dialog-content-directives';\nexport class MdDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    PortalModule,\r\n    A11yModule,\r\n    MdCommonModule,\r\n  ],\r\n  exports: [\r\n    MdDialogContainer,\r\n    MdDialogClose,\r\n    MdDialogTitle,\r\n    MdDialogContent,\r\n    MdDialogActions,\r\n    MdCommonModule,\r\n  ],\r\n  declarations: [\r\n    MdDialogContainer,\r\n    MdDialogClose,\r\n    MdDialogTitle,\r\n    MdDialogActions,\r\n    MdDialogContent,\r\n  ],\r\n  providers: [\r\n    MdDialog,\r\n    MD_DIALOG_SCROLL_STRATEGY_PROVIDER,\r\n  ],\r\n  entryComponents: [MdDialogContainer],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\r\nimport {MdDialogRef} from './dialog-ref';\r\nimport {MdDialogContainer} from './dialog-container';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose implements OnChanges {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\r\n\r\n   _matDialogClose: any;\r\n   _mdDialogClose: any;\r\n   _matDialogCloseResult: any;\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    const /** @type {?} */ proxiedChange = changes._matDialogClose || changes._mdDialogClose ||\r\n        changes._matDialogCloseResult;\r\n\r\n    if (proxiedChange) {\r\n      this.dialogResult = proxiedChange.currentValue;\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `button[md-dialog-close], button[mat-dialog-close],\r\n             button[mdDialogClose], button[matDialogClose]`,\r\n  host: {\r\n    '(click)': 'dialogRef.close(dialogResult)',\r\n    '[attr.aria-label]': 'ariaLabel',\r\n    'type': 'button', // Prevents accidental form submits.\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['md-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['matDialogClose', ] },],\n'_mdDialogClose': [{ type: Input, args: ['mdDialogClose', ] },],\n'_matDialogCloseResult': [{ type: Input, args: ['mat-dialog-close', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMdDialogClose.prototype.dialogResult;\n/** @type {?} */\nMdDialogClose.prototype._matDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._mdDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._matDialogCloseResult;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle implements OnInit {\r\n   id = `md-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: MdDialogContainer) { }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    if (this._container && !this._container._ariaLabelledBy) {\r\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[md-dialog-title], [mat-dialog-title], [mdDialogTitle], [matDialogTitle]',\r\n  host: {\r\n    'class': 'mat-dialog-title',\r\n    '[id]': 'id',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n/** @type {?} */\nMdDialogTitle.propDecorators;\n/** @type {?} */\nMdDialogTitle.prototype.id;\n/** @type {?} */\nMdDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content,\r\n             [mdDialogContent], [matDialogContent]`,\r\n  host: {'class': 'mat-dialog-content'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\rStays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions,\r\n             [mdDialogActions], [matDialogActions]`,\r\n  host: {'class': 'mat-dialog-actions'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {\r\n  BlockScrollStrategy,\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\r\nimport {startWith} from '@angular/cdk/rxjs';\r\nimport {Location} from '@angular/common';\r\nimport {\r\n  ComponentRef,\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  Injector,\r\n  Optional,\r\n  SkipSelf,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport {extendObject} from '@angular/material/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {defer} from 'rxjs/observable/defer';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdDialogConfig} from './dialog-config';\r\nimport {MdDialogContainer} from './dialog-container';\r\nimport {MdDialogRef} from './dialog-ref';\r\n\r\n\r\nexport const /** @type {?} */ MD_DIALOG_DATA = new InjectionToken<any>('MdDialogData');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n */\nexport const MD_DIALOG_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('md-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => BlockScrollStrategy {\r\n  return () => overlay.scrollStrategies.block();\r\n}\n/**\n * \\@docs-private\n */\nexport const MD_DIALOG_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MD_DIALOG_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget openDialogs(): MdDialogRef<any>[] {\r\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\r\n  }\n/**\n * Stream that emits when a dialog has been opened.\n * @return {?}\n */\nget afterOpen(): Subject<MdDialogRef<any>> {\r\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\r\n  }\n/**\n * @return {?}\n */\nget _afterAllClosed() {\r\n    const /** @type {?} */ parent = this._parentDialog;\r\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\r\n  }\n/**\n * Stream that emits when all open dialog have finished closing.\rWill emit on subscribe if there are no open dialogs to begin with.\n */\nafterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\r\n      this._afterAllClosed :\r\n      startWith.call(this._afterAllClosed, undefined));\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} location\n * @param {?} _scrollStrategy\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\r\n       location: Location,\nprivate _scrollStrategy,\nprivate _parentDialog: MdDialog) {\r\n\r\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\r\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\r\n    // the user is using the `HashLocationStrategy`).\r\n    if (!_parentDialog && location) {\r\n      location.subscribe(() => this.closeAll());\r\n    }\r\n  }\n/**\n * Opens a modal dialog containing the given component.\r\\@param componentOrTemplateRef Type of the component to load into the dialog,\r    or a TemplateRef to instantiate as the dialog content.\r\\@param config Extra configuration options.\r\\@returns Reference to the newly-opened dialog.\n * @template T\n * @param {?} componentOrTemplateRef\n * @param {?=} config\n * @return {?}\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n          config?: MdDialogConfig): MdDialogRef<T> {\r\n\r\n    const /** @type {?} */ inProgressDialog = this.openDialogs.find(dialog => dialog._isAnimating());\r\n\r\n    // If there's a dialog that is in the process of being opened, return it instead.\r\n    if (inProgressDialog) {\r\n      return inProgressDialog;\r\n    }\r\n\r\n    config = _applyConfigDefaults(config);\r\n\r\n    if (config.id && this.getDialogById(config.id)) {\r\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\r\n    }\r\n\r\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\r\n    const /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n    const /** @type {?} */ dialogRef =\r\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\r\n\r\n    if (!this.openDialogs.length) {\r\n      document.addEventListener('keydown', this._boundKeydown);\r\n    }\r\n\r\n    this.openDialogs.push(dialogRef);\r\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\r\n    this.afterOpen.next(dialogRef);\r\n\r\n    return dialogRef;\r\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\r\n    let /** @type {?} */ i = this.openDialogs.length;\r\n\r\n    while (i--) {\r\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\r\n      // runs on the next microtask, in addition to modifying the array as we're going\r\n      // through it. We loop through all of them and call close without assuming that\r\n      // they'll be removed from the list instantaneously.\r\n      this.openDialogs[i].close();\r\n    }\r\n  }\n/**\n * Finds an open dialog by its id.\r\\@param id ID to use when looking up the dialog.\n * @param {?} id\n * @return {?}\n */\ngetDialogById(id: string): MdDialogRef<any> | undefined {\r\n    return this.openDialogs.find(dialog => dialog.id === id);\r\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\r\\@param config The dialog configuration.\r\\@returns A promise resolving to the OverlayRef for the created overlay.\n * @param {?} config\n * @return {?}\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\r\n    const /** @type {?} */ overlayState = this._getOverlayState(config);\r\n    return this._overlay.create(overlayState);\r\n  }\n/**\n * Creates an overlay state from a dialog config.\r\\@param dialogConfig The dialog configuration.\r\\@returns The overlay configuration.\n * @param {?} dialogConfig\n * @return {?}\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayConfig {\r\n    const /** @type {?} */ state = new OverlayConfig({\r\n      positionStrategy: this._overlay.position().global(),\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: dialogConfig.panelClass,\r\n      hasBackdrop: dialogConfig.hasBackdrop,\r\n      direction: dialogConfig.direction\r\n    });\r\n\r\n    if (dialogConfig.backdropClass) {\r\n      state.backdropClass = dialogConfig.backdropClass;\r\n    }\r\n\r\n    return state;\r\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\r\\@param overlay Reference to the dialog's underlying overlay.\r\\@param config The dialog configuration.\r\\@returns A promise resolving to a ComponentRef for the attached container.\n * @param {?} overlay\n * @param {?} config\n * @return {?}\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\r\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, config.viewContainerRef);\r\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\r\n    containerRef.instance._config = config;\r\n\r\n    return containerRef.instance;\r\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\r\\@param componentOrTemplateRef The type of component being loaded into the dialog,\r    or a TemplateRef to instantiate as the content.\r\\@param dialogContainer Reference to the wrapping MdDialogContainer.\r\\@param overlayRef Reference to the overlay in which the dialog resides.\r\\@param config The dialog configuration.\r\\@returns A promise resolving to the MdDialogRef that should be returned to the user.\n * @template T\n * @param {?} componentOrTemplateRef\n * @param {?} dialogContainer\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachDialogContent<T>(\r\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n      dialogContainer: MdDialogContainer,\r\n      overlayRef: OverlayRef,\r\n      config: MdDialogConfig): MdDialogRef<T> {\r\n\r\n    // Create a reference to the dialog we're creating in order to give the user a handle\r\n    // to modify and close it.\r\n    const /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer, config.id);\r\n\r\n    // When the dialog backdrop is clicked, we want to close it.\r\n    if (config.hasBackdrop) {\r\n      overlayRef.backdropClick().subscribe(() => {\r\n        if (!dialogRef.disableClose) {\r\n          dialogRef.close();\r\n        }\r\n      });\r\n    }\r\n\r\n    if (componentOrTemplateRef instanceof TemplateRef) {\r\n      dialogContainer.attachTemplatePortal(\r\n        new TemplatePortal<T>(componentOrTemplateRef, /** @type {?} */(( null)), /** @type {?} */((\r\n          <any>{ $implicit: config.data, dialogRef }))));\r\n    } else {\r\n      const /** @type {?} */ injector = this._createInjector<T>(config, dialogRef, dialogContainer);\r\n      const /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\r\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\r\n      dialogRef.componentInstance = contentRef.instance;\r\n    }\r\n\r\n    dialogRef\r\n      .updateSize(config.width, config.height)\r\n      .updatePosition(config.position);\r\n\r\n    return dialogRef;\r\n  }\n/**\n * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\rof a dialog to close itself and, optionally, to return a value.\r\\@param config Config object that is used to construct the dialog.\r\\@param dialogRef Reference to the dialog.\r\\@param container Dialog container element that wraps all of the contents.\r\\@returns The custom injector that can be used inside the dialog.\n * @template T\n * @param {?} config\n * @param {?} dialogRef\n * @param {?} dialogContainer\n * @return {?}\n */\nprivate _createInjector<T>(\r\n      config: MdDialogConfig,\r\n      dialogRef: MdDialogRef<T>,\r\n      dialogContainer: MdDialogContainer): PortalInjector {\r\n\r\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const /** @type {?} */ injectionTokens = new WeakMap();\r\n\r\n    injectionTokens.set(MdDialogRef, dialogRef);\r\n    injectionTokens.set(MdDialogContainer, dialogContainer);\r\n    injectionTokens.set(MD_DIALOG_DATA, config.data);\r\n\r\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\r\n  }\n/**\n * Removes a dialog from the array of open dialogs.\r\\@param dialogRef Dialog to be removed.\n * @param {?} dialogRef\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\r\n    const /** @type {?} */ index = this.openDialogs.indexOf(dialogRef);\r\n\r\n    if (index > -1) {\r\n      this.openDialogs.splice(index, 1);\r\n\r\n      // no open dialogs are left, call next on afterAllClosed Subject\r\n      if (!this.openDialogs.length) {\r\n        this._afterAllClosed.next();\r\n        document.removeEventListener('keydown', this._boundKeydown);\r\n      }\r\n    }\r\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\rtop dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\r\n    const /** @type {?} */ topDialog = this.openDialogs[this.openDialogs.length - 1];\r\n    const /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\r\n\r\n    if (event.keyCode === ESCAPE && canClose) {\r\n      topDialog.close();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_SCROLL_STRATEGY, ] }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Stream that emits when all open dialog have finished closing.\rWill emit on subscribe if there are no open dialogs to begin with.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._scrollStrategy;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\r\\@param config Config to be modified.\r\\@returns The new configuration object.\n * @param {?=} config\n * @return {?}\n */\nfunction _applyConfigDefaults(config?: MdDialogConfig): MdDialogConfig {\r\n  return extendObject(new MdDialogConfig(), config);\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\r\nimport {filter, first, RxChain} from '@angular/cdk/rxjs';\r\nimport {DialogPosition} from './dialog-config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdDialogContainer} from './dialog-container';\r\n\r\n\r\n// TODO(jelbourn): resizing\r\n\r\n// Counter for unique dialog ids.\r\nlet /** @type {?} */ uniqueId = 0;\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n */\nprivate _afterOpen = new Subject<void>();\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed = new Subject<any>();\n/**\n * Subject for notifying the user that the dialog has started closing.\n */\nprivate _beforeClose = new Subject<any>();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n * @param {?=} id\n */\nconstructor(\nprivate _overlayRef: OverlayRef,\nprivate _containerInstance: MdDialogContainer,\npublic readonly id: string = `md-dialog-${uniqueId++}`) {\r\n\r\n    // Emit when opening animation completes\r\n    RxChain.from(_containerInstance._animationStateChanged)\r\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'enter')\r\n      .call(first)\r\n      .subscribe(() => {\r\n        this._afterOpen.next();\r\n        this._afterOpen.complete();\r\n      });\r\n\r\n    // Dispose overlay when closing animation is complete\r\n    RxChain.from(_containerInstance._animationStateChanged)\r\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'exit')\r\n      .call(first)\r\n      .subscribe(() => {\r\n        this._overlayRef.dispose();\r\n        this._afterClosed.next(this._result);\r\n        this._afterClosed.complete();\r\n        this.componentInstance = null!;\r\n      });\r\n  }\n/**\n * Close the dialog.\r\\@param dialogResult Optional result to return to the dialog opener.\n * @param {?=} dialogResult\n * @return {?}\n */\nclose(dialogResult?: any): void {\r\n    this._result = dialogResult;\r\n\r\n    // Transition the backdrop in parallel to the dialog.\r\n    RxChain.from(this._containerInstance._animationStateChanged)\r\n      .call(filter, event => event.phaseName === 'start')\r\n      .call(first)\r\n      .subscribe(() => {\r\n        this._beforeClose.next(dialogResult);\r\n        this._beforeClose.complete();\r\n        this._overlayRef.detachBackdrop();\r\n      });\r\n\r\n    this._containerInstance._startExitAnimation();\r\n  }\n/**\n * Gets an observable that is notified when the dialog is finished opening.\n * @return {?}\n */\nafterOpen(): Observable<void> {\r\n    return this._afterOpen.asObservable();\r\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\r\n    return this._afterClosed.asObservable();\r\n  }\n/**\n * Gets an observable that is notified when the dialog has started closing.\n * @return {?}\n */\nbeforeClose(): Observable<any> {\r\n    return this._beforeClose.asObservable();\r\n  }\n/**\n * Gets an observable that emits when the overlay's backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\r\n    return this._overlayRef.backdropClick();\r\n  }\n/**\n * Updates the dialog's position.\r\\@param position New dialog position.\n * @param {?=} position\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\r\n    let /** @type {?} */ strategy = this._getPositionStrategy();\r\n\r\n    if (position && (position.left || position.right)) {\r\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\r\n    } else {\r\n      strategy.centerHorizontally();\r\n    }\r\n\r\n    if (position && (position.top || position.bottom)) {\r\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\r\n    } else {\r\n      strategy.centerVertically();\r\n    }\r\n\r\n    this._overlayRef.updatePosition();\r\n\r\n    return this;\r\n  }\n/**\n * Updates the dialog's width and height.\r\\@param width New width of the dialog.\r\\@param height New height of the dialog.\n * @param {?=} width\n * @param {?=} height\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\r\n    this._getPositionStrategy().width(width).height(height);\r\n    this._overlayRef.updatePosition();\r\n    return this;\r\n  }\n/**\n * Returns whether the dialog is animating.\n * @return {?}\n */\n_isAnimating(): boolean {\r\n    return this._containerInstance._isAnimating;\r\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\r\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\r\n  }\r\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n * @type {?}\n */\nMdDialogRef.prototype._afterOpen;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the dialog has started closing.\n * @type {?}\n */\nMdDialogRef.prototype._beforeClose;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n/** @type {?} */\nMdDialogRef.prototype.id;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Optional,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {\r\n  BasePortalHost,\r\n  ComponentPortal,\r\n  PortalHostDirective,\r\n  TemplatePortal\r\n} from '@angular/cdk/portal';\r\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\r\nimport {MdDialogConfig} from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\rattached to a DomPortalHost without an origin.\r\\@docs-private\n * @return {?}\n */\nexport function throwMdDialogContentAlreadyAttachedError() {\r\n  throw Error('Attempting to attach dialog content after content is already attached');\r\n}\n/**\n * Internal component that wraps user-provided dialog content.\rAnimation is based on https://material.io/guidelines/motion/choreography.html.\r\\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n/**\n * The dialog configuration.\n */\n_config: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits when an animation state changes.\n */\n_animationStateChanged = new EventEmitter<AnimationEvent>();\n/**\n * ID of the element that should be considered as the dialog's label.\n */\n_ariaLabelledBy: string | null = null;\n/**\n * Whether the container is currently mid-animation.\n */\n_isAnimating = false;\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _changeDetectorRef\n * @param {?} _document\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _document: any) {\r\n\r\n    super();\r\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\r\\@param portal Portal to be attached as the dialog content.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    if (this._portalHost.hasAttached()) {\r\n      throwMdDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalHost.attachComponentPortal(portal);\r\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\r\\@param portal Portal to be attached as the dialog content.\n * @template C\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\r\n    if (this._portalHost.hasAttached()) {\r\n      throwMdDialogContentAlreadyAttachedError();\r\n    }\r\n\r\n    this._savePreviouslyFocusedElement();\r\n    return this._portalHost.attachTemplatePortal(portal);\r\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\r\n    if (!this._focusTrap) {\r\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    }\r\n\r\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\r\n    // ready in instances where change detection has to run first. To deal with this, we simply\r\n    // wait for the microtask queue to be empty.\r\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\r\n      // If we didn't find any focusable elements inside the dialog, focus the\r\n      // container so the user can't tab into other elements behind it.\r\n      if (!hasMovedFocus) {\r\n        this._elementRef.nativeElement.focus();\r\n      }\r\n    });\r\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\r\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\r\n\r\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\r\n    if (toFocus && typeof toFocus.focus === 'function') {\r\n      toFocus.focus();\r\n    }\r\n\r\n    if (this._focusTrap) {\r\n      this._focusTrap.destroy();\r\n    }\r\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\r\n    if (this._document) {\r\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\r\n    }\r\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\r\n    if (event.toState === 'enter') {\r\n      this._trapFocus();\r\n    } else if (event.toState === 'exit') {\r\n      this._restoreFocus();\r\n    }\r\n\r\n    this._animationStateChanged.emit(event);\r\n    this._isAnimating = false;\r\n  }\n/**\n * Callback, invoked when an animation on the host starts.\n * @param {?} event\n * @return {?}\n */\n_onAnimationStart(event: AnimationEvent) {\r\n    this._isAnimating = true;\r\n    this._animationStateChanged.emit(event);\r\n  }\n/**\n * Starts the dialog exit animation.\n * @return {?}\n */\n_startExitAnimation(): void {\r\n    this._state = 'exit';\r\n\r\n    // Mark the container for check so it can react if the\r\n    // view container is using OnPush change detection.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-dialog-container, mat-dialog-container',\r\n  templateUrl: 'dialog-container.html',\r\n  styleUrls: ['dialog.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  animations: [\r\n    trigger('slideDialog', [\r\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\r\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\r\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\r\n      // solves both issues.\r\n      state('enter', style({ transform: 'none', opacity: 1 })),\r\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\r\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\r\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\r\n    ])\r\n  ],\r\n  host: {\r\n    'class': 'mat-dialog-container',\r\n    'tabindex': '-1',\r\n    '[attr.role]': '_config?.role',\r\n    '[attr.aria-labelledby]': '_ariaLabelledBy',\r\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\r\n    '[@slideDialog]': '_state',\r\n    '(@slideDialog.start)': '_onAnimationStart($event)',\r\n    '(@slideDialog.done)': '_onAnimationDone($event)',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits when an animation state changes.\n * @type {?}\n */\nMdDialogContainer.prototype._animationStateChanged;\n/**\n * ID of the element that should be considered as the dialog's label.\n * @type {?}\n */\nMdDialogContainer.prototype._ariaLabelledBy;\n/**\n * Whether the container is currently mid-animation.\n * @type {?}\n */\nMdDialogContainer.prototype._isAnimating;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDialogContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMdDialogContainer.prototype._document;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ViewContainerRef} from '@angular/core';\r\nimport {Direction} from '@angular/cdk/bidi';\r\n\r\n/** Valid ARIA roles for a dialog element. */\r\nexport type DialogRole = 'dialog' | 'alertdialog';\r\n\r\n/** Possible overrides for a dialog's position. */\r\nexport interface DialogPosition {\r\n  top?: string;\r\n  bottom?: string;\r\n  left?: string;\r\n  right?: string;\r\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\rThis affects what is available for injection and the change detection order for the\rcomponent instantiated inside of the dialog. This does not affect where the dialog\rcontent will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n */\nid?: string;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string | string[] = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: Direction = 'ltr';\n/**\n * ID of the element that describes the dialog.\n */\nariaDescribedBy?: string | null = null;\r\n\r\n\r\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\r\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\rThis affects what is available for injection and the change detection order for the\rcomponent instantiated inside of the dialog. This does not affect where the dialog\rcontent will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n * @type {?}\n */\nMdDialogConfig.prototype.id;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMdDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMdDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMdDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMdDialogConfig.prototype.direction;\n/**\n * ID of the element that describes the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.ariaDescribedBy;\n}\n\r\n"],"names":["state"],"mappings":"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"}