{"version":3,"file":"toolbar.js","sources":["../../../src/lib/toolbar/index.ts","../../../src/lib/toolbar/toolbar-module.ts","../../../src/lib/toolbar/toolbar.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdToolbarModule,MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar,MatToolbar,MatToolbarBase,MatToolbarModule,MatToolbarRow} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MdToolbar, MdToolbarRow} from './toolbar';\nexport class MdToolbarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule],\r\n  exports: [MdToolbar, MdToolbarRow, MdCommonModule],\r\n  declarations: [MdToolbar, MdToolbarRow],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  ViewEncapsulation,\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport {CanColor, MATERIAL_COMPATIBILITY_MODE, mixinColor} from '@angular/material/core';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-toolbar-row, mat-toolbar-row',\r\n  host: {'class': 'mat-toolbar-row'},\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdToolbarBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdToolbarBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarBase.prototype._renderer;\n/** @type {?} */\nMdToolbarBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdToolbarMixinBase = mixinColor(MdToolbarBase);\nexport class MdToolbar extends _MdToolbarMixinBase implements CanColor {\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\r\n    super(renderer, elementRef);\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-toolbar, mat-toolbar',\r\n  templateUrl: 'toolbar.html',\r\n  styleUrls: ['toolbar.css'],\r\n  inputs: ['color'],\r\n  host: {\r\n    'class': 'mat-toolbar',\r\n    'role': 'toolbar'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":";;;;;;;;;;AEkBA,MAAA,YAAA,CAAA;;AAEkC,YAAlC,CAAA,UAAkC,GAAoC;IADtE,EAEE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBADvB,QAAQ,EAEE,iCAAA;gBADV,IAAI,EAEE,EAAA,OAAE,EAAQ,iBAAA,EAAkB;aADnC,EAEC,EAAG;CADJ,CAEC;;;;AAED,YAAD,CAAA,cAAC,GAAA,MAAA,EACA,CAAC;AAGF,AAUA;;;AAGA,AAAA,MAAA,aAAA,CAAA;;;;;IAKA,WAAA,CAfqB,SAAW,EAAkB,WAAa,EAe/D;QAfqB,IAArB,CAAA,SAAqB,GAAA,SAAA,CAAW;QAAkB,IAAlD,CAAA,WAAkD,GAAA,WAAA,CAAa;KAAW;CAiBzE;AAED,AAOA,AA9BO,MAAM,mBAAA,GAAsB,UAAA,CAAW,aAAC,CAAa,CAAC;AA+B7D,AAAA,MAAA,SArBC,SAAA,mBAAA,CAqBD;;;;;IAKA,WAAA,CAxBG,QAAqB,EAAW,UAAY,EAwB/C;QACI,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;KAb9B;;AARK,SAAP,CAAA,UAAO,GAAoC;IAyB3C,EAxBE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,CAwBzB,QAAA,EAAA,yBAAA;gBACE,QAAQ,EAxBE,0KAwBZ;gBACE,MAAF,EAAU,CAAV,qXAAA,CAAA;gBACE,MAAF,EAAA,CAAA,OAAA,CAAA;gBACE,IAAF,EAAA;oBACA,OAAA,EAAA,aAAA;oBACM,MAAN,EAAA,SAAA;iBACA;gBACA,eAAA,EAAA,uBAAA,CAAA,MAAA;gBACA,aAAA,EAAA,iBAAA,CAAA,IAAA;gBACE,mBAAF,EAAA,KAAA;gBACE,aAAa,EAxBE,CAwBjB,EAAA,OAAA,EAAA,2BAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA;aACA,EAAA,EAAA;CACA,CAAA;;;;;IAKA,EAAA,IAAA,EAAA,SAAA,GAAA;IAzBA,EAAA,IAAA,EAAA,UAAA,GAAA;CA2BA,CAAA,AACA,AAUA,AACA;;AD3FA,MAAA,eAAA,CAAA;;AAEqC,eAArC,CAAA,UAAqC,GAAoC;IADzE,EAEE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBADtB,OAAO,EAEE,CAAA,cAAE,CAAc;gBADzB,OAAO,EAEE,CAAA,SAAE,EAAU,YAAA,EAAc,cAAA,CAAe;gBADlD,YAAY,EAEE,CAAA,SAAE,EAAU,YAAA,CAAa;aADxC,EAEC,EAAG;CADJ,CAEC;;;;AAED,eAAD,CAAA,cAAC,GAAA,MAAA,EACA,CAAC,AAGF,AAQC;;ADlCD;;GAEG,AAEH,AAA+J;;"}