{"version":3,"file":"sidenav.js","sources":["../../../src/lib/sidenav/index.ts","../../../src/lib/sidenav/sidenav-module.ts","../../../src/lib/sidenav/sidenav.ts","../../../src/lib/sidenav/drawer.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSidenavModule,throwMdDuplicatedDrawerError,MdDrawerToggleResult,MdDrawerContent,MdDrawer,MdDrawerContainer,MdSidenavContent,MdSidenav,MdSidenavContainer,MatDrawerToggleResult,MatDrawer,MatDrawerContainer,MatSidenav,MatSidenavContainer,MatSidenavModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MdDrawer, MdDrawerContainer, MdDrawerContent} from './drawer';\r\nimport {MdSidenav, MdSidenavContainer, MdSidenavContent} from './sidenav';\nexport class MdSidenavModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CommonModule, MdCommonModule, A11yModule, OverlayModule],\r\n  exports: [\r\n    MdCommonModule,\r\n    MdDrawer,\r\n    MdDrawerContainer,\r\n    MdDrawerContent,\r\n    MdSidenav,\r\n    MdSidenavContainer,\r\n    MdSidenavContent,\r\n  ],\r\n  declarations: [\r\n    MdDrawer,\r\n    MdDrawerContainer,\r\n    MdDrawerContent,\r\n    MdSidenav,\r\n    MdSidenavContainer,\r\n    MdSidenavContent,\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy, ChangeDetectorRef,\r\n  Component, ContentChild,\r\n  ContentChildren, forwardRef, Inject, Input,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {MdDrawer, MdDrawerContainer, MdDrawerContent} from './drawer';\r\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nexport class MdSidenavContent extends MdDrawerContent {\n/**\n * @param {?} changeDetectorRef\n * @param {?} container\n */\nconstructor(\r\n      changeDetectorRef: ChangeDetectorRef,\r\n       container: MdSidenavContainer) {\r\n    super(changeDetectorRef, container);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-sidenav-content, mat-sidenav-content',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    'class': 'mat-drawer-content mat-sidenav-content',\r\n    '[style.marginLeft.px]': '_margins.left',\r\n    '[style.marginRight.px]': '_margins.right',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: MdSidenavContainer, decorators: [{ type: Inject, args: [forwardRef(() => MdSidenavContainer), ] }, ]},\n];\n}\n\nfunction MdSidenavContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContent.ctorParameters;\n}\n\nexport class MdSidenav extends MdDrawer {\n/**\n * Whether the sidenav is fixed in the viewport.\n * @return {?}\n */\nget fixedInViewport() { return this._fixedInViewport; }\n/**\n * @param {?} value\n * @return {?}\n */\nset fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\nprivate _fixedInViewport = false;\n/**\n * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\rmode.\n * @return {?}\n */\nget fixedTopGap() { return this._fixedTopGap; }\n/**\n * @param {?} value\n * @return {?}\n */\nset fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\nprivate _fixedTopGap = 0;\n/**\n * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\rfixed mode.\n * @return {?}\n */\nget fixedBottomGap() { return this._fixedBottomGap; }\n/**\n * @param {?} value\n * @return {?}\n */\nset fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\nprivate _fixedBottomGap = 0;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-sidenav, mat-sidenav',\r\n  template: '<ng-content></ng-content>',\r\n  animations: [\r\n    trigger('transform', [\r\n      state('open, open-instant', style({\r\n        transform: 'translate3d(0, 0, 0)',\r\n        visibility: 'visible',\r\n      })),\r\n      state('void', style({\r\n        visibility: 'hidden',\r\n      })),\r\n      transition('void => open-instant', animate('0ms')),\r\n      transition('void <=> open, open-instant => void',\r\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\r\n    ])\r\n  ],\r\n  host: {\r\n    'class': 'mat-drawer mat-sidenav',\r\n    'tabIndex': '-1',\r\n    '[@transform]': '_animationState',\r\n    '(@transform.start)': '_onAnimationStart()',\r\n    '(@transform.done)': '_onAnimationEnd($event)',\r\n    '(keydown)': 'handleKeydown($event)',\r\n    // must prevent the browser from aligning text based on value\r\n    '[attr.align]': 'null',\r\n    '[class.mat-drawer-end]': 'position === \"end\"',\r\n    '[class.mat-drawer-over]': 'mode === \"over\"',\r\n    '[class.mat-drawer-push]': 'mode === \"push\"',\r\n    '[class.mat-drawer-side]': 'mode === \"side\"',\r\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\r\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\r\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fixedInViewport': [{ type: Input },],\n'fixedTopGap': [{ type: Input },],\n'fixedBottomGap': [{ type: Input },],\n};\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n/** @type {?} */\nMdSidenav.propDecorators;\n/** @type {?} */\nMdSidenav.prototype._fixedInViewport;\n/** @type {?} */\nMdSidenav.prototype._fixedTopGap;\n/** @type {?} */\nMdSidenav.prototype._fixedBottomGap;\n}\n\nexport class MdSidenavContainer extends MdDrawerContainer {\r\n   _drawers;\r\n\r\n   _content;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-sidenav-container, mat-sidenav-container',\r\n  templateUrl: 'sidenav-container.html',\r\n  styleUrls: [\r\n    'drawer.css',\r\n    'drawer-transitions.css',\r\n  ],\r\n  host: {\r\n    'class': 'mat-drawer-container mat-sidenav-container',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MdSidenav, ] },],\n'_content': [{ type: ContentChild, args: [MdSidenavContent, ] },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._drawers;\n/** @type {?} */\nMdSidenavContainer.prototype._content;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\r\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Renderer2,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {first} from 'rxjs/operator/first';\r\nimport {startWith} from 'rxjs/operator/startWith';\r\nimport {takeUntil} from 'rxjs/operator/takeUntil';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Throws an exception when two MdDrawer are matching the same position.\n * @param {?} position\n * @return {?}\n */\nexport function throwMdDuplicatedDrawerError(position: string) {\r\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\r\n}\n/**\n * Drawer toggle promise result.\r\\@deprecated\n */\nexport class MdDrawerToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\r\n}\n\nfunction MdDrawerToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerToggleResult.prototype.type;\n/** @type {?} */\nMdDrawerToggleResult.prototype.animationFinished;\n}\n\nexport class MdDrawerContent implements AfterContentInit {\n/**\n * Margins to be applied to the content. These are used to push / shrink the drawer content when a\rdrawer is open. We use margin rather than transform even for push mode because transform breaks\rfixed position elements inside of the transformed element.\n */\n_margins: {left: number, right: number} = {left: 0, right: 0};\n/**\n * @param {?} _changeDetectorRef\n * @param {?} _container\n */\nconstructor(\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _container: MdDrawerContainer) {\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._container._contentMargins.subscribe(margins => {\r\n      this._margins = margins;\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-drawer-content, mat-drawer-content',\r\n  template: '<ng-content></ng-content>',\r\n  host: {\r\n    'class': 'mat-drawer-content',\r\n    '[style.marginLeft.px]': '_margins.left',\r\n    '[style.marginRight.px]': '_margins.right',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: MdDrawerContainer, decorators: [{ type: Inject, args: [forwardRef(() => MdDrawerContainer), ] }, ]},\n];\n}\n\nfunction MdDrawerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawerContent.ctorParameters;\n/**\n * Margins to be applied to the content. These are used to push / shrink the drawer content when a\rdrawer is open. We use margin rather than transform even for push mode because transform breaks\rfixed position elements inside of the transformed element.\n * @type {?}\n */\nMdDrawerContent.prototype._margins;\n/** @type {?} */\nMdDrawerContent.prototype._changeDetectorRef;\n/** @type {?} */\nMdDrawerContent.prototype._container;\n}\n\n/**\n * <md-drawer> component.\r\rThis component corresponds to a drawer that can be opened on the drawer container.\r\rPlease refer to README.md for examples on how to use it.\n */\nexport class MdDrawer implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\nprivate _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n */\nprivate _enableAnimations = false;\n/**\n * The side that the drawer is attached to.\n * @return {?}\n */\nget position() { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value) {\r\n    // Make sure we have a valid value.\r\n    value = value === 'end' ? 'end' : 'start';\r\n    if (value != this._position) {\r\n      this._position = value;\r\n      this.onAlignChanged.emit();\r\n      this.onPositionChanged.emit();\r\n    }\r\n  }\nprivate _position: 'start' | 'end' = 'start';\n/**\n * @deprecated\n * @return {?}\n */\nget align() { return this.position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) { this.position = value; }\n/**\n * Mode of the drawer; one of 'over', 'push' or 'side'.\n * @return {?}\n */\nget mode() { return this._mode; }\n/**\n * @param {?} value\n * @return {?}\n */\nset mode(value) {\r\n    this._mode = value;\r\n    this._modeChanged.next();\r\n  }\nprivate _mode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the drawer is opened.\n */\nprivate _opened: boolean = false;\n/**\n * Emits whenever the drawer has started animating.\n */\n_animationStarted = new EventEmitter<void>();\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n */\n_isAnimating = false;\n/**\n * Current state of the sidenav animation.\n */\n_animationState: 'open-instant' | 'open' | 'void' = 'void';\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\rcompatibility and should be removed next time we do drawer breaking changes.\r\\@deprecated\n */\nprivate _currentTogglePromise: Promise<MdDrawerToggleResult> | null;\n/**\n * Event emitted when the drawer is fully opened.\n */\nonOpen = new EventEmitter<MdDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer is fully closed.\n */\nonClose = new EventEmitter<MdDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer's position changes.\n */\nonPositionChanged = new EventEmitter<void>();\n/**\n * @deprecated\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * An observable that emits when the drawer mode changes. This is used by the drawer container to\rto know when to when the mode changes so it can adapt the margins on the content.\n */\n_modeChanged = new Subject();\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\r\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\r\n    return this.opened && this.mode !== 'side';\r\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _doc\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _doc: any) {\r\n    this.onOpen.subscribe(() => {\r\n      if (this._doc) {\r\n        this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\r\n      }\r\n\r\n      if (this.isFocusTrapEnabled && this._focusTrap) {\r\n        this._focusTrap.focusInitialElementWhenReady();\r\n      }\r\n    });\r\n\r\n    this.onClose.subscribe(() => this._restoreFocus());\r\n  }\n/**\n * If focus is currently inside the drawer, restores it to where it was before the drawer\ropened.\n * @return {?}\n */\nprivate _restoreFocus() {\r\n    let /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\r\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\r\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\r\n        this._elementFocusedBeforeDrawerWasOpened.focus();\r\n      } else {\r\n        this._elementRef.nativeElement.blur();\r\n      }\r\n    }\r\n\r\n    this._elementFocusedBeforeDrawerWasOpened = null;\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\r\n    this._enableAnimations = true;\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    if (this._focusTrap) {\r\n      this._focusTrap.destroy();\r\n    }\r\n  }\n/**\n * Whether the drawer is opened. We overload this because we trigger an event when it\rstarts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\r\n    this.toggle(coerceBooleanProperty(v));\r\n  }\n/**\n * Open the drawer.\n * @return {?}\n */\nopen(): Promise<MdDrawerToggleResult> {\r\n    return this.toggle(true);\r\n  }\n/**\n * Close the drawer.\n * @return {?}\n */\nclose(): Promise<MdDrawerToggleResult> {\r\n    return this.toggle(false);\r\n  }\n/**\n * Toggle this drawer.\r\\@param isOpen Whether the drawer should be open.\n * @param {?=} isOpen\n * @return {?}\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdDrawerToggleResult> {\r\n    if (!this._isAnimating) {\r\n      this._opened = isOpen;\r\n\r\n      if (isOpen) {\r\n        this._animationState = this._enableAnimations ? 'open' : 'open-instant';\r\n      } else {\r\n        this._animationState = 'void';\r\n      }\r\n\r\n      this._currentTogglePromise = new Promise(resolve => {\r\n        first.call(isOpen ? this.onOpen : this.onClose).subscribe(resolve);\r\n      });\r\n\r\n      if (this._focusTrap) {\r\n        this._focusTrap.enabled = this.isFocusTrapEnabled;\r\n      }\r\n    }\r\n\r\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\r\n    // It should be removed next time we do breaking changes in the drawer.\r\n    return /** @type {?} */(( this._currentTogglePromise));\r\n  }\n/**\n * Handles the keyboard events.\r\\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\r\n    if (event.keyCode === ESCAPE && !this.disableClose) {\r\n      this.close();\r\n      event.stopPropagation();\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_onAnimationStart() {\r\n    this._isAnimating = true;\r\n    this._animationStarted.emit();\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onAnimationEnd(event: AnimationEvent) {\r\n    const {fromState, toState} = event;\r\n\r\n    if (toState === 'open' && fromState === 'void') {\r\n      this.onOpen.emit(new MdDrawerToggleResult('open', true));\r\n    } else if (toState === 'void' && fromState === 'open') {\r\n      this.onClose.emit(new MdDrawerToggleResult('close', true));\r\n    }\r\n\r\n    // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\r\n    // the end if animations are disabled. Make this call async to ensure that it still fires\r\n    // at the appropriate time.\r\n    Promise.resolve().then(() => {\r\n      this._isAnimating = false;\r\n      this._currentTogglePromise = null;\r\n    });\r\n  }\n/**\n * @return {?}\n */\nget _width() {\r\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-drawer, mat-drawer',\r\n  template: '<ng-content></ng-content>',\r\n  animations: [\r\n    trigger('transform', [\r\n      state('open, open-instant', style({\r\n        transform: 'translate3d(0, 0, 0)',\r\n        visibility: 'visible',\r\n      })),\r\n      state('void', style({\r\n        visibility: 'hidden',\r\n      })),\r\n      transition('void => open-instant', animate('0ms')),\r\n      transition('void <=> open, open-instant => void',\r\n          animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\r\n    ])\r\n  ],\r\n  host: {\r\n    'class': 'mat-drawer',\r\n    '[@transform]': '_animationState',\r\n    '(@transform.start)': '_onAnimationStart()',\r\n    '(@transform.done)': '_onAnimationEnd($event)',\r\n    '(keydown)': 'handleKeydown($event)',\r\n    // must prevent the browser from aligning text based on value\r\n    '[attr.align]': 'null',\r\n    '[class.mat-drawer-end]': 'position === \"end\"',\r\n    '[class.mat-drawer-over]': 'mode === \"over\"',\r\n    '[class.mat-drawer-push]': 'mode === \"push\"',\r\n    '[class.mat-drawer-side]': 'mode === \"side\"',\r\n    'tabIndex': '-1',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input },],\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onPositionChanged': [{ type: Output, args: ['positionChanged', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdDrawer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawer.ctorParameters;\n/** @type {?} */\nMdDrawer.propDecorators;\n/** @type {?} */\nMdDrawer.prototype._focusTrap;\n/** @type {?} */\nMdDrawer.prototype._elementFocusedBeforeDrawerWasOpened;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n * @type {?}\n */\nMdDrawer.prototype._enableAnimations;\n/** @type {?} */\nMdDrawer.prototype._position;\n/** @type {?} */\nMdDrawer.prototype._mode;\n/** @type {?} */\nMdDrawer.prototype._disableClose;\n/**\n * Whether the drawer is opened.\n * @type {?}\n */\nMdDrawer.prototype._opened;\n/**\n * Emits whenever the drawer has started animating.\n * @type {?}\n */\nMdDrawer.prototype._animationStarted;\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n * @type {?}\n */\nMdDrawer.prototype._isAnimating;\n/**\n * Current state of the sidenav animation.\n * @type {?}\n */\nMdDrawer.prototype._animationState;\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\rcompatibility and should be removed next time we do drawer breaking changes.\r\\@deprecated\n * @type {?}\n */\nMdDrawer.prototype._currentTogglePromise;\n/**\n * Event emitted when the drawer is fully opened.\n * @type {?}\n */\nMdDrawer.prototype.onOpen;\n/**\n * Event emitted when the drawer is fully closed.\n * @type {?}\n */\nMdDrawer.prototype.onClose;\n/**\n * Event emitted when the drawer's position changes.\n * @type {?}\n */\nMdDrawer.prototype.onPositionChanged;\n/**\n * @deprecated\n * @type {?}\n */\nMdDrawer.prototype.onAlignChanged;\n/**\n * An observable that emits when the drawer mode changes. This is used by the drawer container to\rto know when to when the mode changes so it can adapt the margins on the content.\n * @type {?}\n */\nMdDrawer.prototype._modeChanged;\n/** @type {?} */\nMdDrawer.prototype._elementRef;\n/** @type {?} */\nMdDrawer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDrawer.prototype._doc;\n}\n\n/**\n * <md-drawer-container> component.\r\rThis is the parent component to one or two <md-drawer>s that validates the state internally\rand coordinates the backdrop and content styling.\n */\nexport class MdDrawerContainer implements AfterContentInit, OnDestroy {\r\n   _drawers: QueryList<MdDrawer>;\r\n\r\n   _content: MdDrawerContent;\n/**\n * The drawer child with the `start` position.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The drawer child with the `end` position.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the drawer backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The drawer at the start/end position, independent of direction.\n */\nprivate _start: MdDrawer | null;\nprivate _end: MdDrawer | null;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\rThey're used as aliases for the above to set the left/right style properly.\rIn LTR, _left == _start and _right == _end.\rIn RTL, _left == _end and _right == _start.\n */\nprivate _left: MdDrawer | null;\nprivate _right: MdDrawer | null;\n/**\n * Subscription to the Directionality change EventEmitter.\n */\nprivate _dirChangeSubscription = Subscription.EMPTY;\r\n\r\n  _contentMargins = new Subject<{left: number, right: number}>();\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\r\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\r\n    // properties to point to the proper start/end.\r\n    if (_dir != null) {\r\n      this._dirChangeSubscription = _dir.change.subscribe(() => this._validateDrawers());\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    startWith.call(this._drawers.changes, null).subscribe(() => {\r\n      this._validateDrawers();\r\n      this._drawers.forEach((drawer: MdDrawer) => {\r\n        this._watchDrawerToggle(drawer);\r\n        this._watchDrawerPosition(drawer);\r\n        this._watchDrawerMode(drawer);\r\n      });\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._dirChangeSubscription.unsubscribe();\r\n  }\n/**\n * Calls `open` of both start and end drawers\n * @return {?}\n */\nopen(): void {\r\n    this._drawers.forEach(drawer => drawer.open());\r\n  }\n/**\n * Calls `close` of both start and end drawers\n * @return {?}\n */\nclose(): void {\r\n    this._drawers.forEach(drawer => drawer.close());\r\n  }\n/**\n * Subscribes to drawer events in order to set a class on the main container element when the\rdrawer is open and the backdrop is visible. This ensures any overflow on the container element\ris properly hidden.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerToggle(drawer: MdDrawer): void {\r\n    takeUntil.call(drawer._animationStarted, this._drawers.changes).subscribe(() => {\r\n      // Set the transition class on the container so that the animations occur. This should not\r\n      // be set initially because animations should only be triggered via a change in state.\r\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-transition');\r\n      this._updateContentMargins();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    if (drawer.mode !== 'side') {\r\n      takeUntil.call(merge(drawer.onOpen, drawer.onClose), this._drawers.changes).subscribe(() =>\r\n          this._setContainerClass(drawer.opened));\r\n    }\r\n  }\n/**\n * Subscribes to drawer onPositionChanged event in order to re-validate drawers when the position\rchanges.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerPosition(drawer: MdDrawer): void {\r\n    if (!drawer) {\r\n      return;\r\n    }\r\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\r\n    // since both drawers may be swapping positions at the same time.\r\n    takeUntil.call(drawer.onPositionChanged, this._drawers.changes).subscribe(() => {\r\n      first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\r\n        this._validateDrawers();\r\n      });\r\n    });\r\n  }\n/**\n * Subscribes to changes in drawer mode so we can run change detection.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerMode(drawer: MdDrawer): void {\r\n    if (drawer) {\r\n      takeUntil.call(drawer._modeChanged, this._drawers.changes).subscribe(() => {\r\n        this._updateContentMargins();\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n  }\n/**\n * Toggles the 'mat-drawer-opened' class on the main 'md-drawer-container' element.\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setContainerClass(isAdd: boolean): void {\r\n    if (isAdd) {\r\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-opened');\r\n    } else {\r\n      this._renderer.removeClass(this._element.nativeElement, 'mat-drawer-opened');\r\n    }\r\n  }\n/**\n * Validate the state of the drawer children components.\n * @return {?}\n */\nprivate _validateDrawers() {\r\n    this._start = this._end = null;\r\n\r\n    // Ensure that we have at most one start and one end drawer.\r\n    this._drawers.forEach(drawer => {\r\n      if (drawer.position == 'end') {\r\n        if (this._end != null) {\r\n          throwMdDuplicatedDrawerError('end');\r\n        }\r\n        this._end = drawer;\r\n      } else {\r\n        if (this._start != null) {\r\n          throwMdDuplicatedDrawerError('start');\r\n        }\r\n        this._start = drawer;\r\n      }\r\n    });\r\n\r\n    this._right = this._left = null;\r\n\r\n    // Detect if we're LTR or RTL.\r\n    if (this._dir == null || this._dir.value == 'ltr') {\r\n      this._left = this._start;\r\n      this._right = this._end;\r\n    } else {\r\n      this._left = this._end;\r\n      this._right = this._start;\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\r\n    this.backdropClick.emit();\r\n    this._closeModalDrawer();\r\n  }\n/**\n * @return {?}\n */\n_closeModalDrawer() {\r\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\r\n    [this._start, this._end]\r\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\r\n      .forEach(drawer => /** @type {?} */(( drawer)).close());\r\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\r\n    return (this._isDrawerOpen(this._start) && /** @type {?} */(( this._start)).mode != 'side')\r\n        || (this._isDrawerOpen(this._end) && /** @type {?} */(( this._end)).mode != 'side');\r\n  }\n/**\n * @param {?} drawer\n * @return {?}\n */\nprivate _isDrawerOpen(drawer: MdDrawer | null): boolean {\r\n    return drawer != null && drawer.opened;\r\n  }\n/**\n * Recalculates and updates the inline styles for the content. Note that this should be used\rsparingly, because it causes a reflow.\n * @return {?}\n */\nprivate _updateContentMargins() {\r\n    // 1. For drawers in `over` mode, they don't affect the content.\r\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\r\n    //    left margin (for left drawer) or right margin (for right the drawer).\r\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\r\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\r\n    //    margin from the other side.\r\n\r\n    let /** @type {?} */ left = 0;\r\n    let /** @type {?} */ right = 0;\r\n\r\n    if (this._left && this._left.opened) {\r\n      if (this._left.mode == 'side') {\r\n        left += this._left._width;\r\n      } else if (this._left.mode == 'push') {\r\n        let /** @type {?} */ width = this._left._width;\r\n        left += width;\r\n        right -= width;\r\n      }\r\n    }\r\n\r\n    if (this._right && this._right.opened) {\r\n      if (this._right.mode == 'side') {\r\n        right += this._right._width;\r\n      } else if (this._right.mode == 'push') {\r\n        let /** @type {?} */ width = this._right._width;\r\n        right += width;\r\n        left -= width;\r\n      }\r\n    }\r\n\r\n    this._contentMargins.next({left, right});\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-drawer-container, mat-drawer-container',\r\n  templateUrl: 'drawer-container.html',\r\n  styleUrls: [\r\n    'drawer.css',\r\n    'drawer-transitions.css',\r\n  ],\r\n  host: {\r\n    'class': 'mat-drawer-container',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MdDrawer, ] },],\n'_content': [{ type: ContentChild, args: [MdDrawerContent, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdDrawerContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawerContainer.ctorParameters;\n/** @type {?} */\nMdDrawerContainer.propDecorators;\n/** @type {?} */\nMdDrawerContainer.prototype._drawers;\n/** @type {?} */\nMdDrawerContainer.prototype._content;\n/**\n * Event emitted when the drawer backdrop is clicked.\n * @type {?}\n */\nMdDrawerContainer.prototype.backdropClick;\n/**\n * The drawer at the start/end position, independent of direction.\n * @type {?}\n */\nMdDrawerContainer.prototype._start;\n/** @type {?} */\nMdDrawerContainer.prototype._end;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\rThey're used as aliases for the above to set the left/right style properly.\rIn LTR, _left == _start and _right == _end.\rIn RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdDrawerContainer.prototype._left;\n/** @type {?} */\nMdDrawerContainer.prototype._right;\n/**\n * Subscription to the Directionality change EventEmitter.\n * @type {?}\n */\nMdDrawerContainer.prototype._dirChangeSubscription;\n/** @type {?} */\nMdDrawerContainer.prototype._contentMargins;\n/** @type {?} */\nMdDrawerContainer.prototype._dir;\n/** @type {?} */\nMdDrawerContainer.prototype._element;\n/** @type {?} */\nMdDrawerContainer.prototype._renderer;\n/** @type {?} */\nMdDrawerContainer.prototype._ngZone;\n/** @type {?} */\nMdDrawerContainer.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}