{"version":3,"file":"expansion.js","sources":["../../../src/lib/expansion/index.ts","../../../src/lib/expansion/expansion-module.ts","../../../src/lib/expansion/expansion-panel-header.ts","../../../src/lib/expansion/expansion-panel.ts","../../../src/lib/expansion/accordion-item.ts","../../../src/lib/expansion/accordion.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {CdkAccordion,MdAccordion,MdAccordionDisplayMode,AccordionItem,MdExpansionPanel,MdExpansionPanelState,MdExpansionPanelActionRow,MdExpansionPanelHeader,MdExpansionPanelDescription,MdExpansionPanelTitle,MdExpansionModule,MatAccordion,MatAccordionDisplayMode,MatExpansionModule,MatExpansionPanel,MatExpansionPanelActionRow,MatExpansionPanelDescription,MatExpansionPanelHeader,MatExpansionPanelState,MatExpansionPanelTitle} from './public_api';\n\nexport {EXPANSION_PANEL_ANIMATION_TIMING as ɵc,MdExpansionPanelBase as ɵa,_MdExpansionPanelMixinBase as ɵb} from './expansion-panel';","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {CompatibilityModule, UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/material/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {CdkAccordion, MdAccordion} from './accordion';\r\nimport {MdExpansionPanel, MdExpansionPanelActionRow} from './expansion-panel';\r\nimport {\r\n  MdExpansionPanelDescription,\r\n  MdExpansionPanelHeader,\r\n  MdExpansionPanelTitle,\r\n} from './expansion-panel-header';\nexport class MdExpansionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CompatibilityModule, CommonModule, A11yModule],\r\n  exports: [\r\n    CdkAccordion,\r\n    MdAccordion,\r\n    MdExpansionPanel,\r\n    MdExpansionPanelActionRow,\r\n    MdExpansionPanelHeader,\r\n    MdExpansionPanelTitle,\r\n    MdExpansionPanelDescription\r\n  ],\r\n  declarations: [\r\n    CdkAccordion,\r\n    MdAccordion,\r\n    MdExpansionPanel,\r\n    MdExpansionPanelActionRow,\r\n    MdExpansionPanelHeader,\r\n    MdExpansionPanelTitle,\r\n    MdExpansionPanelDescription\r\n  ],\r\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\r\nimport {filter} from '@angular/cdk/rxjs';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  ElementRef,\r\n  Host,\r\n  Input,\r\n  OnDestroy,\r\n  Renderer2,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {EXPANSION_PANEL_ANIMATION_TIMING, MdExpansionPanel} from './expansion-panel';\n/**\n * <md-expansion-panel-header> component.\r\rThis component corresponds to the header element of an <md-expansion-panel>.\r\rPlease refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanelHeader implements OnDestroy {\nprivate _parentChangeSubscription = Subscription.EMPTY;\n/**\n * @param {?} renderer\n * @param {?} panel\n * @param {?} _element\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(\r\n    renderer: Renderer2,\npublic panel: MdExpansionPanel,\nprivate _element: ElementRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    // Since the toggle state depends on an @Input on the panel, we\r\n    // need to  subscribe and trigger change detection manually.\r\n    this._parentChangeSubscription = merge(\r\n      panel.opened,\r\n      panel.closed,\r\n      filter.call(panel._inputChanges, changes => !!(changes.hideToggle || changes.disabled))\r\n    )\r\n    .subscribe(() => this._changeDetectorRef.markForCheck());\r\n\r\n    _focusMonitor.monitor(_element.nativeElement, renderer, false);\r\n  }\n/**\n * Height of the header while the panel is expanded.\n */\nexpandedHeight: string;\n/**\n * Height of the header while the panel is collapsed.\n */\ncollapsedHeight: string;\n/**\n * Toggles the expanded state of the panel.\n * @return {?}\n */\n_toggle(): void {\r\n    if (!this.panel.disabled) {\r\n      this.panel.toggle();\r\n    }\r\n  }\n/**\n * Gets whether the panel is expanded.\n * @return {?}\n */\n_isExpanded(): boolean {\r\n    return this.panel.expanded;\r\n  }\n/**\n * Gets the expanded state string of the panel.\n * @return {?}\n */\n_getExpandedState(): string {\r\n    return this.panel._getExpandedState();\r\n  }\n/**\n * Gets the panel id.\n * @return {?}\n */\n_getPanelId(): string {\r\n    return this.panel.id;\r\n  }\n/**\n * Gets whether the expand indicator should be shown.\n * @return {?}\n */\n_showToggle(): boolean {\r\n    return !this.panel.hideToggle && !this.panel.disabled;\r\n  }\n/**\n * Handle keyup event calling to toggle() if appropriate.\n * @param {?} event\n * @return {?}\n */\n_keyup(event: KeyboardEvent) {\r\n    switch (event.keyCode) {\r\n      // Toggle for space and enter keys.\r\n      case SPACE:\r\n      case ENTER:\r\n        event.preventDefault();\r\n        this._toggle();\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._parentChangeSubscription.unsubscribe();\r\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-expansion-panel-header, mat-expansion-panel-header',\r\n  styleUrls: ['./expansion-panel-header.css'],\r\n  templateUrl: './expansion-panel-header.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'class': 'mat-expansion-panel-header',\r\n    'role': 'button',\r\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\r\n    '[attr.aria-controls]': '_getPanelId()',\r\n    '[attr.aria-expanded]': '_isExpanded()',\r\n    '[attr.aria-disabled]': 'panel.disabled',\r\n    '[class.mat-expanded]': '_isExpanded()',\r\n    '(click)': '_toggle()',\r\n    '(keyup)': '_keyup($event)',\r\n    '[@expansionHeight]': `{\r\n        value: _getExpandedState(),\r\n        params: {\r\n          collapsedHeight: collapsedHeight,\r\n          expandedHeight: expandedHeight\r\n        }\r\n    }`,\r\n  },\r\n  animations: [\r\n    trigger('indicatorRotate', [\r\n      state('collapsed', style({transform: 'rotate(0deg)'})),\r\n      state('expanded', style({transform: 'rotate(180deg)'})),\r\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n    ]),\r\n    trigger('expansionHeight', [\r\n      state('collapsed', style({\r\n        height: '{{collapsedHeight}}',\r\n      }), {\r\n        params: {collapsedHeight: '48px'},\r\n      }),\r\n      state('expanded', style({\r\n        height: '{{expandedHeight}}'\r\n      }), {\r\n        params: {expandedHeight: '64px'}\r\n      }),\r\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n    ]),\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: MdExpansionPanel, decorators: [{ type: Host }, ]},\n{type: ElementRef, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'expandedHeight': [{ type: Input },],\n'collapsedHeight': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanelHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelHeader.ctorParameters;\n/** @type {?} */\nMdExpansionPanelHeader.propDecorators;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._parentChangeSubscription;\n/**\n * Height of the header while the panel is expanded.\n * @type {?}\n */\nMdExpansionPanelHeader.prototype.expandedHeight;\n/**\n * Height of the header while the panel is collapsed.\n * @type {?}\n */\nMdExpansionPanelHeader.prototype.collapsedHeight;\n/** @type {?} */\nMdExpansionPanelHeader.prototype.panel;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._element;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._focusMonitor;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._changeDetectorRef;\n}\n\n/**\n * <md-panel-description> directive.\r\rThis direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelDescription {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-panel-description, mat-panel-description',\r\n  host : {\r\n    class: 'mat-expansion-panel-header-description'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelDescription_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelDescription.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelDescription.ctorParameters;\n}\n\n/**\n * <md-panel-title> directive.\r\rThis direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-panel-title, mat-panel-title',\r\n  host : {\r\n    class: 'mat-expansion-panel-header-title'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelTitle.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  forwardRef,\r\n  Host,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanDisable, mixinDisabled, UniqueSelectionDispatcher} from '@angular/material/core';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdAccordion} from './accordion';\r\nimport {AccordionItem} from './accordion-item';\n/**\n * \\@docs-private\n */\nexport class MdExpansionPanelBase extends AccordionItem {\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(accordion: MdAccordion,\r\n              _changeDetectorRef: ChangeDetectorRef,\r\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\r\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\r\n  }\r\n}\r\nexport const /** @type {?} */ _MdExpansionPanelMixinBase = mixinDisabled(MdExpansionPanelBase);\r\n\r\n/** MdExpansionPanel's states. */\r\nexport type MdExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <md-expansion-panel> component.\r\rThis component can be used as a single element to show expandable content, or as one of\rmultiple children of an element with the CdkAccordion directive attached.\r\rPlease refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanel extends _MdExpansionPanelMixinBase\r\n    implements CanDisable, OnChanges, OnDestroy {\n/**\n * Whether the toggle indicator should be hidden.\n */\nhideToggle: boolean = false;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n */\n_inputChanges = new Subject<SimpleChanges>();\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(  accordion: MdAccordion,\r\n              _changeDetectorRef: ChangeDetectorRef,\r\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\r\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\r\n    this.accordion = accordion;\r\n  }\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\r\n    if (this.accordion) {\r\n      return this.accordion.hideToggle;\r\n    }\r\n    return this.hideToggle;\r\n  }\n/**\n * Determines whether the expansion panel should have spacing between it and its siblings.\n * @return {?}\n */\n_hasSpacing(): boolean {\r\n    if (this.accordion) {\r\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\r\n    }\r\n    return false;\r\n  }\n/**\n * Gets the expanded state string.\n * @return {?}\n */\n_getExpandedState(): MdExpansionPanelState {\r\n    return this.expanded ? 'expanded' : 'collapsed';\r\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    this._inputChanges.next(changes);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._inputChanges.complete();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  styleUrls: ['./expansion-panel.css'],\r\n  selector: 'md-expansion-panel, mat-expansion-panel',\r\n  templateUrl: './expansion-panel.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['disabled', 'expanded'],\r\n  host: {\r\n    'class': 'mat-expansion-panel',\r\n    '[class.mat-expanded]': 'expanded',\r\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\r\n  },\r\n  providers: [\r\n    {provide: AccordionItem, useExisting: forwardRef(() => MdExpansionPanel)}\r\n  ],\r\n  animations: [\r\n    trigger('bodyExpansion', [\r\n      state('collapsed', style({height: '0px', visibility: 'hidden'})),\r\n      state('expanded', style({height: '*', visibility: 'visible'})),\r\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n    ]),\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdAccordion, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'hideToggle': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanel.ctorParameters;\n/** @type {?} */\nMdExpansionPanel.propDecorators;\n/**\n * Whether the toggle indicator should be hidden.\n * @type {?}\n */\nMdExpansionPanel.prototype.hideToggle;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n * @type {?}\n */\nMdExpansionPanel.prototype._inputChanges;\n}\n\nexport class MdExpansionPanelActionRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'mat-action-row, md-action-row',\r\n  host: {\r\n    class: 'mat-action-row'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelActionRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelActionRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelActionRow.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  Injectable,\r\n  OnDestroy,\r\n  Optional,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {UniqueSelectionDispatcher} from '@angular/material/core';\r\nimport {CdkAccordion} from './accordion';\n/**\n * Used to generate unique ID for each expansion panel.\n */\nlet nextId = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\revents and attributes needed to be managed by a CdkAccordion parent.\n */\nexport class AccordionItem implements OnDestroy {\n/**\n * Event emitted every time the AccordionItem is closed.\n */\nclosed = new EventEmitter<void>();\n/**\n * Event emitted every time the AccordionItem is opened.\n */\nopened = new EventEmitter<void>();\n/**\n * Event emitted when the AccordionItem is destroyed.\n */\ndestroyed = new EventEmitter<void>();\n/**\n * The unique AccordionItem id.\n */\nreadonly id = `cdk-accordion-child-${nextId++}`;\n/**\n * Whether the AccordionItem is expanded.\n * @return {?}\n */\nget expanded(): boolean { return this._expanded; }\n/**\n * @param {?} expanded\n * @return {?}\n */\nset expanded(expanded: boolean) {\r\n    // Only emit events and update the internal value if the value changes.\r\n    if (this._expanded !== expanded) {\r\n      this._expanded = expanded;\r\n      if (expanded) {\r\n        this.opened.emit();\n/**\n * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\rthe name value is the id of the accordion.\n */\nconst accordionId = this.accordion ? this.accordion.id : this.id;\r\n        this._expansionDispatcher.notify(this.id, accordionId);\r\n      } else {\r\n        this.closed.emit();\r\n      }\r\n\r\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\r\n      // This includes cases like the open, close and toggle methods.\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\nprivate _expanded: boolean;\n/**\n * Unregister function for _expansionDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _expansionDispatcher\n */\nconstructor(\npublic accordion: CdkAccordion,\nprivate _changeDetectorRef: ChangeDetectorRef,\r\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\r\n    this._removeUniqueSelectionListener =\r\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\r\n        if (this.accordion && !this.accordion.multi &&\r\n            this.accordion.id === accordionId && this.id !== id) {\r\n          this.expanded = false;\r\n        }\r\n      });\r\n  }\n/**\n * Emits an event for the accordion item being destroyed.\n * @return {?}\n */\nngOnDestroy() {\r\n    this.destroyed.emit();\r\n    this._removeUniqueSelectionListener();\r\n  }\n/**\n * Toggles the expanded state of the accordion item.\n * @return {?}\n */\ntoggle(): void {\r\n    this.expanded = !this.expanded;\r\n  }\n/**\n * Sets the expanded state of the accordion item to false.\n * @return {?}\n */\nclose(): void {\r\n    this.expanded = false;\r\n  }\n/**\n * Sets the expanded state of the accordion item to true.\n * @return {?}\n */\nopen(): void {\r\n    this.expanded = true;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkAccordion, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'closed': [{ type: Output },],\n'opened': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'expanded': [{ type: Input },],\n};\n}\n\nfunction AccordionItem_tsickle_Closure_declarations() {\n/** @type {?} */\nAccordionItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccordionItem.ctorParameters;\n/** @type {?} */\nAccordionItem.propDecorators;\n/**\n * Event emitted every time the AccordionItem is closed.\n * @type {?}\n */\nAccordionItem.prototype.closed;\n/**\n * Event emitted every time the AccordionItem is opened.\n * @type {?}\n */\nAccordionItem.prototype.opened;\n/**\n * Event emitted when the AccordionItem is destroyed.\n * @type {?}\n */\nAccordionItem.prototype.destroyed;\n/**\n * The unique AccordionItem id.\n * @type {?}\n */\nAccordionItem.prototype.id;\n/** @type {?} */\nAccordionItem.prototype._expanded;\n/**\n * Unregister function for _expansionDispatcher *\n * @type {?}\n */\nAccordionItem.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nAccordionItem.prototype.accordion;\n/** @type {?} */\nAccordionItem.prototype._changeDetectorRef;\n/** @type {?} */\nAccordionItem.prototype._expansionDispatcher;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, Input} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n/** MdAccordion's display modes. */\r\nexport type MdAccordionDisplayMode = 'default' | 'flat';\n/**\n * Unique ID counter\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nexport class CdkAccordion {\n/**\n * A readonly id value to use for unique selection coordination.\n */\nreadonly id = `cdk-accordion-${nextId++}`;\n/**\n * Whether the accordion should allow multiple expanded accordion items simulateously.\n * @return {?}\n */\nget multi(): boolean { return this._multi; }\n/**\n * @param {?} multi\n * @return {?}\n */\nset multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\nprivate  _multi: boolean = false;\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\nget hideToggle(): boolean { return this._hideToggle; }\n/**\n * @param {?} show\n * @return {?}\n */\nset hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\nprivate  _hideToggle: boolean = false;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\rmodes exist:\r  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\r    panel at a different elevation from the reset of the accordion.\r flat - no spacing is placed around expanded panels, showing all panels at the same\r    elevation.\n */\ndisplayMode: MdAccordionDisplayMode = 'default';\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'cdk-accordion, [cdk-accordion]',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multi': [{ type: Input },],\n'hideToggle': [{ type: Input },],\n'displayMode': [{ type: Input },],\n};\n}\n\nfunction CdkAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkAccordion.ctorParameters;\n/** @type {?} */\nCdkAccordion.propDecorators;\n/**\n * A readonly id value to use for unique selection coordination.\n * @type {?}\n */\nCdkAccordion.prototype.id;\n/** @type {?} */\nCdkAccordion.prototype._multi;\n/** @type {?} */\nCdkAccordion.prototype._hideToggle;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\rmodes exist:\r  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\r    panel at a different elevation from the reset of the accordion.\r flat - no spacing is placed around expanded panels, showing all panels at the same\r    elevation.\n * @type {?}\n */\nCdkAccordion.prototype.displayMode;\n}\n\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MdAccordion extends CdkAccordion {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'mat-accordion, md-accordion',\r\n  host: {\r\n    class: 'mat-accordion'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAccordion.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["nextId"],"mappings":"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"}