{"version":3,"file":"checkbox.js","sources":["../../../src/lib/checkbox/index.ts","../../../src/lib/checkbox/checkbox-module.ts","../../../src/lib/checkbox/checkbox-required-validator.ts","../../../src/lib/checkbox/checkbox.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox,MdCheckboxModule,_MdCheckboxRequiredValidator,MD_CHECKBOX_REQUIRED_VALIDATOR,MdCheckboxRequiredValidator,MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR,MAT_CHECKBOX_REQUIRED_VALIDATOR,MatCheckbox,MatCheckboxBase,MatCheckboxChange,MatCheckboxModule,MatCheckboxRequiredValidator} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {MdRippleModule, MdCommonModule} from '@angular/material/core';\r\nimport {MdCheckbox} from './checkbox';\r\nimport {MdCheckboxRequiredValidator} from './checkbox-required-validator';\r\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdCheckboxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CommonModule, MdRippleModule, MdCommonModule, ObserversModule, A11yModule],\r\n  exports: [MdCheckbox, MdCheckboxRequiredValidator, MdCommonModule],\r\n  declarations: [MdCheckbox, MdCheckboxRequiredValidator],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Directive,\r\n  forwardRef,\r\n  Provider,\r\n} from '@angular/core';\r\nimport {\r\n  CheckboxRequiredValidator,\r\n  NG_VALIDATORS,\r\n} from '@angular/forms';\r\n\r\nexport const /** @type {?} */ _MdCheckboxRequiredValidator = CheckboxRequiredValidator;\r\n\r\nexport const /** @type {?} */ MD_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MdCheckboxRequiredValidator),\r\n  multi: true\r\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\rCurrent CheckboxRequiredValidator only work with `input type=checkbox` and does not\rwork with `md-checkbox`.\n */\nexport class MdCheckboxRequiredValidator extends _MdCheckboxRequiredValidator {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `md-checkbox[required][formControlName],\r\n             mat-checkbox[required][formControlName],\r\n             md-checkbox[required][formControl], md-checkbox[required][ngModel],\r\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\r\n  providers: [MD_CHECKBOX_REQUIRED_VALIDATOR],\r\n  host: {'[attr.required]': 'required ? \"\" : null'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxRequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxRequiredValidator.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple, MATERIAL_COMPATIBILITY_MODE,\r\n  MdRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  RippleRef,\r\n} from '@angular/material/core';\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\n\r\n\r\n// Increasing integer for generating unique ids for checkbox components.\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\rThis allows it to support [(ngModel)].\r\\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdCheckbox),\r\n  multi: true\r\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n/**\n * The source MdCheckbox of the event.\n */\nsource: MdCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\r\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdCheckboxBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdCheckboxMixinBase =\r\n  mixinColor(mixinDisableRipple(mixinDisabled(MdCheckboxBase)), 'accent');\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\rand exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\rdisabled. Note that all additional accessibility attributes are taken care of by the component,\rso there is no need to provide them yourself. However, if you want to omit a label and still\rhave the checkbox be accessible, you may supply an [aria-label] input.\rSee: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox extends _MdCheckboxMixinBase implements ControlValueAccessor, AfterViewInit,\r\n    OnDestroy, CanColor, CanDisable, CanDisableRipple {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\rtake precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\nprivate _uniqueId: string = `md-checkbox-${++nextUniqueId}`;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\r\\@deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\r\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\r\n    // label relative to the checkbox. As such, they are inverted.\r\n    return this.labelPosition == 'after' ? 'start' : 'end';\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\r\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\r\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n */\n_ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\r\\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusMonitor\n */\nconstructor(renderer: Renderer2,\r\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusMonitor: FocusMonitor) {\r\n    super(renderer, elementRef);\r\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\r\n    this._focusMonitor\r\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\r\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\r\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\r\n    return this._checked;\r\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\r\n    if (checked != this.checked) {\r\n      this._checked = checked;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\rrepresent a checkbox with three states, e.g. a checkbox that represents a nested list of\rcheckable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\rset to false.\n * @return {?}\n */\nget indeterminate() {\r\n    return this._indeterminate;\r\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\r\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\r\n    this._indeterminate = indeterminate;\r\n\r\n    if (changed) {\r\n      if (this._indeterminate) {\r\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\r\n      } else {\r\n        this._transitionCheckState(\r\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n      }\r\n      this.indeterminateChange.emit(this._indeterminate);\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\r\n    // This method is getting called whenever the label of the checkbox changes.\r\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\r\n    // that has been recognized by the cdkObserveContent directive.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\r\\@param value Value to be set to the model.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\r\n    this.checked = !!value;\r\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\rImplemented as part of ControlValueAccessor.\r\\@param fn Function to be called on change.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\rImplemented as part of ControlValueAccessor.\r\\@param fn Callback to be triggered when the checkbox is touched.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\r\\@param isDisabled Whether the checkbox should be disabled.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\r\n    let /** @type {?} */ oldState = this._currentCheckState;\r\n    let /** @type {?} */ renderer = this._renderer;\r\n    let /** @type {?} */ elementRef = this._elementRef;\r\n\r\n    if (oldState === newState) {\r\n      return;\r\n    }\r\n    if (this._currentAnimationClass.length > 0) {\r\n      renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\r\n    }\r\n\r\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\r\n        oldState, newState);\r\n    this._currentCheckState = newState;\r\n\r\n    if (this._currentAnimationClass.length > 0) {\r\n      renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\r\n    let /** @type {?} */ event = new MdCheckboxChange();\r\n    event.source = this;\r\n    event.checked = this.checked;\r\n\r\n    this._controlValueAccessorChangeFn(this.checked);\r\n    this.change.emit(event);\r\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\r\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\r\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\r\n    } else if (!focusOrigin) {\r\n      this._removeFocusRipple();\r\n      this.onTouched();\r\n    }\r\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\r\n    this.checked = !this.checked;\r\n  }\n/**\n * Event handler for checkbox input element.\rToggles checked state if element is not disabled.\rDo not toggle on (change) event since IE doesn't fire change event when\r  indeterminate checkbox is clicked.\r\\@param event\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `checkbox` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n\r\n    this._removeFocusRipple();\r\n\r\n    if (!this.disabled) {\r\n      // When user manually click on the checkbox, `indeterminate` is set to false.\r\n      if (this._indeterminate) {\r\n        Promise.resolve().then(() => {\r\n          this._indeterminate = false;\r\n          this.indeterminateChange.emit(this._indeterminate);\r\n        });\r\n      }\r\n\r\n      this.toggle();\r\n      this._transitionCheckState(\r\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n\r\n      // Emit our custom change event if the native input emitted one.\r\n      // It is important to only emit it, if the native input triggered one, because\r\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\r\n      this._emitChangeEvent();\r\n    }\r\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the `change` output.\r\n    event.stopPropagation();\r\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\r\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\r\n    let /** @type {?} */ animSuffix: string = '';\r\n\r\n    switch (oldState) {\r\n      case TransitionCheckState.Init:\r\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\r\n        // [checked] bound to it.\r\n        if (newState === TransitionCheckState.Checked) {\r\n          animSuffix = 'unchecked-checked';\r\n        } else if (newState == TransitionCheckState.Indeterminate) {\r\n          animSuffix = 'unchecked-indeterminate';\r\n        } else {\r\n          return '';\r\n        }\r\n        break;\r\n      case TransitionCheckState.Unchecked:\r\n        animSuffix = newState === TransitionCheckState.Checked ?\r\n            'unchecked-checked' : 'unchecked-indeterminate';\r\n        break;\r\n      case TransitionCheckState.Checked:\r\n        animSuffix = newState === TransitionCheckState.Unchecked ?\r\n            'checked-unchecked' : 'checked-indeterminate';\r\n        break;\r\n      case TransitionCheckState.Indeterminate:\r\n        animSuffix = newState === TransitionCheckState.Checked ?\r\n            'indeterminate-checked' : 'indeterminate-unchecked';\r\n        break;\r\n    }\r\n\r\n    return `mat-checkbox-anim-${animSuffix}`;\r\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\r\n    if (this._focusRipple) {\r\n      this._focusRipple.fadeOut();\r\n      this._focusRipple = null;\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-checkbox, mat-checkbox',\r\n  templateUrl: 'checkbox.html',\r\n  styleUrls: ['checkbox.css'],\r\n  host: {\r\n    'class': 'mat-checkbox',\r\n    '[id]': 'id',\r\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\r\n    '[class.mat-checkbox-checked]': 'checked',\r\n    '[class.mat-checkbox-disabled]': 'disabled',\r\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\r\n  },\r\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n  inputs: ['disabled', 'disableRipple', 'color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\rtake precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/** @type {?} */\nMdCheckbox.prototype._uniqueId;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * @type {?}\n */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\r\\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusMonitor;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}