{"version":3,"file":"autocomplete.js","sources":["../../../src/lib/autocomplete/index.ts","../../../src/lib/autocomplete/autocomplete-module.ts","../../../src/lib/autocomplete/autocomplete-trigger.ts","../../../src/lib/autocomplete/autocomplete.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdAutocompleteSelectedEvent,MdAutocomplete,MdAutocompleteModule,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_SCROLL_STRATEGY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger,MAT_AUTOCOMPLETE_SCROLL_STRATEGY,MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MAT_AUTOCOMPLETE_VALUE_ACCESSOR,MatAutocomplete,MatAutocompleteModule,MatAutocompleteTrigger} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {MdOptionModule, MdCommonModule} from '@angular/material/core';\r\nimport {MdAutocomplete} from './autocomplete';\r\nimport {\r\n  MdAutocompleteTrigger,\r\n  MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\r\n} from './autocomplete-trigger';\nexport class MdAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdOptionModule, OverlayModule, MdCommonModule, CommonModule],\r\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, MdCommonModule],\r\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\r\n  providers: [MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  ConnectedPositionStrategy,\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n  PositionStrategy,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {filter, first, map, RxChain, switchMap} from '@angular/cdk/rxjs';\r\nimport {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Host,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {MdOption, MdOptionSelectionChange} from '@angular/material/core';\r\nimport {MdFormField} from '@angular/material/form-field';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {fromEvent} from 'rxjs/observable/fromEvent';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MdAutocomplete} from './autocomplete';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('md-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\n/**\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MD_AUTOCOMPLETE_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\r\\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\r\n  multi: true\r\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nexport function getMdAutocompleteMissingPanelError(): Error {\r\n  return Error('Attempting to open an undefined instance of `md-autocomplete`. ' +\r\n               'Make sure that the id passed to the `mdAutocomplete` is correct and that ' +\r\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\r\n}\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef | null;\nprivate _portal: TemplatePortal<any>;\nprivate _panelOpen: boolean = false;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * The subscription for closing actions (some are bound to document).\n */\nprivate _closingActionsSubscription: Subscription;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\r\n\r\n  /* The autocomplete panel to be attached to this trigger. */\r\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\r\n    return this.autocomplete;\r\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\r\n    this.autocomplete = autocomplete;\r\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _zone\n * @param {?} _changeDetectorRef\n * @param {?} _scrollStrategy\n * @param {?} _dir\n * @param {?} _formField\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _zone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _scrollStrategy,\nprivate _dir: Directionality,\nprivate _formField: MdFormField,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._destroyPanel();\r\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\r\n    return this._panelOpen && this.autocomplete.showPanel;\r\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\r\n    this._attachOverlay();\r\n    this._floatPlaceholder();\r\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\r\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\r\n      this._overlayRef.detach();\r\n      this._closingActionsSubscription.unsubscribe();\r\n    }\r\n\r\n    this._resetPlaceholder();\r\n\r\n    if (this._panelOpen) {\r\n      this._panelOpen = false;\r\n\r\n      // We need to trigger change detection manually, because\r\n      // `fromEvent` doesn't seem to do it at the proper time.\r\n      // This ensures that the placeholder is reset when the\r\n      // user clicks outside.\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\rwhen an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\r\n    return merge(\r\n      this.optionSelections,\r\n      this.autocomplete._keyManager.tabOut,\r\n      this._outsideClickStream\r\n    );\r\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\r\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\r\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption | null {\r\n    if (this.autocomplete && this.autocomplete._keyManager) {\r\n      return this.autocomplete._keyManager.activeItem;\r\n    }\r\n\r\n    return null;\r\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\r\n    if (!this._document) {\r\n      return observableOf(null);\r\n    }\r\n\r\n    return RxChain.from(merge(\r\n      fromEvent(this._document, 'click'),\r\n      fromEvent(this._document, 'touchend')\r\n    )).call(filter, (event: MouseEvent | TouchEvent) => {\r\n      const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\r\n      const /** @type {?} */ formField = this._formField ?\r\n          this._formField._elementRef.nativeElement : null;\r\n\r\n      return this._panelOpen &&\r\n             clickTarget !== this._element.nativeElement &&\r\n             (!formField || !formField.contains(clickTarget)) &&\r\n             (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\r\n    }).result();\r\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\rrequired to integrate with Angular's core forms API.\r\r\\@param value New value to be written to the model.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\r\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\r\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\rchanges from user input. Part of the ControlValueAccessor interface\rrequired to integrate with Angular's core forms API.\r\r\\@param fn Callback to be triggered when the value changes.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\rby the user. Part of the ControlValueAccessor interface required\rto integrate with Angular's core forms API.\r\r\\@param fn Callback to be triggered when the component has been touched.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\r\n    this._onTouched = fn;\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ESCAPE && this.panelOpen) {\r\n      this._resetActiveItem();\r\n      this.closePanel();\r\n      event.stopPropagation();\r\n    } else if (this.activeOption && event.keyCode === ENTER && this.panelOpen) {\r\n      this.activeOption._selectViaInteraction();\r\n      this._resetActiveItem();\r\n      event.preventDefault();\r\n    } else {\r\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\r\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\r\n\r\n      if (this.panelOpen) {\r\n        this.autocomplete._keyManager.onKeydown(event);\r\n      } else if (isArrowKey) {\r\n        this.openPanel();\r\n      }\r\n\r\n      Promise.resolve().then(() => {\r\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\r\n          this._scrollToOption();\r\n        }\r\n      });\r\n    }\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\r\n    // We need to ensure that the input is focused, because IE will fire the `input`\r\n    // event on focus/blur/load if the input has a placeholder. See:\r\n    // https://connect.microsoft.com/IE/feedback/details/885747/\r\n    if (document.activeElement === event.target) {\r\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\r\n      this.openPanel();\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_handleFocus(): void {\r\n    this._attachOverlay();\r\n    this._floatPlaceholder(true);\r\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\rThis causes the value to jump when selecting an option with the mouse.\rThis method manually floats the placeholder until the panel can be closed.\r\\@param shouldAnimate Whether the placeholder should be animated when it is floated.\n * @param {?=} shouldAnimate\n * @return {?}\n */\nprivate _floatPlaceholder(shouldAnimate = false): void {\r\n    if (this._formField && this._formField.floatPlaceholder === 'auto') {\r\n      if (shouldAnimate) {\r\n        this._formField._animateAndLockPlaceholder();\r\n      } else {\r\n        this._formField.floatPlaceholder = 'always';\r\n      }\r\n\r\n      this._manuallyFloatingPlaceholder = true;\r\n    }\r\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\r\n    if (this._manuallyFloatingPlaceholder) {\r\n      this._formField.floatPlaceholder = 'auto';\r\n      this._manuallyFloatingPlaceholder = false;\r\n    }\r\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\rto reveal options below the fold. First, we find the offset of the option from the top\rof the panel. If that offset is below the fold, the new scrollTop will be the offset -\rthe panel height + the option height, so the active option will be just visible at the\rbottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\rwill become the offset. If that offset is visible within the panel already, the scrollTop is\rnot adjusted.\n * @return {?}\n */\nprivate _scrollToOption(): void {\r\n    const /** @type {?} */ activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\r\n    const /** @type {?} */ labelCount = MdOption.countGroupLabelsBeforeOption(activeOptionIndex,\r\n        this.autocomplete.options, this.autocomplete.optionGroups);\r\n    const /** @type {?} */ optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\r\n    const /** @type {?} */ panelTop = this.autocomplete._getScrollTop();\r\n\r\n    if (optionOffset < panelTop) {\r\n      // Scroll up to reveal selected option scrolled above the panel top\r\n      this.autocomplete._setScrollTop(optionOffset);\r\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\r\n      // Scroll down to reveal selected option scrolled below the panel bottom\r\n      const /** @type {?} */ newScrollTop =\r\n          Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\r\n      this.autocomplete._setScrollTop(newScrollTop);\r\n    }\r\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\rstream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): Subscription {\r\n    const /** @type {?} */ firstStable = first.call(this._zone.onStable.asObservable());\r\n    const /** @type {?} */ optionChanges = map.call(this.autocomplete.options.changes, () =>\r\n      this._positionStrategy.recalculateLastPosition());\r\n\r\n    // When the zone is stable initially, and when the option list changes...\r\n    return RxChain.from(merge(firstStable, optionChanges))\r\n      // create a new stream of panelClosingActions, replacing any previous streams\r\n      // that were created, and flatten it so our stream only emits closing events...\r\n      .call(switchMap, () => {\r\n        this._resetActiveItem();\r\n        this.autocomplete._setVisibility();\r\n        return this.panelClosingActions;\r\n      })\r\n      // when the first closing event occurs...\r\n      .call(first)\r\n      // set the value, close the panel, and complete.\r\n      .subscribe(event => this._setValueAndClose(event));\r\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\r\n    if (this._overlayRef) {\r\n      this.closePanel();\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = null;\r\n    }\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\r\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\r\n\r\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\r\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\r\n    const /** @type {?} */ inputValue = toDisplay != null ? toDisplay : '';\r\n\r\n    // If it's used within a `MdFormField`, we should set it through the property so it can go\r\n    // through change detection.\r\n    if (this._formField) {\r\n      this._formField._control.value = inputValue;\r\n    } else {\r\n      this._element.nativeElement.value = inputValue;\r\n    }\r\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\rcontrol to that value. It will also mark the control as dirty if this interaction\rstemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\r\n    if (event && event.source) {\r\n      this._clearPreviousSelectedOption(event.source);\r\n      this._setTriggerValue(event.source.value);\r\n      this._onChange(event.source.value);\r\n      this._element.nativeElement.focus();\r\n      this.autocomplete._emitSelectEvent(event.source);\r\n    }\r\n\r\n    this.closePanel();\r\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\r\n    this.autocomplete.options.forEach(option => {\r\n      if (option != skip && option.selected) {\r\n        option.deselect();\r\n      }\r\n    });\r\n  }\n/**\n * @return {?}\n */\nprivate _attachOverlay(): void {\r\n    if (!this.autocomplete) {\r\n      throw getMdAutocompleteMissingPanelError();\r\n    }\r\n\r\n    if (!this._overlayRef) {\r\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\r\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\r\n    } else {\r\n      /** Update the panel width, in case the host width has changed */\r\n      this._overlayRef.getState().width = this._getHostWidth();\r\n      this._overlayRef.updateSize();\r\n    }\r\n\r\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\r\n      this._overlayRef.attach(this._portal);\r\n      this._closingActionsSubscription = this._subscribeToClosingActions();\r\n    }\r\n\r\n    this.autocomplete._setVisibility();\r\n    this._panelOpen = true;\r\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayConfig {\r\n    return new OverlayConfig({\r\n      positionStrategy: this._getOverlayPosition(),\r\n      scrollStrategy: this._scrollStrategy(),\r\n      width: this._getHostWidth(),\r\n      direction: this._dir ? this._dir.value : 'ltr'\r\n    });\r\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\r\n    this._positionStrategy =  this._overlay.position().connectedTo(\r\n        this._getConnectedElement(),\r\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\r\n        .withFallbackPosition(\r\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\r\n        );\r\n    return this._positionStrategy;\r\n  }\n/**\n * @return {?}\n */\nprivate _getConnectedElement(): ElementRef {\r\n    return this._formField ? this._formField._connectionContainerRef : this._element;\r\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\r\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\r\n  }\n/**\n * Reset active item to -1 so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\r\n    this.autocomplete._keyManager.setActiveItem(-1);\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `input[mdAutocomplete], input[matAutocomplete],\r\n             textarea[mdAutocomplete], textarea[matAutocomplete]`,\r\n  host: {\r\n    'role': 'combobox',\r\n    'autocomplete': 'off',\r\n    'aria-autocomplete': 'list',\r\n    'aria-multiline': 'false',\r\n    '[attr.aria-activedescendant]': 'activeOption?.id',\r\n    '[attr.aria-expanded]': 'panelOpen.toString()',\r\n    '[attr.aria-owns]': 'autocomplete?.id',\r\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\r\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\r\n    '(focusin)': '_handleFocus()',\r\n    '(blur)': '_onTouched()',\r\n    '(input)': '_handleInput($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n  },\r\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_AUTOCOMPLETE_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: MdFormField, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * The subscription for closing actions (some are bound to document).\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._closingActionsSubscription;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._formField;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Input,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  Output,\r\n} from '@angular/core';\r\nimport {MdOption, MdOptgroup} from '@angular/material/core';\r\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\rthe component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected\n */\nexport class MdAutocompleteSelectedEvent {\n/**\n * @param {?} source\n * @param {?} option\n */\nconstructor(public source: MdAutocomplete,\npublic option: MdOption) { }\r\n}\n\nfunction MdAutocompleteSelectedEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteSelectedEvent.prototype.source;\n/** @type {?} */\nMdAutocompleteSelectedEvent.prototype.option;\n}\n\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager<MdOption>;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n/**\n * \\@docs-private\n */\ntemplate: TemplateRef<any>;\n/**\n * Element for the panel containing the autocomplete options.\n */\npanel: ElementRef;\n/**\n * \\@docs-private\n */\noptions: QueryList<MdOption>;\n/**\n * \\@docs-private\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: ((value: any) => string) | null = null;\n/**\n * Event that is emitted whenever an option from the list is selected.\n */\noptionSelected: EventEmitter<MdAutocompleteSelectedEvent> =\r\n      new EventEmitter<MdAutocompleteSelectedEvent>();\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._keyManager = new ActiveDescendantKeyManager<MdOption>(this.options).withWrap();\r\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display options\rabove or below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\r\n    if (this.panel) {\r\n      this.panel.nativeElement.scrollTop = scrollTop;\r\n    }\r\n  }\n/**\n * Returns the panel's scrollTop.\n * @return {?}\n */\n_getScrollTop(): number {\r\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\r\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility(): void {\r\n    Promise.resolve().then(() => {\r\n      this.showPanel = !!this.options.length;\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\n/**\n * Emits the `select` event.\n * @param {?} option\n * @return {?}\n */\n_emitSelectEvent(option: MdOption): void {\r\n    const /** @type {?} */ event = new MdAutocompleteSelectedEvent(this, option);\r\n    this.optionSelected.emit(event);\r\n  }\n/**\n * Sets a class on the panel based on whether it is visible.\n * @return {?}\n */\n_getClassList() {\r\n    return {\r\n      'mat-autocomplete-visible': this.showPanel,\r\n      'mat-autocomplete-hidden': !this.showPanel\r\n    };\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-autocomplete, mat-autocomplete',\r\n  templateUrl: 'autocomplete.html',\r\n  styleUrls: ['autocomplete.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  exportAs: 'mdAutocomplete, matAutocomplete',\r\n  host: {\r\n    'class': 'mat-autocomplete'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'displayWith': [{ type: Input },],\n'optionSelected': [{ type: Output },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.template;\n/**\n * Element for the panel containing the autocomplete options.\n * @type {?}\n */\nMdAutocomplete.prototype.panel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.options;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.optionGroups;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Event that is emitted whenever an option from the list is selected.\n * @type {?}\n */\nMdAutocomplete.prototype.optionSelected;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\r\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["observableOf"],"mappings":"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"}