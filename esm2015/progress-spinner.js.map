{"version":3,"file":"progress-spinner.js","sources":["../../../src/lib/progress-spinner/index.ts","../../../src/lib/progress-spinner/progress-spinner-module.ts","../../../src/lib/progress-spinner/progress-spinner.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner,MatProgressSpinner,MatProgressSpinnerBase,MatProgressSpinnerCssMatStyler,MatProgressSpinnerModule,MatSpinner} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {\r\n  MdProgressSpinner,\r\n  MdSpinner,\r\n  MdProgressSpinnerCssMatStyler,\r\n} from './progress-spinner';\nexport class MdProgressSpinnerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule],\r\n  exports: [\r\n    MdProgressSpinner,\r\n    MdSpinner,\r\n    MdCommonModule,\r\n    MdProgressSpinnerCssMatStyler\r\n  ],\r\n  declarations: [\r\n    MdProgressSpinner,\r\n    MdSpinner,\r\n    MdProgressSpinnerCssMatStyler\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  OnDestroy,\r\n  Input,\r\n  ElementRef,\r\n  NgZone,\r\n  Renderer2,\r\n  Directive,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nconst MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport const PROGRESS_SPINNER_STROKE_WIDTH = 10;\r\n\r\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\r\n\r\ntype EasingFn = (currentTime: number, startValue: number,\r\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-progress-spinner, mat-progress-spinner',\r\n  host: {'class': 'mat-progress-spinner'}\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdProgressSpinnerBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdProgressSpinnerBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerBase.prototype._renderer;\n/** @type {?} */\nMdProgressSpinnerBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdProgressSpinnerMixinBase = mixinColor(MdProgressSpinnerBase, 'primary');\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner extends _MdProgressSpinnerMixinBase\r\n    implements OnDestroy, CanColor {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number | null;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n */\nstrokeWidth: number = PROGRESS_SPINNER_STROKE_WIDTH;\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\rbecause voiceover does not report the progress indicator as indeterminate if the aria min\rand/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\r\n    return this.mode == 'determinate' ? 0 : null;\r\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\r\n    return this.mode == 'determinate' ? 100 : null;\r\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\r\n    return this._interdeterminateInterval;\r\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number | null) {\r\n    if (this._interdeterminateInterval) {\r\n      clearInterval(this._interdeterminateInterval);\r\n    }\r\n\r\n    this._interdeterminateInterval = interval;\r\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\r\n    this._cleanupIndeterminateAnimation();\r\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\r\n    if (this.mode == 'determinate') {\r\n      return this._value;\r\n    }\r\n\r\n    return 0;\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\r\n    if (v != null && this.mode == 'determinate') {\r\n      let /** @type {?} */ newValue = clamp(v);\r\n      this._animateCircle(this.value || 0, newValue);\r\n      this._value = newValue;\r\n    }\r\n  }\n/**\n * Mode of the progress circle\r\rInput must be one of the values from ProgressMode, defaults to 'determinate'.\rmode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() { return this._mode; }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\r\n    if (mode !== this._mode) {\r\n      if (mode === 'indeterminate') {\r\n        this._startIndeterminateAnimation();\r\n      } else {\r\n        this._cleanupIndeterminateAnimation();\r\n        this._animateCircle(0, this._value);\r\n      }\r\n      this._mode = mode;\r\n    }\r\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _ngZone\n */\nconstructor(renderer: Renderer2,\r\n              elementRef: ElementRef,\nprivate _ngZone: NgZone) {\r\n    super(renderer, elementRef);\r\n  }\n/**\n * Animates the circle from one percentage value to another.\r\r\\@param animateFrom The percentage of the circle filled starting the animation.\r\\@param animateTo The percentage of the circle filled ending the animation.\r\\@param ease The easing function to manage the pace of change in the animation.\r\\@param duration The length of time to show the animation, in milliseconds.\r\\@param rotation The starting angle of the circle fill, with 0Â° represented at the top center\r   of the circle.\n * @param {?} animateFrom\n * @param {?} animateTo\n * @param {?=} ease\n * @param {?=} duration\n * @param {?=} rotation\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\r\n                        duration = DURATION_DETERMINATE, rotation = 0) {\r\n\r\n    let /** @type {?} */ id = ++this._lastAnimationId;\r\n    let /** @type {?} */ startTime = Date.now();\r\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\r\n\r\n    // No need to animate it if the values are the same\r\n    if (animateTo === animateFrom) {\r\n      this._renderArc(animateTo, rotation);\r\n    } else {\r\n      let /** @type {?} */ animation = () => {\r\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\r\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\r\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\r\n            duration;\r\n\r\n        this._renderArc(\r\n          ease(elapsedTime, animateFrom, changeInValue, duration),\r\n          rotation\r\n        );\r\n\r\n        // Prevent overlapping animations by checking if a new animation has been called for and\r\n        // if the animation has lasted longer than the animation duration.\r\n        if (id === this._lastAnimationId && elapsedTime < duration) {\r\n          requestAnimationFrame(animation);\r\n        }\r\n      };\r\n\r\n      // Run the animation outside of Angular's zone, in order to avoid\r\n      // hitting ZoneJS and change detection on each frame.\r\n      this._ngZone.runOutsideAngular(animation);\r\n    }\r\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\r\n    let /** @type {?} */ rotationStartPoint = 0;\r\n    let /** @type {?} */ start = startIndeterminate;\r\n    let /** @type {?} */ end = endIndeterminate;\r\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\r\n    let /** @type {?} */ animate = () => {\r\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\r\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\r\n      rotationStartPoint = (rotationStartPoint + end) % 100;\r\n      let /** @type {?} */ temp = start;\r\n      start = -end;\r\n      end = -temp;\r\n    };\r\n\r\n    if (!this.interdeterminateInterval) {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\r\n        animate();\r\n      });\r\n    }\r\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\r\n    this.interdeterminateInterval = null;\r\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\rDOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\r\n    if (this._path) {\r\n      const /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\r\n      this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-progress-spinner, mat-progress-spinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'class': 'mat-progress-spinner',\r\n    '[attr.aria-valuemin]': '_ariaValueMin',\r\n    '[attr.aria-valuemax]': '_ariaValueMax',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.mode]': 'mode',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-spinner.html',\r\n  styleUrls: ['progress-spinner.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'strokeWidth': [{ type: Input },],\n'value': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n * @type {?}\n */\nMdProgressSpinner.prototype.strokeWidth;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n}\n\n/**\n * <md-spinner> component.\r\rThis is a component definition to be used as a convenience reference to create an\rindeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\r\n    super(renderer, elementRef, ngZone);\r\n    this.mode = 'indeterminate';\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-spinner, mat-spinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'mode': 'indeterminate',\r\n    'class': 'mat-spinner mat-progress-spinner',\r\n  },\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-spinner.html',\r\n  styleUrls: ['progress-spinner.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\r\n  return Math.max(0, Math.min(100, v));\r\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\r\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\r\n\r\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\r\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\r\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\r\n                    changeInValue: number, duration: number) {\r\n  return changeInValue * currentTime / duration + startValue;\r\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\r\n                      changeInValue: number, duration: number) {\r\n  let /** @type {?} */ time = currentTime / duration;\r\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\r\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\r\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\r\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\r\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\rcoordinates on the circle, and then to cartesian coordinates in the viewport.\r\r\\@param currentValue The current percentage value of the progress circle, the percentage of the\r   circle to fill.\r\\@param rotation The starting point of the circle with 0 being the 0 degree point.\r\\@param strokeWidth Stroke width of the progress spinner arc.\r\\@return A string for an SVG path representing a circle filled from the starting point to the\r   percentage value provided.\n * @param {?} currentValue\n * @param {?} rotation\n * @param {?} strokeWidth\n * @return {?}\n */\nfunction getSvgArc(currentValue: number, rotation: number, strokeWidth: number): string {\r\n  let /** @type {?} */ startPoint = rotation || 0;\r\n  let /** @type {?} */ radius = 50;\r\n  let /** @type {?} */ pathRadius = radius - strokeWidth;\r\n\r\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\r\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\r\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\r\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\r\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\r\n  let /** @type {?} */ largeArcFlag: number;\r\n\r\n  if (endAngle < 0) {\r\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\r\n  } else {\r\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\r\n  }\r\n\r\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}