{"version":3,"file":"form-field.js","sources":["../../../src/lib/form-field/index.ts","../../../src/lib/form-field/form-field-module.ts","../../../src/lib/form-field/form-field.ts","../../../src/lib/form-field/suffix.ts","../../../src/lib/form-field/prefix.ts","../../../src/lib/form-field/placeholder.ts","../../../src/lib/form-field/hint.ts","../../../src/lib/form-field/form-field-errors.ts","../../../src/lib/form-field/form-field-control.ts","../../../src/lib/form-field/error.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdFormFieldModule,MdError,MdFormField,MdFormFieldControl,getMdFormFieldPlaceholderConflictError,getMdFormFieldDuplicatedHintError,getMdFormFieldMissingControlError,MdHint,MdPlaceholder,MdPrefix,MdSuffix,MatFormFieldModule,MatError,MatFormField,MatFormFieldControl,MatHint,MatPlaceholder,MatPrefix,MatSuffix} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {MdError} from './error';\r\nimport {MdFormField} from './form-field';\r\nimport {MdHint} from './hint';\r\nimport {MdPlaceholder} from './placeholder';\r\nimport {MdPrefix} from './prefix';\r\nimport {MdSuffix} from './suffix';\nexport class MdFormFieldModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  declarations: [\r\n    MdError,\r\n    MdHint,\r\n    MdFormField,\r\n    MdPlaceholder,\r\n    MdPrefix,\r\n    MdSuffix,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    PlatformModule,\r\n  ],\r\n  exports: [\r\n    MdError,\r\n    MdHint,\r\n    MdFormField,\r\n    MdPlaceholder,\r\n    MdPrefix,\r\n    MdSuffix,\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdFormFieldModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormFieldModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormFieldModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {first, startWith} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  QueryList, Renderer2,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  FloatPlaceholderType,\r\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\r\n  PlaceholderOptions,\r\n} from '@angular/material/core';\r\nimport {fromEvent} from 'rxjs/observable/fromEvent';\r\nimport {MdError} from './error';\r\nimport {MdFormFieldControl} from './form-field-control';\r\nimport {\r\n  getMdFormFieldDuplicatedHintError,\r\n  getMdFormFieldMissingControlError,\r\n  getMdFormFieldPlaceholderConflictError,\r\n} from './form-field-errors';\r\nimport {MdHint} from './hint';\r\nimport {MdPlaceholder} from './placeholder';\r\nimport {MdPrefix} from './prefix';\r\nimport {MdSuffix} from './suffix';\r\n\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nexport class MdFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use `color` instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\r\n    this._hideRequiredMarker = coerceBooleanProperty(value);\r\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n */\nprivate _showAlwaysAnimate = false;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() {\r\n    return this._floatPlaceholder === 'always' && !this._showAlwaysAnimate;\r\n  }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the form field hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\r\n    this._hintLabel = value;\r\n    this._processHints();\r\n  }\nprivate _hintLabel = '';\r\n\r\n  // Unique id for the hint label.\r\n  _hintLabelId: string = `md-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\r\n    if (value !== this._floatPlaceholder) {\r\n      this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the form field's underline element.\n */\nunderlineRef: ElementRef;\r\n   _connectionContainerRef: ElementRef;\nprivate _placeholder: ElementRef;\r\n   _control: MdFormFieldControl<any>;\r\n   _placeholderChild: MdPlaceholder;\r\n   _errorChildren: QueryList<MdError>;\r\n   _hintChildren: QueryList<MdHint>;\r\n   _prefixChildren: QueryList<MdPrefix>;\r\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _changeDetectorRef: ChangeDetectorRef,\r\n        placeholderOptions: PlaceholderOptions) {\r\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\r\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._validateControlChild();\r\n    if (this._control.controlType) {\r\n      this._renderer.addClass(\r\n          this._elementRef.nativeElement, `mat-form-field-type-${this._control.controlType}`);\r\n    }\r\n\r\n    // Subscribe to changes in the child control state in order to update the form field UI.\r\n    startWith.call(this._control.stateChanges, null).subscribe(() => {\r\n      this._validatePlaceholders();\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    let /** @type {?} */ ngControl = this._control.ngControl;\r\n    if (ngControl && ngControl.valueChanges) {\r\n      ngControl.valueChanges.subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n\r\n    // Re-validate when the number of hints changes.\r\n    startWith.call(this._hintChildren.changes, null).subscribe(() => {\r\n      this._processHints();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    // Update the aria-described by when the number of errors changes.\r\n    startWith.call(this._errorChildren.changes, null).subscribe(() => {\r\n      this._syncDescribedByIds();\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\r\n    this._validateControlChild();\r\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\r\n    // Avoid animations on load.\r\n    this._subscriptAnimationState = 'enter';\r\n    this._changeDetectorRef.detectChanges();\r\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\r\n    let /** @type {?} */ ngControl = this._control ? this._control.ngControl : null;\r\n    return ngControl && ( /** @type {?} */((ngControl as any)))[prop];\r\n  }\n/**\n * Whether the form field has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() {\r\n    return !!(this._control.placeholder || this._placeholderChild);\r\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\r\n    return (this._errorChildren && this._errorChildren.length > 0 &&\r\n        this._control.errorState) ? 'error' : 'hint';\r\n  }\n/**\n * Animates the placeholder up and locks it in position.\n * @return {?}\n */\n_animateAndLockPlaceholder(): void {\r\n    if (this._placeholder && this._canPlaceholderFloat) {\r\n      this._showAlwaysAnimate = true;\r\n      this._floatPlaceholder = 'always';\r\n\r\n      first.call(fromEvent(this._placeholder.nativeElement, 'transitionend')).subscribe(() => {\r\n        this._showAlwaysAnimate = false;\r\n      });\r\n\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\ror child element with the `md-placeholder` directive).\n * @return {?}\n */\nprivate _validatePlaceholders() {\r\n    if (this._control.placeholder && this._placeholderChild) {\r\n      throw getMdFormFieldPlaceholderConflictError();\r\n    }\r\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\r\n    this._validateHints();\r\n    this._syncDescribedByIds();\r\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\rattribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\r\n    if (this._hintChildren) {\r\n      let /** @type {?} */ startHint: MdHint;\r\n      let /** @type {?} */ endHint: MdHint;\r\n      this._hintChildren.forEach((hint: MdHint) => {\r\n        if (hint.align == 'start') {\r\n          if (startHint || this.hintLabel) {\r\n            throw getMdFormFieldDuplicatedHintError('start');\r\n          }\r\n          startHint = hint;\r\n        } else if (hint.align == 'end') {\r\n          if (endHint) {\r\n            throw getMdFormFieldDuplicatedHintError('end');\r\n          }\r\n          endHint = hint;\r\n        }\r\n      });\r\n    }\r\n  }\n/**\n * Sets the list of element IDs that describe the child control. This allows the control to update\rits `aria-describedby` attribute accordingly.\n * @return {?}\n */\nprivate _syncDescribedByIds() {\r\n    if (this._control) {\r\n      let /** @type {?} */ ids: string[] = [];\r\n\r\n      if (this._getDisplayedMessages() === 'hint') {\r\n        let /** @type {?} */ startHint = this._hintChildren ?\r\n            this._hintChildren.find(hint => hint.align === 'start') : null;\r\n        let /** @type {?} */ endHint = this._hintChildren ?\r\n            this._hintChildren.find(hint => hint.align === 'end') : null;\r\n\r\n        if (startHint) {\r\n          ids.push(startHint.id);\r\n        } else if (this._hintLabel) {\r\n          ids.push(this._hintLabelId);\r\n        }\r\n\r\n        if (endHint) {\r\n          ids.push(endHint.id);\r\n        }\r\n      } else if (this._errorChildren) {\r\n        ids = this._errorChildren.map(mdError => mdError.id);\r\n      }\r\n\r\n      this._control.setDescribedByIds(ids);\r\n    }\r\n  }\n/**\n * Throws an error if the form field's control is missing.\n * @return {?}\n */\nprotected _validateControlChild() {\r\n    if (!this._control) {\r\n      throw getMdFormFieldMissingControlError();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\r\n  selector: 'md-input-container, mat-input-container, md-form-field, mat-form-field',\r\n  templateUrl: 'form-field.html',\r\n  // MdInput is a directive and can't have styles, so we need to include its styles here.\r\n  // The MdInput styles are fairly minimal so it shouldn't be a big deal for people who aren't using\r\n  // MdInput.\r\n  styleUrls: ['form-field.css', '../input/input.css'],\r\n  animations: [\r\n    // TODO(mmalerba): Use angular animations for placeholder animation as well.\r\n    trigger('transitionMessages', [\r\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\r\n      transition('void => enter', [\r\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\r\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\r\n      ]),\r\n    ]),\r\n  ],\r\n  host: {\r\n    'class': 'mat-input-container mat-form-field',\r\n    '[class.mat-input-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-invalid]': '_control.errorState',\r\n    '[class.mat-form-field-can-float]': '_canPlaceholderFloat',\r\n    '[class.mat-form-field-should-float]': '_control.shouldPlaceholderFloat || _shouldAlwaysFloat',\r\n    '[class.mat-focused]': '_control.focused',\r\n    '[class.mat-primary]': 'color == \"primary\"',\r\n    '[class.mat-accent]': 'color == \"accent\"',\r\n    '[class.mat-warn]': 'color == \"warn\"',\r\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\r\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\r\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\r\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\r\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\r\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\r\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_connectionContainerRef': [{ type: ViewChild, args: ['connectionContainer', ] },],\n'_placeholder': [{ type: ViewChild, args: ['placeholder', ] },],\n'_control': [{ type: ContentChild, args: [MdFormFieldControl, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdError, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdFormField_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormField.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormField.ctorParameters;\n/** @type {?} */\nMdFormField.propDecorators;\n/** @type {?} */\nMdFormField.prototype._placeholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n * @type {?}\n */\nMdFormField.prototype.color;\n/** @type {?} */\nMdFormField.prototype._hideRequiredMarker;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n * @type {?}\n */\nMdFormField.prototype._showAlwaysAnimate;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdFormField.prototype._subscriptAnimationState;\n/** @type {?} */\nMdFormField.prototype._hintLabel;\n/** @type {?} */\nMdFormField.prototype._hintLabelId;\n/** @type {?} */\nMdFormField.prototype._floatPlaceholder;\n/**\n * Reference to the form field's underline element.\n * @type {?}\n */\nMdFormField.prototype.underlineRef;\n/** @type {?} */\nMdFormField.prototype._connectionContainerRef;\n/** @type {?} */\nMdFormField.prototype._placeholder;\n/** @type {?} */\nMdFormField.prototype._control;\n/** @type {?} */\nMdFormField.prototype._placeholderChild;\n/** @type {?} */\nMdFormField.prototype._errorChildren;\n/** @type {?} */\nMdFormField.prototype._hintChildren;\n/** @type {?} */\nMdFormField.prototype._prefixChildren;\n/** @type {?} */\nMdFormField.prototype._suffixChildren;\n/** @type {?} */\nMdFormField.prototype._elementRef;\n/** @type {?} */\nMdFormField.prototype._renderer;\n/** @type {?} */\nMdFormField.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive} from '@angular/core';\n/**\n * Suffix to be placed at the end of the form field.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdSuffix], [matSuffix]',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive} from '@angular/core';\n/**\n * Prefix to be placed the the front of the form field.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdPrefix], [matPrefix]',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive} from '@angular/core';\n/**\n * The floating placeholder for an `MdFormField`.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-placeholder, mat-placeholder'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n */\nid: string = `mat-hint-${nextUniqueId++}`;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-hint, mat-hint',\r\n  host: {\r\n    'class': 'mat-hint',\r\n    '[class.mat-right]': 'align == \"end\"',\r\n    '[attr.id]': 'id',\r\n    // Remove align attribute to prevent it from interfering with layout.\r\n    '[attr.align]': 'null',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldPlaceholderConflictError(): Error {\r\n  return Error('Placeholder attribute and child element were both specified.');\r\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdFormFieldDuplicatedHintError(align: string): Error {\r\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\r\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldMissingControlError(): Error {\r\n  return Error('md-form-field must contain a MdFormFieldControl. ' +\r\n      'Did you forget to add mdInput to the native input or textarea element?');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Observable} from 'rxjs/Observable';\r\nimport {NgControl} from '@angular/forms';\n/**\n * An interface which allows a control to work inside of a `MdFormField`.\n * @abstract\n */\nexport abstract class MdFormFieldControl<T> {\n/**\n * The value of the control.\n */\nvalue: T;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\rneeds to run change detection.\n */\nreadonly stateChanges: Observable<void>;\n/**\n * The element ID for this control.\n */\nreadonly id: string;\n/**\n * The placeholder for this control.\n */\nreadonly placeholder: string;\n/**\n * Gets the NgControl for this control.\n */\nreadonly ngControl: NgControl | null;\n/**\n * Whether the control is focused.\n */\nreadonly focused: boolean;\n/**\n * Whether the control is empty.\n */\nreadonly empty: boolean;\n/**\n * Whether the `MdFormField` label should try to float.\n */\nreadonly shouldPlaceholderFloat: boolean;\n/**\n * Whether the control is required.\n */\nreadonly required: boolean;\n/**\n * Whether the control is disabled.\n */\nreadonly disabled: boolean;\n/**\n * Whether the control is in an error state.\n */\nreadonly errorState: boolean;\n/**\n * An optional name for the control type that can be used to distinguish `md-form-field` elements\rbased on their control type. The form field will add a class,\r`mat-form-field-type-{{controlType}}` to its root element.\n */\nreadonly controlType?: string;\n/**\n * Sets the list of element IDs that currently describe this control.\n * @abstract\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) {}\n/**\n * Handles a click on the control's container.\n * @abstract\n * @param {?} event\n * @return {?}\n */\nonContainerClick(event: MouseEvent) {}\r\n}\n\nfunction MdFormFieldControl_tsickle_Closure_declarations() {\n/**\n * The value of the control.\n * @type {?}\n */\nMdFormFieldControl.prototype.value;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\rneeds to run change detection.\n * @type {?}\n */\nMdFormFieldControl.prototype.stateChanges;\n/**\n * The element ID for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.id;\n/**\n * The placeholder for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.placeholder;\n/**\n * Gets the NgControl for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.ngControl;\n/**\n * Whether the control is focused.\n * @type {?}\n */\nMdFormFieldControl.prototype.focused;\n/**\n * Whether the control is empty.\n * @type {?}\n */\nMdFormFieldControl.prototype.empty;\n/**\n * Whether the `MdFormField` label should try to float.\n * @type {?}\n */\nMdFormFieldControl.prototype.shouldPlaceholderFloat;\n/**\n * Whether the control is required.\n * @type {?}\n */\nMdFormFieldControl.prototype.required;\n/**\n * Whether the control is disabled.\n * @type {?}\n */\nMdFormFieldControl.prototype.disabled;\n/**\n * Whether the control is in an error state.\n * @type {?}\n */\nMdFormFieldControl.prototype.errorState;\n/**\n * An optional name for the control type that can be used to distinguish `md-form-field` elements\rbased on their control type. The form field will add a class,\r`mat-form-field-type-{{controlType}}` to its root element.\n * @type {?}\n */\nMdFormFieldControl.prototype.controlType;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, Input} from '@angular/core';\r\n\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nexport class MdError {\r\n   id: string = `mat-error-${nextUniqueId++}`;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-error, mat-error',\r\n  host: {\r\n    'class': 'mat-error',\r\n    'role': 'alert',\r\n    '[attr.id]': 'id',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdError_tsickle_Closure_declarations() {\n/** @type {?} */\nMdError.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdError.ctorParameters;\n/** @type {?} */\nMdError.propDecorators;\n/** @type {?} */\nMdError.prototype.id;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["nextUniqueId"],"mappings":"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"}