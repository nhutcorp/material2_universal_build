{"version":3,"file":"button-toggle.js","sources":["../../../src/lib/button-toggle/index.ts","../../../src/lib/button-toggle/button-toggle-module.ts","../../../src/lib/button-toggle/button-toggle.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ToggleType,MdButtonToggleGroupBase,_MdButtonToggleGroupMixinBase,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle,MdButtonToggleModule,MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MatButtonToggle,MatButtonToggleChange,MatButtonToggleGroup,MatButtonToggleGroupBase,MatButtonToggleGroupMultiple,MatButtonToggleModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle} from './button-toggle';\r\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER, MdCommonModule} from '@angular/material/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdButtonToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule, A11yModule],\r\n  exports: [\r\n    MdButtonToggleGroup,\r\n    MdButtonToggleGroupMultiple,\r\n    MdButtonToggle,\r\n    MdCommonModule,\r\n  ],\r\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\r\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  forwardRef,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {UniqueSelectionDispatcher} from '@angular/material/core';\r\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\r\nimport {FocusMonitor} from '@angular/cdk/a11y';\r\n\r\n/** Acceptable types for a button toggle. */\r\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * \\@docs-private\n */\nexport class MdButtonToggleGroupBase {}\r\nexport const /** @type {?} */ _MdButtonToggleGroupMixinBase = mixinDisabled(MdButtonToggleGroupBase);\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\rThis allows it to support [(ngModel)].\r\\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdButtonToggleGroup),\r\n  multi: true\r\n};\r\n\r\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n/**\n * The MdButtonToggle that emits the event.\n */\nsource: MdButtonToggle | null;\n/**\n * The value assigned to the MdButtonToggle.\n */\nvalue: any;\r\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup extends _MdButtonToggleGroupMixinBase\r\n    implements ControlValueAccessor, CanDisable {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MdButtonToggle | null = null;\n/**\n * The method to be called in order to update ngModel.\rNow `ngModel` binding is not supported in multiple selection mode.\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MdButtonToggle>;\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\r\n    return this._name;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\r\n    this._name = value;\r\n    this._updateButtonToggleNames();\r\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\r\n    return this._vertical;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\r\n    this._vertical = coerceBooleanProperty(value);\r\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\r\n    return this._value;\r\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\r\n    if (this._value != newValue) {\r\n      this._value = newValue;\r\n\r\n      this._updateSelectedButtonToggleFromValue();\r\n    }\r\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\r\n    return this._selected;\r\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle | null) {\r\n    this._selected = selected;\r\n    this.value = selected ? selected.value : null;\r\n\r\n    if (selected && !selected.checked) {\r\n      selected.checked = true;\r\n    }\r\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\r\n    super();\r\n  }\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\r\n    if (this._buttonToggles) {\r\n      this._buttonToggles.forEach((toggle) => {\r\n        toggle.name = this._name;\r\n      });\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\r\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\r\n\r\n    if (this._buttonToggles != null && !isAlreadySelected) {\r\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\r\n          buttonToggle => buttonToggle.value == this._value)[0];\r\n\r\n      if (matchingButtonToggle) {\r\n        this.selected = matchingButtonToggle;\r\n      } else if (this.value == null) {\r\n        this.selected = null;\r\n        this._buttonToggles.forEach(buttonToggle => {\r\n          buttonToggle.checked = false;\r\n        });\r\n      }\r\n    }\r\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\r\n    let /** @type {?} */ event = new MdButtonToggleChange();\r\n    event.source = this._selected;\r\n    event.value = this._value;\r\n    this._controlValueAccessorChangeFn(event.value);\r\n    this.change.emit(event);\r\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\r\\@param value Value to be set to the model.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\r\n    this.value = value;\r\n    this._changeDetector.markForCheck();\r\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\rImplemented as part of ControlValueAccessor.\r\\@param fn On change callback function.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\rImplemented as part of ControlValueAccessor.\r\\@param fn On touch callback function.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\r\\@param isDisabled Whether the component should be disabled.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\r\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\r\n  inputs: ['disabled'],\r\n  host: {\r\n    'role': 'radiogroup',\r\n    'class': 'mat-button-toggle-group',\r\n    '[class.mat-button-toggle-vertical]': 'vertical'\r\n  },\r\n  exportAs: 'mdButtonToggleGroup, matButtonToggleGroup',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * The method to be called in order to update ngModel.\rNow `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMdButtonToggleGroup.prototype.change;\n/** @type {?} */\nMdButtonToggleGroup.prototype._changeDetector;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple extends _MdButtonToggleGroupMixinBase\r\n    implements CanDisable {\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\r\n    return this._vertical;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\r\n    this._vertical = coerceBooleanProperty(value);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\r\n  exportAs: 'mdButtonToggleGroup, matButtonToggleGroup',\r\n  inputs: ['disabled'],\r\n  host: {\r\n    'class': 'mat-button-toggle-group',\r\n    '[class.mat-button-toggle-vertical]': 'vertical',\r\n    'role': 'group'\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit, OnDestroy {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\rtake precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = false;\n/**\n * Unregister function for _buttonToggleDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\r\n\r\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MdButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\r\n    return `${this.id}-input`;\r\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\r\n    if (this._isSingleSelector && newCheckedState) {\r\n      // Notify all button toggles with the same name (in the same group) to un-check.\r\n      this._buttonToggleDispatcher.notify(this.id, this.name);\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    this._checked = newCheckedState;\r\n\r\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\r\n      this.buttonToggleGroup.selected = this;\r\n    }\r\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\r\n    return this._value;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\r\n    if (this._value != value) {\r\n      if (this.buttonToggleGroup != null && this.checked) {\r\n        this.buttonToggleGroup.value = value;\r\n      }\r\n      this._value = value;\r\n    }\r\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\r\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\r\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _changeDetectorRef\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\r\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusMonitor: FocusMonitor) {\r\n\r\n    this.buttonToggleGroup = toggleGroup;\r\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\r\n\r\n    if (this.buttonToggleGroup) {\r\n      this._removeUniqueSelectionListener =\r\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\r\n          if (id != this.id && name == this.name) {\r\n            this.checked = false;\r\n            this._changeDetectorRef.markForCheck();\r\n          }\r\n        });\r\n\r\n      this._type = 'radio';\r\n      this.name = this.buttonToggleGroup.name;\r\n      this._isSingleSelector = true;\r\n    } else {\r\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\r\n      // toggled on or off.\r\n      this._type = 'checkbox';\r\n      this._isSingleSelector = false;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    if (this.id == null) {\r\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\r\n    }\r\n\r\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\r\n      this._checked = true;\r\n    }\r\n    this._focusMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\r\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\r\n    this._inputElement.nativeElement.focus();\r\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\r\n    this.checked = !this.checked;\r\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\r\n    event.stopPropagation();\r\n\r\n    if (this._isSingleSelector) {\r\n      // Propagate the change one-way via the group, which will in turn mark this\r\n      // button toggle as checked.\r\n      let /** @type {?} */ groupValueChanged = this.buttonToggleGroup.selected != this;\r\n      this.checked = true;\r\n      this.buttonToggleGroup.selected = this;\r\n      this.buttonToggleGroup.onTouched();\r\n      if (groupValueChanged) {\r\n        this.buttonToggleGroup._emitChangeEvent();\r\n      }\r\n    } else {\r\n      this._toggle();\r\n    }\r\n\r\n    // Emit a change event when the native input does.\r\n    this._emitChangeEvent();\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `slide-toggle` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\r\n    let /** @type {?} */ event = new MdButtonToggleChange();\r\n    event.source = this;\r\n    event.value = this._value;\r\n    this.change.emit(event);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\r\n    this._removeUniqueSelectionListener();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-button-toggle, mat-button-toggle',\r\n  templateUrl: 'button-toggle.html',\r\n  styleUrls: ['button-toggle.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\r\n    '[class.mat-button-toggle-checked]': 'checked',\r\n    '[class.mat-button-toggle-disabled]': 'disabled',\r\n    'class': 'mat-button-toggle',\r\n    '[attr.id]': 'id',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\rtake precedence so this may be omitted.\n * @type {?}\n */\nMdButtonToggle.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdButtonToggle.prototype.ariaLabelledby;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/**\n * Unregister function for _buttonToggleDispatcher *\n * @type {?}\n */\nMdButtonToggle.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype.change;\n/** @type {?} */\nMdButtonToggle.prototype._changeDetectorRef;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusMonitor;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}