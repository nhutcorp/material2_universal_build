{"version":3,"file":"datepicker.es5.js","sources":["../../../src/lib/datepicker/index.ts","../../../src/lib/datepicker/datepicker-module.ts","../../../src/lib/datepicker/year-view.ts","../../../src/lib/datepicker/month-view.ts","../../../src/lib/datepicker/datepicker-toggle.ts","../../../src/lib/datepicker/datepicker-input.ts","../../../src/lib/datepicker/datepicker.ts","../../../src/lib/datepicker/calendar-body.ts","../../../src/lib/datepicker/calendar.ts","../../../src/lib/datepicker/datepicker-intl.ts","../../../src/lib/datepicker/datepicker-errors.ts","../../../src/lib/datepicker/coerce-date-property.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdDatepickerModule,MdCalendar,MdCalendarCell,MdCalendarBody,coerceDateProperty,MD_DATEPICKER_SCROLL_STRATEGY,MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,MdDatepickerContent,MdDatepicker,MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInputEvent,MdDatepickerInput,MdDatepickerIntl,MdDatepickerToggle,MdMonthView,MdYearView,MAT_DATEPICKER_SCROLL_STRATEGY,MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,MAT_DATEPICKER_VALIDATORS,MAT_DATEPICKER_VALUE_ACCESSOR,MatCalendar,MatCalendarBody,MatCalendarCell,MatDatepicker,MatDatepickerContent,MatDatepickerInput,MatDatepickerInputEvent,MatDatepickerIntl,MatDatepickerModule,MatDatepickerToggle,MatMonthView,MatYearView} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MdButtonModule} from '@angular/material/button';\r\nimport {MdDialogModule} from '@angular/material/dialog';\r\nimport {MdIconModule} from '@angular/material/icon';\r\nimport {MdCalendar} from './calendar';\r\nimport {MdCalendarBody} from './calendar-body';\r\nimport {\r\n  MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\r\n  MdDatepicker,\r\n  MdDatepickerContent,\r\n} from './datepicker';\r\nimport {MdDatepickerInput} from './datepicker-input';\r\nimport {MdDatepickerIntl} from './datepicker-intl';\r\nimport {MdDatepickerToggle} from './datepicker-toggle';\r\nimport {MdMonthView} from './month-view';\r\nimport {MdYearView} from './year-view';\nexport class MdDatepickerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    CommonModule,\r\n    MdButtonModule,\r\n    MdDialogModule,\r\n    MdIconModule,\r\n    OverlayModule,\r\n    A11yModule,\r\n  ],\r\n  exports: [\r\n    MdCalendar,\r\n    MdCalendarBody,\r\n    MdDatepicker,\r\n    MdDatepickerContent,\r\n    MdDatepickerInput,\r\n    MdDatepickerToggle,\r\n    MdMonthView,\r\n    MdYearView,\r\n  ],\r\n  declarations: [\r\n    MdCalendar,\r\n    MdCalendarBody,\r\n    MdDatepicker,\r\n    MdDatepickerContent,\r\n    MdDatepickerInput,\r\n    MdDatepickerToggle,\r\n    MdMonthView,\r\n    MdYearView,\r\n  ],\r\n  providers: [\r\n    MdDatepickerIntl,\r\n    MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\r\n  ],\r\n  entryComponents: [\r\n    MdDatepickerContent,\r\n  ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter, MD_DATE_FORMATS, MdDateFormats} from '@angular/material/core';\r\nimport {MdCalendarCell} from './calendar-body';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {createMissingDateImplError} from './datepicker-errors';\n/**\n * An internal component used to display a single year in the datepicker.\r\\@docs-private\n */\nexport class MdYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\r\n    let /** @type {?} */ oldActiveDate = this._activeDate;\r\n    this._activeDate = coerceDateProperty(this._dateAdapter, value) || this._dateAdapter.today();\r\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) {\r\n    this._selected = coerceDateProperty(this._dateAdapter, value);\r\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\r\n  }\nprivate _selected: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MdCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number | null;\n/**\n * The month in this year that the selected Date falls on.\rNull if the selected Date is in a different year.\n */\n_selectedMonth: number | null;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MD_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._init();\r\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\r\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(\r\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\r\n    this.selectedChange.emit(this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate), month,\r\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\r\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n\r\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\r\n        month => this._createCellForMonth(month, monthNames[month])));\r\n  }\n/**\n * Gets the month in this year that the given Date falls on.\rReturns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D | null) {\r\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\r\n        this._dateAdapter.getMonth(date) : null;\r\n  }\n/**\n * Creates an MdCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\r\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\r\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\r\n        this._dateFormats.display.monthYearA11yLabel);\r\n    return new MdCalendarCell(\r\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\r\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate), month, 1);\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\r\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-year-view, mat-year-view',\r\n  templateUrl: 'year-view.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdYearView.ctorParameters;\n/** @type {?} */\nMdYearView.propDecorators;\n/** @type {?} */\nMdYearView.prototype._activeDate;\n/** @type {?} */\nMdYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMdYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMdYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMdYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMdYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\rNull if the selected Date is in a different year.\n * @type {?}\n */\nMdYearView.prototype._selectedMonth;\n/** @type {?} */\nMdYearView.prototype._dateAdapter;\n/** @type {?} */\nMdYearView.prototype._dateFormats;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  DateAdapter, MATERIAL_COMPATIBILITY_MODE, MD_DATE_FORMATS,\r\n  MdDateFormats\r\n} from '@angular/material/core';\r\nimport {MdCalendarCell} from './calendar-body';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\r\\@docs-private\n */\nexport class MdMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\r\n    let /** @type {?} */ oldActiveDate = this._activeDate;\r\n    this._activeDate = coerceDateProperty(this._dateAdapter, value) || this._dateAdapter.today();\r\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) {\r\n    this._selected = coerceDateProperty(this._dateAdapter, value);\r\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\r\n  }\nprivate _selected: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D | null>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MdCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\rNull if the currently selected Date is in another month.\n */\n_selectedDate: number | null;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number | null;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MD_DATE_FORMATS');\r\n    }\r\n\r\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    let weekdays = longWeekdays.map((long, i) => {\r\n      return {long, narrow: narrowWeekdays[i]};\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\r\n    this._init();\r\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\r\n    if (this._selectedDate != date) {\r\n      const /** @type {?} */ selectedYear = this._dateAdapter.getYear(this.activeDate);\r\n      const /** @type {?} */ selectedMonth = this._dateAdapter.getMonth(this.activeDate);\r\n      const /** @type {?} */ selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\r\n\r\n      this.selectedChange.emit(selectedDate);\r\n    }\r\n\r\n    this.userSelection.emit();\r\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\r\n    this._monthLabel =\r\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\r\n            .toLocaleUpperCase();\r\n\r\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate), 1);\r\n    this._firstWeekOffset =\r\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\r\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\r\n\r\n    this._createWeekCells();\r\n  }\n/**\n * Creates MdCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\r\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\r\n      if (cell == DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      let /** @type {?} */ date = this._dateAdapter.createDate(\r\n          this._dateAdapter.getYear(this.activeDate),\r\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\r\n      let /** @type {?} */ enabled = !this.dateFilter ||\r\n          this.dateFilter(date);\r\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      this._weeks[this._weeks.length - 1]\r\n          .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\r\n    }\r\n  }\n/**\n * Gets the date in this month that the given Date falls on.\rReturns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D | null): number | null {\r\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\r\n        this._dateAdapter.getDate(date) : null;\r\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\r\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\r\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-month-view',\r\n  templateUrl: 'month-view.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MdMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMonthView.ctorParameters;\n/** @type {?} */\nMdMonthView.propDecorators;\n/** @type {?} */\nMdMonthView.prototype._activeDate;\n/** @type {?} */\nMdMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMdMonthView.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMdMonthView.prototype.userSelection;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMdMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMdMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMdMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\rNull if the currently selected Date is in another month.\n * @type {?}\n */\nMdMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMdMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMdMonthView.prototype._weekdays;\n/** @type {?} */\nMdMonthView.prototype._dateAdapter;\n/** @type {?} */\nMdMonthView.prototype._dateFormats;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  OnDestroy,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {MdDatepicker} from './datepicker';\r\nimport {MdDatepickerIntl} from './datepicker-intl';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {of as observableOf} from 'rxjs/observable/of';\r\nimport {MATERIAL_COMPATIBILITY_MODE} from '@angular/material/core';\nexport class MdDatepickerToggle<D> implements OnChanges, OnDestroy {\nprivate _stateChanges = Subscription.EMPTY;\n/**\n * Datepicker instance that the button will toggle.\n */\ndatepicker: MdDatepicker<D>;\n/**\n * Whether the toggle button is disabled.\n * @return {?}\n */\nget disabled() {\r\n    return this._disabled === undefined ? this.datepicker.disabled : this._disabled;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\nprivate _disabled: boolean;\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n */\nconstructor(\npublic _intl: MdDatepickerIntl,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n    if (changes.datepicker) {\r\n      const /** @type {?} */ datepicker: MdDatepicker<D> = changes.datepicker.currentValue;\r\n      const /** @type {?} */ datepickerDisabled = datepicker ? datepicker._disabledChange : observableOf();\r\n      const /** @type {?} */ inputDisabled = datepicker && datepicker._datepickerInput ?\r\n        datepicker._datepickerInput._disabledChange :\r\n        observableOf();\r\n\r\n      this._stateChanges.unsubscribe();\r\n      this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\r\n        .subscribe(() => this._changeDetectorRef.markForCheck());\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_open(event: Event): void {\r\n    if (this.datepicker && !this.disabled) {\r\n      this.datepicker.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-datepicker-toggle, mat-datepicker-toggle',\r\n  templateUrl: 'datepicker-toggle.html',\r\n  host: {\r\n    'class': 'mat-datepicker-toggle',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDatepickerIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'datepicker': [{ type: Input, args: ['for', ] },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdDatepickerToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerToggle.ctorParameters;\n/** @type {?} */\nMdDatepickerToggle.propDecorators;\n/** @type {?} */\nMdDatepickerToggle.prototype._stateChanges;\n/**\n * Datepicker instance that the button will toggle.\n * @type {?}\n */\nMdDatepickerToggle.prototype.datepicker;\n/** @type {?} */\nMdDatepickerToggle.prototype._disabled;\n/** @type {?} */\nMdDatepickerToggle.prototype._intl;\n/** @type {?} */\nMdDatepickerToggle.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport {DateAdapter, MD_DATE_FORMATS, MdDateFormats} from '@angular/material/core';\r\nimport {MdFormField} from '@angular/material/form-field';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {MdDatepicker} from './datepicker';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\n\r\n\r\nexport const /** @type {?} */ MD_DATEPICKER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdDatepickerInput),\r\n  multi: true\r\n};\r\n\r\n\r\nexport const /** @type {?} */ MD_DATEPICKER_VALIDATORS: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MdDatepickerInput),\r\n  multi: true\r\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\rinput or change event because the event may have been triggered by the user clicking on the\rcalendar popup. For consistency, we always use MdDatepickerInputEvent instead.\n */\nexport class MdDatepickerInputEvent<D> {\n/**\n * The new value for the target datepicker input.\n */\nvalue: D | null;\n/**\n * @param {?} target\n * @param {?} targetElement\n */\nconstructor(public target: MdDatepickerInput<D>,\npublic targetElement: HTMLElement) {\r\n    this.value = this.target.value;\r\n  }\r\n}\n\nfunction MdDatepickerInputEvent_tsickle_Closure_declarations() {\n/**\n * The new value for the target datepicker input.\n * @type {?}\n */\nMdDatepickerInputEvent.prototype.value;\n/** @type {?} */\nMdDatepickerInputEvent.prototype.target;\n/** @type {?} */\nMdDatepickerInputEvent.prototype.targetElement;\n}\n\n/**\n * Directive used to connect an input to a MdDatepicker.\n */\nexport class MdDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\r\n    Validator {\n/**\n * The datepicker that this input is associated with.\n * @param {?} value\n * @return {?}\n */\nset mdDatepicker(value: MdDatepicker<D>) {\r\n    this.registerDatepicker(value);\r\n  }\r\n  _datepicker: MdDatepicker<D>;\n/**\n * @param {?} value\n * @return {?}\n */\nprivate registerDatepicker(value: MdDatepicker<D>) {\r\n    if (value) {\r\n      this._datepicker = value;\r\n      this._datepicker._registerInput(this);\r\n    }\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset matDatepicker(value: MdDatepicker<D>) {\r\n    // Note that we don't set `this.mdDatepicker = value` here,\r\n    // because that line gets stripped by the JS compiler.\r\n    this.registerDatepicker(value);\r\n  }\n/**\n * @param {?} filter\n * @return {?}\n */\nset mdDatepickerFilter(filter: (date: D | null) => boolean) {\r\n    this._dateFilter = filter;\r\n    this._validatorOnChange();\r\n  }\r\n  _dateFilter: (date: D | null) => boolean;\n/**\n * @param {?} filter\n * @return {?}\n */\nset matDatepickerFilter(filter: (date: D | null) => boolean) {\r\n    this.mdDatepickerFilter = filter;\r\n  }\n/**\n * The value of the input.\n * @return {?}\n */\nget value(): D | null {\r\n    return this._value;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: D | null) {\r\n    value = coerceDateProperty(this._dateAdapter, value);\r\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n    value = this._getValidDateOrNull(value);\r\n\r\n    let /** @type {?} */ oldDate = this.value;\r\n    this._value = value;\r\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\r\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '');\r\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\r\n      this._valueChange.emit(value);\r\n    }\r\n  }\nprivate _value: D | null;\n/**\n * The minimum valid date.\n * @return {?}\n */\nget min(): D | null { return this._min; }\n/**\n * @param {?} value\n * @return {?}\n */\nset min(value: D | null) {\r\n    this._min = coerceDateProperty(this._dateAdapter, value);\r\n    this._validatorOnChange();\r\n  }\nprivate _min: D | null;\n/**\n * The maximum valid date.\n * @return {?}\n */\nget max(): D | null { return this._max; }\n/**\n * @param {?} value\n * @return {?}\n */\nset max(value: D | null) {\r\n    this._max = coerceDateProperty(this._dateAdapter, value);\r\n    this._validatorOnChange();\r\n  }\nprivate _max: D | null;\n/**\n * Whether the datepicker-input is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\r\n    const /** @type {?} */ newValue = coerceBooleanProperty(value);\r\n\r\n    if (this._disabled !== newValue) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.emit(newValue);\r\n    }\r\n  }\nprivate _disabled: boolean;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n */\ndateChange = new EventEmitter<MdDatepickerInputEvent<D>>();\n/**\n * Emits when an `input` event is fired on this `<input>`.\n */\ndateInput = new EventEmitter<MdDatepickerInputEvent<D>>();\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n */\n_valueChange = new EventEmitter<D|null>();\n/**\n * Emits when the disabled state has changed\n */\n_disabledChange = new EventEmitter<boolean>();\r\n\r\n  _onTouched = () => {};\nprivate _cvaOnChange: (value: any) => void = () => {};\nprivate _validatorOnChange = () => {};\nprivate _datepickerSubscription = Subscription.EMPTY;\nprivate _localeSubscription = Subscription.EMPTY;\n/**\n * The form control validator for whether the input parses.\n */\nprivate _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n    return this._lastValueValid ?\r\n        null : {'mdDatepickerParse': {'text': this._elementRef.nativeElement.value}};\r\n  }\n/**\n * The form control validator for the min date.\n */\nprivate _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\r\n    return (!this.min || !controlValue ||\r\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\r\n        null : {'mdDatepickerMin': {'min': this.min, 'actual': controlValue}};\r\n  }\n/**\n * The form control validator for the max date.\n */\nprivate _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\r\n    return (!this.max || !controlValue ||\r\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\r\n        null : {'mdDatepickerMax': {'max': this.max, 'actual': controlValue}};\r\n  }\n/**\n * The form control validator for the date filter.\n */\nprivate _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\r\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\r\n        null : {'mdDatepickerFilter': true};\r\n  }\n/**\n * The combined form control validator for this input.\n */\nprivate _validator: ValidatorFn | null =\r\n      Validators.compose(\r\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n/**\n * Whether the last value set on the input was valid.\n */\nprivate _lastValueValid = false;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _mdFormField\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\nprivate _mdFormField: MdFormField) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MD_DATE_FORMATS');\r\n    }\r\n\r\n    // Update the displayed date when the locale changes.\r\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n      this.value = this.value;\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    if (this._datepicker) {\r\n      this._datepickerSubscription =\r\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\r\n            this.value = selected;\r\n            this._cvaOnChange(selected);\r\n            this._onTouched();\r\n            this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n            this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n          });\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._datepickerSubscription.unsubscribe();\r\n    this._localeSubscription.unsubscribe();\r\n    this._valueChange.complete();\r\n    this._disabledChange.complete();\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\r\n    this._validatorOnChange = fn;\r\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(c) : null;\r\n  }\n/**\n * Gets the element that the datepicker popup should be connected to.\r\\@return The element to connect the popup to.\n * @return {?}\n */\ngetPopupConnectionElementRef(): ElementRef {\r\n    return this._mdFormField ? this._mdFormField.underlineRef : this._elementRef;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: D): void {\r\n    this.value = value;\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\r\n    this._cvaOnChange = fn;\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\r\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\r\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\r\n      this._datepicker.open();\r\n      event.preventDefault();\r\n    }\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n_onInput(value: string) {\r\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\r\n    date = this._getValidDateOrNull(date);\r\n    this._value = date;\r\n    this._cvaOnChange(date);\r\n    this._valueChange.emit(date);\r\n    this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\n/**\n * @return {?}\n */\n_onChange() {\r\n    this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\n/**\n * @param {?} obj The object to check.\n * @return {?}\n */\nprivate _getValidDateOrNull(obj: any): D | null {\r\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'input[mdDatepicker], input[matDatepicker]',\r\n  providers: [MD_DATEPICKER_VALUE_ACCESSOR, MD_DATEPICKER_VALIDATORS],\r\n  host: {\r\n    '[attr.aria-haspopup]': 'true',\r\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n    '[disabled]': 'disabled',\r\n    '(input)': '_onInput($event.target.value)',\r\n    '(change)': '_onChange()',\r\n    '(blur)': '_onTouched()',\r\n    '(keydown)': '_onKeydown($event)',\r\n  },\r\n  exportAs: 'mdDatepickerInput, matDatepickerInput',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: MdFormField, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdDatepicker': [{ type: Input },],\n'matDatepicker': [{ type: Input },],\n'mdDatepickerFilter': [{ type: Input },],\n'matDatepickerFilter': [{ type: Input },],\n'value': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n'disabled': [{ type: Input },],\n'dateChange': [{ type: Output },],\n'dateInput': [{ type: Output },],\n};\n}\n\nfunction MdDatepickerInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerInput.ctorParameters;\n/** @type {?} */\nMdDatepickerInput.propDecorators;\n/** @type {?} */\nMdDatepickerInput.prototype._datepicker;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFilter;\n/** @type {?} */\nMdDatepickerInput.prototype._value;\n/** @type {?} */\nMdDatepickerInput.prototype._min;\n/** @type {?} */\nMdDatepickerInput.prototype._max;\n/** @type {?} */\nMdDatepickerInput.prototype._disabled;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n * @type {?}\n */\nMdDatepickerInput.prototype.dateChange;\n/**\n * Emits when an `input` event is fired on this `<input>`.\n * @type {?}\n */\nMdDatepickerInput.prototype.dateInput;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n * @type {?}\n */\nMdDatepickerInput.prototype._valueChange;\n/**\n * Emits when the disabled state has changed\n * @type {?}\n */\nMdDatepickerInput.prototype._disabledChange;\n/** @type {?} */\nMdDatepickerInput.prototype._onTouched;\n/** @type {?} */\nMdDatepickerInput.prototype._cvaOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._validatorOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._datepickerSubscription;\n/** @type {?} */\nMdDatepickerInput.prototype._localeSubscription;\n/**\n * The form control validator for whether the input parses.\n * @type {?}\n */\nMdDatepickerInput.prototype._parseValidator;\n/**\n * The form control validator for the min date.\n * @type {?}\n */\nMdDatepickerInput.prototype._minValidator;\n/**\n * The form control validator for the max date.\n * @type {?}\n */\nMdDatepickerInput.prototype._maxValidator;\n/**\n * The form control validator for the date filter.\n * @type {?}\n */\nMdDatepickerInput.prototype._filterValidator;\n/**\n * The combined form control validator for this input.\n * @type {?}\n */\nMdDatepickerInput.prototype._validator;\n/**\n * Whether the last value set on the input was valid.\n * @type {?}\n */\nMdDatepickerInput.prototype._lastValueValid;\n/** @type {?} */\nMdDatepickerInput.prototype._elementRef;\n/** @type {?} */\nMdDatepickerInput.prototype._renderer;\n/** @type {?} */\nMdDatepickerInput.prototype._dateAdapter;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFormats;\n/** @type {?} */\nMdDatepickerInput.prototype._mdFormField;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {\r\n  Overlay,\r\n  OverlayRef,\r\n  OverlayConfig,\r\n  PositionStrategy,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport {ComponentPortal} from '@angular/cdk/portal';\r\nimport {first} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {DateAdapter, MATERIAL_COMPATIBILITY_MODE} from '@angular/material/core';\r\nimport {MdDialog, MdDialogRef} from '@angular/material/dialog';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MdCalendar} from './calendar';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\nimport {MdDatepickerInput} from './datepicker-input';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n */\nexport const MD_DATEPICKER_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('md-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\n/**\n * \\@docs-private\n */\nexport const MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MD_DATEPICKER_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\rMdCalendar directly as the content so we can control the initial focus. This also gives us a\rplace to put additional features of the popup that are not part of the calendar itself in the\rfuture. (e.g. confirmation buttons).\r\\@docs-private\n */\nexport class MdDatepickerContent<D> implements AfterContentInit {\r\n  datepicker: MdDatepicker<D>;\r\n\r\n   _calendar: MdCalendar<D>;\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._calendar._focusActiveCell();\r\n  }\n/**\n * Handles keydown event on datepicker content.\r\\@param event The event.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ESCAPE) {\r\n      this.datepicker.close();\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-datepicker-content, mat-datepicker-content',\r\n  templateUrl: 'datepicker-content.html',\r\n  styleUrls: ['datepicker-content.css'],\r\n  host: {\r\n    'class': 'mat-datepicker-content',\r\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n    '(keydown)': '_handleKeydown($event)',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_calendar': [{ type: ViewChild, args: [MdCalendar, ] },],\n};\n}\n\nfunction MdDatepickerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerContent.ctorParameters;\n/** @type {?} */\nMdDatepickerContent.propDecorators;\n/** @type {?} */\nMdDatepickerContent.prototype.datepicker;\n/** @type {?} */\nMdDatepickerContent.prototype._calendar;\n}\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nexport class MdDatepicker<D> implements OnDestroy {\n/**\n * The date to open the calendar to initially.\n * @return {?}\n */\nget startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\r\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nset startAt(date: D | null) { this._startAt = coerceDateProperty(this._dateAdapter, date); }\nprivate _startAt: D | null;\n/**\n * The view that the calendar should start in.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\rthan a popup and elements have more padding to allow for bigger touch targets.\n */\ntouchUi = false;\n/**\n * Whether the datepicker pop-up should be disabled.\n * @return {?}\n */\nget disabled() {\r\n    return this._disabled === undefined ? this._datepickerInput.disabled : this._disabled;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\r\n    const /** @type {?} */ newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.next(newValue);\r\n    }\r\n  }\nprivate _disabled: boolean;\n/**\n * Emits new selected date when selected date changes.\r\\@deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n */\nselectedChanged = new EventEmitter<D>();\n/**\n * Whether the calendar is open.\n */\nopened = false;\n/**\n * The id for the datepicker calendar.\n */\nid = `md-datepicker-${datepickerUid++}`;\n/**\n * The currently selected date.\n * @return {?}\n */\nget _selected(): D | null { return this._validSelected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _selected(value: D | null) { this._validSelected = value; }\nprivate _validSelected: D | null = null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget _minDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.min;\r\n  }\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget _maxDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.max;\r\n  }\n/**\n * @return {?}\n */\nget _dateFilter(): (date: D | null) => boolean {\r\n    return this._datepickerInput && this._datepickerInput._dateFilter;\r\n  }\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n */\nprivate _popupRef: OverlayRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n */\nprivate _dialogRef: MdDialogRef<any> | null;\n/**\n * A portal containing the calendar for this datepicker.\n */\nprivate _calendarPortal: ComponentPortal<MdDatepickerContent<D>>;\n/**\n * The element that was focused before the datepicker was opened.\n */\nprivate _focusedElementBeforeOpen: HTMLElement | null = null;\nprivate _inputSubscription = Subscription.EMPTY;\n/**\n * The input element this datepicker is associated with.\n */\n_datepickerInput: MdDatepickerInput<D>;\n/**\n * Emits when the datepicker is disabled.\n */\n_disabledChange = new Subject<boolean>();\n/**\n * @param {?} _dialog\n * @param {?} _overlay\n * @param {?} _ngZone\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _dateAdapter\n * @param {?} _dir\n * @param {?} _document\n */\nconstructor(private _dialog: MdDialog,\nprivate _overlay: Overlay,\nprivate _ngZone: NgZone,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dir: Directionality,\nprivate _document: any) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n    }\r\n  }\n/**\n * Selects the given date\n * @param {?} date\n * @return {?}\n */\n_select(date: D): void {\r\n    let /** @type {?} */ oldValue = this._selected;\r\n    this._selected = date;\r\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\r\n      this.selectedChanged.emit(date);\r\n    }\r\n  }\n/**\n * Register an input with this datepicker.\r\\@param input The datepicker input to register with this datepicker.\n * @param {?} input\n * @return {?}\n */\n_registerInput(input: MdDatepickerInput<D>): void {\r\n    if (this._datepickerInput) {\r\n      throw Error('An MdDatepicker can only be associated with a single input.');\r\n    }\r\n    this._datepickerInput = input;\r\n    this._inputSubscription =\r\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\r\n  }\n/**\n * Open the calendar.\n * @return {?}\n */\nopen(): void {\r\n    if (this.opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._datepickerInput) {\r\n      throw Error('Attempted to open an MdDatepicker with no associated input.');\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this.opened = true;\r\n  }\n/**\n * Close the calendar.\n * @return {?}\n */\nclose(): void {\r\n    if (!this.opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n      this._calendarPortal.detach();\r\n    }\r\n    if (this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n\r\n      this._focusedElementBeforeOpen.focus();\r\n      this._focusedElementBeforeOpen = null;\r\n    }\r\n\r\n    this.opened = false;\r\n  }\n/**\n * Open the calendar as a dialog.\n * @return {?}\n */\nprivate _openAsDialog(): void {\r\n    this._dialogRef = this._dialog.open(MdDatepickerContent, {\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      viewContainerRef: this._viewContainerRef,\r\n    });\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.datepicker = this;\r\n  }\n/**\n * Open the calendar as a popup.\n * @return {?}\n */\nprivate _openAsPopup(): void {\r\n    if (!this._calendarPortal) {\r\n      this._calendarPortal = new ComponentPortal(MdDatepickerContent, this._viewContainerRef);\r\n    }\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      let /** @type {?} */ componentRef: ComponentRef<MdDatepickerContent<D>> =\r\n          this._popupRef.attach(this._calendarPortal);\r\n      componentRef.instance.datepicker = this;\r\n\r\n      // Update the position once the calendar has rendered.\r\n      first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\r\n        this._popupRef.updatePosition();\r\n      });\r\n    }\r\n\r\n    this._popupRef.backdropClick().subscribe(() => this.close());\r\n  }\n/**\n * Create the popup.\n * @return {?}\n */\nprivate _createPopup(): void {\r\n    const /** @type {?} */ overlayState = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: true,\r\n      backdropClass: 'mat-overlay-transparent-backdrop',\r\n      direction: this._dir ? this._dir.value : 'ltr',\r\n      scrollStrategy: this._scrollStrategy()\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayState);\r\n  }\n/**\n * Create the popup PositionStrategy.\n * @return {?}\n */\nprivate _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay.position()\r\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\r\n        {originX: 'start', originY: 'bottom'},\r\n        {overlayX: 'start', overlayY: 'top'}\r\n      )\r\n      .withFallbackPosition(\r\n        { originX: 'start', originY: 'top' },\r\n        { overlayX: 'start', overlayY: 'bottom' }\r\n      )\r\n      .withFallbackPosition(\r\n        {originX: 'end', originY: 'bottom'},\r\n        {overlayX: 'end', overlayY: 'top'}\r\n      )\r\n      .withFallbackPosition(\r\n        { originX: 'end', originY: 'top' },\r\n        { overlayX: 'end', overlayY: 'bottom' }\r\n      );\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-datepicker, mat-datepicker',\r\n  template: '',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n{type: Overlay, },\n{type: NgZone, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_DATEPICKER_SCROLL_STRATEGY, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'touchUi': [{ type: Input },],\n'disabled': [{ type: Input },],\n'selectedChanged': [{ type: Output },],\n};\n}\n\nfunction MdDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepicker.ctorParameters;\n/** @type {?} */\nMdDatepicker.propDecorators;\n/** @type {?} */\nMdDatepicker.prototype._startAt;\n/**\n * The view that the calendar should start in.\n * @type {?}\n */\nMdDatepicker.prototype.startView;\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\rthan a popup and elements have more padding to allow for bigger touch targets.\n * @type {?}\n */\nMdDatepicker.prototype.touchUi;\n/** @type {?} */\nMdDatepicker.prototype._disabled;\n/**\n * Emits new selected date when selected date changes.\r\\@deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n * @type {?}\n */\nMdDatepicker.prototype.selectedChanged;\n/**\n * Whether the calendar is open.\n * @type {?}\n */\nMdDatepicker.prototype.opened;\n/**\n * The id for the datepicker calendar.\n * @type {?}\n */\nMdDatepicker.prototype.id;\n/** @type {?} */\nMdDatepicker.prototype._validSelected;\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n * @type {?}\n */\nMdDatepicker.prototype._popupRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n * @type {?}\n */\nMdDatepicker.prototype._dialogRef;\n/**\n * A portal containing the calendar for this datepicker.\n * @type {?}\n */\nMdDatepicker.prototype._calendarPortal;\n/**\n * The element that was focused before the datepicker was opened.\n * @type {?}\n */\nMdDatepicker.prototype._focusedElementBeforeOpen;\n/** @type {?} */\nMdDatepicker.prototype._inputSubscription;\n/**\n * The input element this datepicker is associated with.\n * @type {?}\n */\nMdDatepicker.prototype._datepickerInput;\n/**\n * Emits when the datepicker is disabled.\n * @type {?}\n */\nMdDatepicker.prototype._disabledChange;\n/** @type {?} */\nMdDatepicker.prototype._dialog;\n/** @type {?} */\nMdDatepicker.prototype._overlay;\n/** @type {?} */\nMdDatepicker.prototype._ngZone;\n/** @type {?} */\nMdDatepicker.prototype._viewContainerRef;\n/** @type {?} */\nMdDatepicker.prototype._scrollStrategy;\n/** @type {?} */\nMdDatepicker.prototype._dateAdapter;\n/** @type {?} */\nMdDatepicker.prototype._dir;\n/** @type {?} */\nMdDatepicker.prototype._document;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\r\\@docs-private\n */\nexport class MdCalendarCell {\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n */\nconstructor(public value: number,\npublic displayValue: string,\npublic ariaLabel: string,\npublic enabled: boolean) {}\r\n}\n\nfunction MdCalendarCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarCell.prototype.value;\n/** @type {?} */\nMdCalendarCell.prototype.displayValue;\n/** @type {?} */\nMdCalendarCell.prototype.ariaLabel;\n/** @type {?} */\nMdCalendarCell.prototype.enabled;\n}\n\n/**\n * An internal component used to display calendar data in a table.\r\\@docs-private\n */\nexport class MdCalendarBody {\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n */\nlabel: string;\n/**\n * The cells to display in the table.\n */\nrows: MdCalendarCell[][];\n/**\n * The value in the table that corresponds to today.\n */\ntodayValue: number;\n/**\n * The value in the table that is currently selected.\n */\nselectedValue: number;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n */\nlabelMinRequiredCells: number;\n/**\n * The number of columns in the table.\n */\nnumCols = 7;\n/**\n * Whether to allow selection of disabled cells.\n */\nallowDisabledSelection = false;\n/**\n * The cell number of the active cell in the table.\n */\nactiveCell = 0;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\rmaintained even as the table resizes.\n */\ncellAspectRatio = 1;\n/**\n * Emits when a new value is selected.\n */\nselectedValueChange = new EventEmitter<number>();\n/**\n * @param {?} cell\n * @return {?}\n */\n_cellClicked(cell: MdCalendarCell): void {\r\n    if (!this.allowDisabledSelection && !cell.enabled) {\r\n      return;\r\n    }\r\n    this.selectedValueChange.emit(cell.value);\r\n  }\n/**\n * The number of blank cells to put at the beginning for the first row.\n * @return {?}\n */\nget _firstRowOffset(): number {\r\n    return this.rows && this.rows.length && this.rows[0].length ?\r\n        this.numCols - this.rows[0].length : 0;\r\n  }\n/**\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\n_isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber == this.activeCell;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: '[md-calendar-body], [mat-calendar-body]',\r\n  templateUrl: 'calendar-body.html',\r\n  styleUrls: ['calendar-body.css'],\r\n  host: {\r\n    'class': 'mat-calendar-body',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'rows': [{ type: Input },],\n'todayValue': [{ type: Input },],\n'selectedValue': [{ type: Input },],\n'labelMinRequiredCells': [{ type: Input },],\n'numCols': [{ type: Input },],\n'allowDisabledSelection': [{ type: Input },],\n'activeCell': [{ type: Input },],\n'cellAspectRatio': [{ type: Input },],\n'selectedValueChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendarBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendarBody.ctorParameters;\n/** @type {?} */\nMdCalendarBody.propDecorators;\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n * @type {?}\n */\nMdCalendarBody.prototype.label;\n/**\n * The cells to display in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.rows;\n/**\n * The value in the table that corresponds to today.\n * @type {?}\n */\nMdCalendarBody.prototype.todayValue;\n/**\n * The value in the table that is currently selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValue;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n * @type {?}\n */\nMdCalendarBody.prototype.labelMinRequiredCells;\n/**\n * The number of columns in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.numCols;\n/**\n * Whether to allow selection of disabled cells.\n * @type {?}\n */\nMdCalendarBody.prototype.allowDisabledSelection;\n/**\n * The cell number of the active cell in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.activeCell;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\rmaintained even as the table resizes.\n * @type {?}\n */\nMdCalendarBody.prototype.cellAspectRatio;\n/**\n * Emits when a new value is selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValueChange;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  DateAdapter,\r\n  MATERIAL_COMPATIBILITY_MODE,\r\n  MD_DATE_FORMATS,\r\n  MdDateFormats,\r\n} from '@angular/material/core';\r\nimport {first} from 'rxjs/operator/first';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {coerceDateProperty} from './coerce-date-property';\r\nimport {createMissingDateImplError} from './datepicker-errors';\r\nimport {MdDatepickerIntl} from './datepicker-intl';\n/**\n * A calendar that is used as part of the datepicker.\r\\@docs-private\n */\nexport class MdCalendar<D> implements AfterContentInit, OnDestroy {\nprivate _intlChanges: Subscription;\n/**\n * A date representing the period (month or year) to start the calendar in.\n * @return {?}\n */\nget startAt(): D | null { return this._startAt; }\n/**\n * @param {?} value\n * @return {?}\n */\nset startAt(value: D | null) { this._startAt = coerceDateProperty(this._dateAdapter, value); }\nprivate _startAt: D | null;\n/**\n * Whether the calendar should be started in month or year view.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) { this._selected = coerceDateProperty(this._dateAdapter, value); }\nprivate _selected: D | null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget minDate(): D | null { return this._minDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minDate(value: D | null) { this._minDate = coerceDateProperty(this._dateAdapter, value); }\nprivate _minDate: D | null;\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget maxDate(): D | null { return this._maxDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxDate(value: D | null) { this._maxDate = coerceDateProperty(this._dateAdapter, value); }\nprivate _maxDate: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when the currently selected date changes.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * Date filter for the month and year views.\n */\n_dateFilterForViews = (date: D) => {\r\n    return !!date &&\r\n        (!this.dateFilter || this.dateFilter(date)) &&\r\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\r\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\r\n  }\n/**\n * The current active date. This determines which time period is shown and which date is\rhighlighted when using keyboard navigation.\n * @return {?}\n */\nget _activeDate(): D { return this._clampedActiveDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _activeDate(value: D) {\r\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n  }\nprivate _clampedActiveDate: D;\n/**\n * Whether the calendar is in month view.\n */\n_monthView: boolean;\n/**\n * The label for the current calendar view.\n * @return {?}\n */\nget _periodButtonText(): string {\r\n    return this._monthView ?\r\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\r\n            .toLocaleUpperCase() :\r\n        this._dateAdapter.getYearName(this._activeDate);\r\n  }\n/**\n * @return {?}\n */\nget _periodButtonLabel(): string {\r\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\r\n  }\n/**\n * The label for the the previous button.\n * @return {?}\n */\nget _prevButtonLabel(): string {\r\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\r\n  }\n/**\n * The label for the the next button.\n * @return {?}\n */\nget _nextButtonLabel(): string {\r\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\r\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _intl\n * @param {?} _ngZone\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} changeDetectorRef\n */\nconstructor(private _elementRef: ElementRef,\nprivate _intl: MdDatepickerIntl,\nprivate _ngZone: NgZone,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\r\n              changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DateAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MD_DATE_FORMATS');\r\n    }\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._activeDate = this.startAt || this._dateAdapter.today();\r\n    this._focusActiveCell();\r\n    this._monthView = this.startView != 'year';\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n  }\n/**\n * Handles date selection in the month view.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: D): void {\r\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\r\n      this.selectedChange.emit(date);\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_userSelected(): void {\r\n    this.userSelection.emit();\r\n  }\n/**\n * Handles month selection in the year view.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: D): void {\r\n    this._activeDate = month;\r\n    this._monthView = true;\r\n  }\n/**\n * Handles user clicks on the period label.\n * @return {?}\n */\n_currentPeriodClicked(): void {\r\n    this._monthView = !this._monthView;\r\n  }\n/**\n * Handles user clicks on the previous button.\n * @return {?}\n */\n_previousClicked(): void {\r\n    this._activeDate = this._monthView ?\r\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\r\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\r\n  }\n/**\n * Handles user clicks on the next button.\n * @return {?}\n */\n_nextClicked(): void {\r\n    this._activeDate = this._monthView ?\r\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\r\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\r\n  }\n/**\n * Whether the previous period button is enabled.\n * @return {?}\n */\n_previousEnabled(): boolean {\r\n    if (!this.minDate) {\r\n      return true;\r\n    }\r\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\r\n  }\n/**\n * Whether the next period button is enabled.\n * @return {?}\n */\n_nextEnabled(): boolean {\r\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\r\n  }\n/**\n * Handles keydown events on the calendar body.\n * @param {?} event\n * @return {?}\n */\n_handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n    if (this._monthView) {\r\n      this._handleCalendarBodyKeydownInMonthView(event);\r\n    } else {\r\n      this._handleCalendarBodyKeydownInYearView(event);\r\n    }\r\n  }\n/**\n * Focuses the active cell after the microtask queue is empty.\n * @return {?}\n */\n_focusActiveCell() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\r\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\r\n      });\r\n    });\r\n  }\n/**\n * Whether the two dates represent the same view in the current view mode (month or year).\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nprivate _isSameView(date1: D, date2: D): boolean {\r\n    return this._monthView ?\r\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\r\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\r\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\r\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in month view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            1 - this._dateAdapter.getDate(this._activeDate));\r\n        break;\r\n      case END:\r\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\r\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\r\n             this._dateAdapter.getDate(this._activeDate)));\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate = event.altKey ?\r\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\r\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n        if (this._dateFilterForViews(this._activeDate)) {\r\n          this._dateSelected(this._activeDate);\r\n          // Prevent unexpected default actions such as form submission.\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in year view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n            -this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case END:\r\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\r\n            11 - this._dateAdapter.getMonth(this._activeDate));\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate =\r\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate =\r\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\r\n        break;\r\n      case ENTER:\r\n        this._monthSelected(this._activeDate);\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    this._focusActiveCell();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\n/**\n * Determine the date for the month that comes before the given month in the same column in the\rcalendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _prevMonthInSameCol(date: D): D {\r\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\r\n    // of each year.\r\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\r\n        (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\r\n    return this._dateAdapter.addCalendarMonths(date, increment);\r\n  }\n/**\n * Determine the date for the month that comes after the given month in the same column in the\rcalendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _nextMonthInSameCol(date: D): D {\r\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\r\n    // of each year.\r\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\r\n        (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\r\n    return this._dateAdapter.addCalendarMonths(date, increment);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-calendar, mat-calendar',\r\n  templateUrl: 'calendar.html',\r\n  styleUrls: ['calendar.css'],\r\n  host: {\r\n    'class': 'mat-calendar',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdDatepickerIntl, },\n{type: NgZone, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'selected': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MdCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendar.ctorParameters;\n/** @type {?} */\nMdCalendar.propDecorators;\n/** @type {?} */\nMdCalendar.prototype._intlChanges;\n/** @type {?} */\nMdCalendar.prototype._startAt;\n/**\n * Whether the calendar should be started in month or year view.\n * @type {?}\n */\nMdCalendar.prototype.startView;\n/** @type {?} */\nMdCalendar.prototype._selected;\n/** @type {?} */\nMdCalendar.prototype._minDate;\n/** @type {?} */\nMdCalendar.prototype._maxDate;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdCalendar.prototype.dateFilter;\n/**\n * Emits when the currently selected date changes.\n * @type {?}\n */\nMdCalendar.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMdCalendar.prototype.userSelection;\n/**\n * Date filter for the month and year views.\n * @type {?}\n */\nMdCalendar.prototype._dateFilterForViews;\n/** @type {?} */\nMdCalendar.prototype._clampedActiveDate;\n/**\n * Whether the calendar is in month view.\n * @type {?}\n */\nMdCalendar.prototype._monthView;\n/** @type {?} */\nMdCalendar.prototype._elementRef;\n/** @type {?} */\nMdCalendar.prototype._intl;\n/** @type {?} */\nMdCalendar.prototype._ngZone;\n/** @type {?} */\nMdCalendar.prototype._dateAdapter;\n/** @type {?} */\nMdCalendar.prototype._dateFormats;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MdDatepickerIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\rcomponents if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\rcomponents if the labels have changed after initialization.\n * @type {?}\n */\nMdDatepickerIntl.prototype.changes;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nexport function createMissingDateImplError(provider: string) {\r\n  return Error(\r\n      `MdDatepicker: No provider found for ${provider}. You must import one of the following ` +\r\n      `modules at your application root: MdNativeDateModule, or provide a custom implementation.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {DateAdapter} from '@angular/material/core';\n/**\n * Function that attempts to coerce a value to a date using a DateAdapter. Date instances, null,\rand undefined will be passed through. Empty strings will be coerced to null. Valid ISO 8601\rstrings (https://www.ietf.org/rfc/rfc3339.txt) will be coerced to dates. All other values will\rresult in an error being thrown.\r\\@param adapter The date adapter to use for coercion\r\\@param value The value to coerce.\r\\@return A date object coerced from the value.\r\\@throws Throws when the value cannot be coerced.\n * @template D\n * @param {?} adapter\n * @param {?} value\n * @return {?}\n */\nexport function coerceDateProperty<D>(adapter: DateAdapter<D>, value: any): D | null {\r\n  if (typeof value === 'string') {\r\n    if (value == '') {\r\n      value = null;\r\n    } else {\r\n      value = adapter.fromIso8601(value) || value;\r\n    }\r\n  }\r\n  if (value == null || adapter.isDateInstance(value)) {\r\n    return value;\r\n  }\r\n  throw Error(`Datepicker: Value must be either a date object recognized by the DateAdapter or ` +\r\n              `an ISO 8601 string. Instead got: ${value}`);\r\n}\r\n"],"names":["observableOf","first"],"mappings":"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"}