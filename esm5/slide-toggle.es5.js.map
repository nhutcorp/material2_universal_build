{"version":3,"file":"slide-toggle.es5.js","sources":["../../../src/lib/slide-toggle/index.ts","../../../src/lib/slide-toggle/slide-toggle-module.ts","../../../src/lib/slide-toggle/slide-toggle.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle,MAT_SLIDE_TOGGLE_VALUE_ACCESSOR,MatSlideToggle,MatSlideToggleBase,MatSlideToggleChange,MatSlideToggleModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {NgModule} from '@angular/core';\r\nimport {\r\n  GestureConfig,\r\n  MdCommonModule,\r\n  MdRippleModule,\r\n} from '@angular/material/core';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {MdSlideToggle} from './slide-toggle';\nexport class MdSlideToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdRippleModule, MdCommonModule, PlatformModule, ObserversModule, A11yModule],\r\n  exports: [MdSlideToggle, MdCommonModule],\r\n  declarations: [MdSlideToggle],\r\n  providers: [\r\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSlideToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggleModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  applyCssTransform,\r\n  CanColor,\r\n  CanDisable,\r\n  CanDisableRipple,\r\n  HammerInput,\r\n  HasTabIndex,\r\n  MATERIAL_COMPATIBILITY_MODE,\r\n  MdRipple,\r\n  mixinColor,\r\n  mixinDisabled,\r\n  mixinDisableRipple,\r\n  mixinTabIndex,\r\n  RippleRef,\r\n} from '@angular/material/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\n\r\n// Increasing integer for generating unique ids for slide-toggle components.\r\nlet /** @type {?} */ nextUniqueId = 0;\r\n\r\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdSlideToggle),\r\n  multi: true\r\n};\n/**\n * Change event object emitted by a MdSlideToggle.\n */\nexport class MdSlideToggleChange {\r\n  source: MdSlideToggle;\r\n  checked: boolean;\r\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSlideToggleBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdSlideToggleBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleBase.prototype._renderer;\n/** @type {?} */\nMdSlideToggleBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdSlideToggleMixinBase =\r\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MdSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nexport class MdSlideToggle extends _MdSlideToggleMixinBase implements OnDestroy, AfterContentInit,\r\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId: string = `md-slide-toggle-${++nextUniqueId}`;\nprivate _slideRenderer: SlideToggleRenderer;\nprivate _required: boolean = false;\nprivate _checked: boolean = false;\n/**\n * Reference to the focus state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Used to set the aria-label attribute on the underlying input element.\n */\nariaLabel: string | null = null;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n */\nariaLabelledby: string | null = null;\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the slide-toggle element is checked or not\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\r\n    this._checked = !!value;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n */\nchange: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Reference to the underlying input element.\n */\n_inputElement: ElementRef;\n/**\n * Reference to the ripple directive on the thumb container.\n */\n_ripple: MdRipple;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _platform\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n * @param {?} tabIndex\n */\nconstructor(elementRef: ElementRef,\r\n              renderer: Renderer2,\nprivate _platform: Platform,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\r\n               tabIndex: string) {\r\n    super(renderer, elementRef);\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\r\n\r\n    this._focusMonitor\r\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\r\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\r\n  }\n/**\n * This function will called if the underlying input changed its value through user interaction.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the component's `change` output.\r\n    event.stopPropagation();\r\n\r\n    // Sync the value from the underlying input element with the slide-toggle component.\r\n    this.checked = this._inputElement.nativeElement.checked;\r\n\r\n    // Emit our custom change event if the native input emitted one.\r\n    // It is important to only emit it, if the native input triggered one, because we don't want\r\n    // to trigger a change event, when the `checked` variable changes programmatically.\r\n    this._emitChangeEvent();\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\r\n    // In some situations the user will release the mouse on the label element. The label element\r\n    // redirects the click to the underlying input element and will result in a value change.\r\n    // Prevent the default behavior if dragging, because the value will be set after drag.\r\n    if (this._slideRenderer.dragging) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `slide-toggle` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\r\n    this.checked = !!value;\r\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\r\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\r\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\r\n    this.checked = !this.checked;\r\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\r\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\r\n      // For keyboard focus show a persistent ripple as focus indicator.\r\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\r\n    } else if (!focusOrigin) {\r\n      this.onTouched();\r\n\r\n      // Fade out and clear the focus ripple if one is currently present.\r\n      if (this._focusRipple) {\r\n        this._focusRipple.fadeOut();\r\n        this._focusRipple = null;\r\n      }\r\n    }\r\n  }\n/**\n * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n * @return {?}\n */\nprivate _emitChangeEvent() {\r\n    let /** @type {?} */ event = new MdSlideToggleChange();\r\n    event.source = this;\r\n    event.checked = this.checked;\r\n    this.change.emit(event);\r\n    this.onChange(this.checked);\r\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\r\n    if (!this.disabled) {\r\n      this._slideRenderer.startThumbDrag(this.checked);\r\n    }\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\r\n    if (this._slideRenderer.dragging) {\r\n      this._slideRenderer.updateThumbPosition(event.deltaX);\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\r\n    if (this._slideRenderer.dragging) {\r\n      let /** @type {?} */ _previousChecked = this.checked;\r\n      this.checked = this._slideRenderer.dragPercentage > 50;\r\n\r\n      if (_previousChecked !== this.checked) {\r\n        this._emitChangeEvent();\r\n      }\r\n\r\n      // The drag should be stopped outside of the current event handler, because otherwise the\r\n      // click event will be fired before and will revert the drag change.\r\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\r\n    }\r\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\r\n    // This method is getting called whenever the label of the slide-toggle changes.\r\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\r\n    // that has been recognized by the cdkObserveContent directive.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-slide-toggle, mat-slide-toggle',\r\n  host: {\r\n    'class': 'mat-slide-toggle',\r\n    '[id]': 'id',\r\n    '[class.mat-checked]': 'checked',\r\n    '[class.mat-disabled]': 'disabled',\r\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\r\n  },\r\n  templateUrl: 'slide-toggle.html',\r\n  styleUrls: ['slide-toggle.css'],\r\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'required': [{ type: Input },],\n'checked': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._platform;\n/** @type {?} */\nMdSlideToggle.prototype._focusMonitor;\n/** @type {?} */\nMdSlideToggle.prototype._changeDetectorRef;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n/**\n * Reference to the thumb HTMLElement.\n */\nprivate _thumbEl: HTMLElement;\n/**\n * Reference to the thumb bar HTMLElement.\n */\nprivate _thumbBarEl: HTMLElement;\n/**\n * Width of the thumb bar of the slide-toggle.\n */\nprivate _thumbBarWidth: number;\n/**\n * Previous checked state before drag started.\n */\nprivate _previousChecked: boolean;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n */\ndragPercentage: number;\n/**\n * Whether the thumb is currently being dragged.\n */\ndragging: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} platform\n */\nconstructor(elementRef: ElementRef, platform: Platform) {\r\n    // We only need to interact with these elements when we're on the browser, so only grab\r\n    // the reference in that case.\r\n    if (platform.isBrowser) {\r\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\r\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\r\n    }\r\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\r\n    if (this.dragging) { return; }\r\n\r\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\r\n    this._thumbEl.classList.add('mat-dragging');\r\n\r\n    this._previousChecked = checked;\r\n    this.dragging = true;\r\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\r\n    if (!this.dragging) { return false; }\r\n\r\n    this.dragging = false;\r\n    this._thumbEl.classList.remove('mat-dragging');\r\n\r\n    // Reset the transform because the component will take care of the thumb position after drag.\r\n    applyCssTransform(this._thumbEl, '');\r\n\r\n    return this.dragPercentage > 50;\r\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\r\n    this.dragPercentage = this._getDragPercentage(distance);\r\n    // Calculate the moved distance based on the thumb bar width.\r\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\r\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\r\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\r\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\r\n\r\n    // When the toggle was initially checked, then we have to start the drag at the end.\r\n    if (this._previousChecked) {\r\n      percentage += 100;\r\n    }\r\n\r\n    return Math.max(0, Math.min(percentage, 100));\r\n  }\r\n\r\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}