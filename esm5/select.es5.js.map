{"version":3,"file":"select.es5.js","sources":["../../../src/lib/select/index.ts","../../../src/lib/select/select-module.ts","../../../src/lib/select/select.ts","../../../src/lib/select/select-errors.ts","../../../src/lib/select/select-animations.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSelectModule,SELECT_PANEL_MAX_HEIGHT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_ITEM_HEIGHT_EM,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_VIEWPORT_PADDING,MD_SELECT_SCROLL_STRATEGY,MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_SELECT_SCROLL_STRATEGY_PROVIDER,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelectTrigger,MdSelect,transformPanel,fadeInContent,MAT_SELECT_SCROLL_STRATEGY,MAT_SELECT_SCROLL_STRATEGY_PROVIDER,MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MatSelect,MatSelectBase,MatSelectChange,MatSelectModule,MatSelectTrigger} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MdSelect, MdSelectTrigger, MD_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\r\nimport {MdCommonModule, MdOptionModule} from '@angular/material/core';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\nexport class MdSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    MdOptionModule,\r\n    MdCommonModule,\r\n  ],\r\n  exports: [MdSelect, MdSelectTrigger, MdOptionModule, MdCommonModule],\r\n  declarations: [MdSelect, MdSelectTrigger],\r\n  providers: [MD_SELECT_SCROLL_STRATEGY_PROVIDER]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {\r\n  ConnectedOverlayDirective,\r\n  Overlay,\r\n  RepositionScrollStrategy,\r\n  ScrollStrategy,\r\n  ViewportRuler,\r\n} from '@angular/cdk/overlay';\r\nimport {filter, first, startWith} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  isDevMode,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Renderer2,\r\n  Self,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {\r\n  CanDisable,\r\n  HasTabIndex,\r\n  MdOptgroup,\r\n  MdOption,\r\n  MdOptionSelectionChange,\r\n  mixinDisabled,\r\n  mixinTabIndex,\r\n} from '@angular/material/core';\r\nimport {MdFormFieldControl} from '@angular/material/form-field';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {fadeInContent, transformPanel} from './select-animations';\r\nimport {\r\n  getMdSelectDynamicMultipleError,\r\n  getMdSelectNonArrayValueError,\r\n  getMdSelectNonFunctionValueError,\r\n} from './select-errors';\r\n\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n/**\n * Distance between the panel edge and the option text in\rmulti-selection mode.\r\r(SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\rThe padding is multiplied by 1.5 because the checkbox's margin is half the padding.\rThe checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\rthis value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n */\nexport const MD_SELECT_SCROLL_STRATEGY =\r\n    new InjectionToken<() => ScrollStrategy>('md-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\r\n    () => RepositionScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\n/**\n * \\@docs-private\n */\nexport const MD_SELECT_SCROLL_STRATEGY_PROVIDER = {\r\n  provide: MD_SELECT_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\r\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectBase.prototype._renderer;\n/** @type {?} */\nMdSelectBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdSelectMixinBase = mixinTabIndex(mixinDisabled(MdSelectBase));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nexport class MdSelectTrigger {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-select-trigger, mat-select-trigger'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectTrigger.ctorParameters;\n}\n\nexport class MdSelect extends _MdSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\r\n    ControlValueAccessor, CanDisable, HasTabIndex, MdFormFieldControl<any> {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription = Subscription.EMPTY;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription = Subscription.EMPTY;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * Unique id for this input.\n */\nprivate _uid = `mat-select-${nextUniqueId++}`;\n/**\n * The last measured value for the trigger's client bounding rect.\n */\n_triggerRect: ClientRect;\n/**\n * The aria-describedby attribute on the select for improved a11y.\n */\n_ariaDescribedby: string;\n/**\n * The cached font-size of the trigger element.\n */\n_triggerFontSize = 0;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager<MdOption>;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n */\n_scrollStrategy = this._scrollStrategyFactory();\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\rThis must be adjusted to align the selected option text over the trigger text.\rwhen the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\ris aligned with with the top \"start\" of the origin by default (overlapping\rthe trigger completely). If the panel cannot fit below the trigger, it\rwill fall back to a position above the trigger.\n */\n_positions = [\r\n    {\r\n      originX: 'start',\r\n      originY: 'top',\r\n      overlayX: 'start',\r\n      overlayY: 'top',\r\n    },\r\n    {\r\n      originX: 'start',\r\n      originY: 'bottom',\r\n      overlayX: 'start',\r\n      overlayY: 'bottom',\r\n    },\r\n  ];\n/**\n * Stream that emits whenever the state of the select changes such that the wrapping `MdFormField`\rneeds to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * Whether the select is focused.\n */\nfocused = false;\n/**\n * A name for this control that can be used by `md-form-field`.\n */\ncontrolType = 'mat-select';\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * User-supplied override of the trigger element.\n */\ncustomTrigger: MdSelectTrigger;\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\r\n    this._placeholder = value;\r\n    this.stateChanges.next();\r\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\r\n    if (this._selectionModel) {\r\n      throw getMdSelectDynamicMultipleError();\r\n    }\r\n\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\ris a value from an option. The second is a value from the selection. A boolean\rshould be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    if (typeof fn !== 'function') {\r\n      throw getMdSelectNonFunctionValueError();\r\n    }\r\n    this._compareWith = fn;\r\n    if (this._selectionModel) {\r\n      // A different comparator means the selection could change.\r\n      this._initializeSelection();\r\n    }\r\n  }\n/**\n * Value of the select control.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\r\n    this.writeValue(newValue);\r\n    this._value = newValue;\r\n  }\nprivate _value: any;\n/**\n * Whether ripples for all options in the select are disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\r\n    this._disableRipple = coerceBooleanProperty(value);\r\n    this._setOptionDisableRipple();\r\n  }\nprivate _disableRipple: boolean = false;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {\r\n    this._id = value || this._uid;\r\n    this.stateChanges.next();\r\n  }\nprivate _id: string;\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\r\n    return merge(...this.options.map(option => option.onSelectionChange));\r\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\rto facilitate the two-way binding for the `value` input.\r\\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _ngZone\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n * @param {?} tabIndex\n * @param {?} _scrollStrategyFactory\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _ngZone: NgZone,\r\n    renderer: Renderer2,\r\n    elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic ngControl: NgControl,\r\n     tabIndex: string,\nprivate _scrollStrategyFactory) {\r\n\r\n    super(renderer, elementRef);\r\n\r\n    if (this.ngControl) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n\r\n    this.tabIndex = parseInt(tabIndex) || 0;\r\n\r\n    // Force setter to be called in case id was not specified.\r\n    this.id = this.id;\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, undefined, false);\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this._initKeyManager();\r\n\r\n    this._changeSubscription = startWith.call(this.options.changes, null).subscribe(() => {\r\n      this._resetOptions();\r\n      this._initializeSelection();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._dropSubscriptions();\r\n    this._changeSubscription.unsubscribe();\r\n    this._tabSubscription.unsubscribe();\r\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\r\n    this.panelOpen ? this.close() : this.open();\r\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\r\n    if (this.disabled || !this.options.length) {\r\n      return;\r\n    }\r\n\r\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\r\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\r\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\r\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\r\n\r\n    this._calculateOverlayPosition();\r\n    this._panelOpen = true;\r\n    this._changeDetectorRef.markForCheck();\r\n\r\n    // Set the font size on the panel element once it exists.\r\n    first.call(this._ngZone.onStable).subscribe(() => {\r\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\r\n          this.overlayDir.overlayRef.overlayElement) {\r\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\r\n      }\r\n    });\r\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\r\n    if (this._panelOpen) {\r\n      this._panelOpen = false;\r\n      this._changeDetectorRef.markForCheck();\r\n      this.focus();\r\n    }\r\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\rrequired to integrate with Angular's core forms API.\r\r\\@param value New value to be written to the model.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\r\n    if (this.options) {\r\n      this._setSelectionByValue(value);\r\n    }\r\n  }\n/**\n * Saves a callback function to be invoked when the select's value\rchanges from user input. Part of the ControlValueAccessor interface\rrequired to integrate with Angular's core forms API.\r\r\\@param fn Callback to be triggered when the value changes.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\rby the user. Part of the ControlValueAccessor interface required\rto integrate with Angular's core forms API.\r\r\\@param fn Callback to be triggered when the component has been touched.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\r\n    this._onTouched = fn;\r\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\rto integrate with Angular's core forms API.\r\r\\@param isDisabled Sets whether the component is disabled.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this._changeDetectorRef.markForCheck();\r\n    this.stateChanges.next();\r\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\r\n    return this._panelOpen;\r\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\r\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\r\n    if (!this._selectionModel || this._selectionModel.isEmpty()) {\r\n      return '';\r\n    }\r\n\r\n    if (this._multiple) {\r\n      const /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\r\n\r\n      if (this._isRtl()) {\r\n        selectedOptions.reverse();\r\n      }\r\n\r\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\r\n      return selectedOptions.join(', ');\r\n    }\r\n\r\n    return this._selectionModel.selected[0].viewValue;\r\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\r\n    return this._dir ? this._dir.value === 'rtl' : false;\r\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\r\n    if (!this.disabled) {\r\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\r\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\r\n        this.open();\r\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\r\n        this._handleArrowKey(event);\r\n      }\r\n    }\r\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === HOME || event.keyCode === END) {\r\n      event.preventDefault();\r\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\r\n                               this._keyManager.setLastItemActive();\r\n    } else {\r\n      this._keyManager.onKeydown(event);\r\n    }\r\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\remits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\r\n    if (this.panelOpen) {\r\n      this._focusCorrectOption();\r\n      this.onOpen.emit();\r\n    } else {\r\n      this.onClose.emit();\r\n      this._panelDoneAnimating = false;\r\n      this.overlayDir.offsetX = 0;\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\rset so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\r\n    this._panelDoneAnimating = this.panelOpen;\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * @return {?}\n */\n_onFocus() {\r\n    if (!this.disabled) {\r\n      this.focused = true;\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\r\"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\r\n    if (!this.disabled && !this.panelOpen) {\r\n      this.focused = false;\r\n      this._onTouched();\r\n      this._changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\r\n    this._calculateOverlayOffsetX();\r\n    this._setScrollTop();\r\n  }\n/**\n * Whether the select has a value.\n * @return {?}\n */\nget empty(): boolean {\r\n    return !this._selectionModel || this._selectionModel.isEmpty();\r\n  }\n/**\n * Whether the select is in an error state.\n * @return {?}\n */\nget errorState(): boolean {\r\n    const /** @type {?} */ isInvalid = this.ngControl && this.ngControl.invalid;\r\n    const /** @type {?} */ isTouched = this.ngControl && this.ngControl.touched;\r\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\r\n        (this._parentForm && this._parentForm.submitted);\r\n\r\n    return !!(isInvalid && (isTouched || isSubmitted));\r\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\rthe overlay pane is attached or the scroll container element will not yet be\rpresent in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\r\n    const /** @type {?} */ scrollContainer =\r\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel'); /** @type {?} */((\r\n    scrollContainer)).scrollTop = this._scrollTop;\r\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\r\n    });\r\n  }\n/**\n * Sets the selected option based on a value. If no option can be\rfound with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\r\n    const /** @type {?} */ isArray = Array.isArray(value);\r\n\r\n    if (this.multiple && value && !isArray) {\r\n      throw getMdSelectNonArrayValueError();\r\n    }\r\n\r\n    this._clearSelection();\r\n\r\n    if (isArray) {\r\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\r\n      this._sortValues();\r\n    } else {\r\n      const /** @type {?} */ correspondingOption = this._selectValue(value, isUserInput);\r\n\r\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n      // mode, because we don't know what option the user interacted with last.\r\n      if (correspondingOption) {\r\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\r\n      }\r\n    }\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Finds and selects and option based on its value.\r\\@returns Option that has the corresponding value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _selectValue(value: any, isUserInput = false): MdOption | undefined {\r\n    const /** @type {?} */ correspondingOption = this.options.find((option: MdOption) => {\r\n      try {\r\n        // Treat null as a special reset value.\r\n        return option.value != null && this._compareWith(option.value,  value);\r\n      } catch ( /** @type {?} */error) {\r\n        if (isDevMode()) {\r\n          // Notify developers of errors in their comparator.\r\n          console.warn(error);\r\n        }\r\n        return false;\r\n      }\r\n    });\r\n\r\n    if (correspondingOption) {\r\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\r\n      this._selectionModel.select(correspondingOption);\r\n      this.stateChanges.next();\r\n    }\r\n\r\n    return correspondingOption;\r\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\r\\@param skip Option that should not be deselected.\n * @param {?=} skip\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\r\n    this._selectionModel.clear();\r\n    this.options.forEach(option => {\r\n      if (option !== skip) {\r\n        option.deselect();\r\n      }\r\n    });\r\n    this.stateChanges.next();\r\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\r\n    this._keyManager = new FocusKeyManager<MdOption>(this.options).withTypeAhead();\r\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\r\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\r\n    this._dropSubscriptions();\r\n    this._listenToOptions();\r\n    this._setOptionIds();\r\n    this._setOptionMultiple();\r\n    this._setOptionDisableRipple();\r\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\r\n    this._optionSubscription = filter.call(this.optionSelectionChanges,\r\n      event => event.isUserInput).subscribe(event => {\r\n        this._onSelect(event.source);\r\n\r\n        if (!this.multiple) {\r\n          this.close();\r\n        }\r\n      });\r\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\r\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\r\n\r\n    // TODO(crisbeto): handle blank/null options inside multi-select.\r\n    if (this.multiple) {\r\n      this._selectionModel.toggle(option);\r\n      this.stateChanges.next();\r\n      wasSelected ? option.deselect() : option.select();\r\n      this._sortValues();\r\n    } else {\r\n      this._clearSelection(option.value == null ? undefined : option);\r\n\r\n      if (option.value == null) {\r\n        this._propagateChanges(option.value);\r\n      } else {\r\n        this._selectionModel.select(option);\r\n        this.stateChanges.next();\r\n      }\r\n    }\r\n\r\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\r\n      this._propagateChanges();\r\n    }\r\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\rorder that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\r\n    if (this._multiple) {\r\n      this._selectionModel.clear();\r\n\r\n      this.options.forEach(option => {\r\n        if (option.selected) {\r\n          this._selectionModel.select(option);\r\n        }\r\n      });\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\r\n    this._optionSubscription.unsubscribe();\r\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\r\n    let /** @type {?} */ valueToEmit: any = null;\r\n\r\n    if (Array.isArray(this.selected)) {\r\n      valueToEmit = this.selected.map(option => option.value);\r\n    } else {\r\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\r\n    }\r\n\r\n    this._value = valueToEmit;\r\n    this._onChange(valueToEmit);\r\n    this.change.emit(new MdSelectChange(this, valueToEmit));\r\n    this.valueChange.emit(valueToEmit);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\r\n    this._optionIds = this.options.map(option => option.id).join(' ');\r\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\rin order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\r\n    if (this.multiple) {\r\n      Promise.resolve(null).then(() => {\r\n        this.options.forEach(option => option.multiple = this.multiple);\r\n      });\r\n    }\r\n  }\n/**\n * Sets the `disableRipple` property on each option.\n * @return {?}\n */\nprivate _setOptionDisableRipple() {\r\n    if (this.options) {\r\n      this.options.forEach(option => option.disableRipple = this.disableRipple);\r\n    }\r\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\rthe first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\r\n    if (this._selectionModel.isEmpty()) {\r\n      this._keyManager.setFirstItemActive();\r\n    } else {\r\n      this._keyManager.setActiveItem( /** @type {?} */((this._getOptionIndex(this._selectionModel.selected[0]))));\r\n    }\r\n  }\n/**\n * Focuses the select element.\n * @return {?}\n */\nfocus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number | undefined {\r\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\r\n      return result === undefined ? (option === current ? index : undefined) : result;\r\n    }, undefined);\r\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\r\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n\r\n    const /** @type {?} */ items = this._getItemCount();\r\n    const /** @type {?} */ panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n    const /** @type {?} */ scrollContainerHeight = items * itemHeight;\r\n\r\n    // The farthest the panel can be scrolled before it hits the bottom\r\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\r\n\r\n    // If no value is selected we open the popup to the first item.\r\n    let /** @type {?} */ selectedOptionOffset =\r\n        this.empty ? 0 : /** @type {?} */(( this._getOptionIndex(this._selectionModel.selected[0])));\r\n\r\n    selectedOptionOffset += MdOption.countGroupLabelsBeforeOption(selectedOptionOffset,\r\n        this.options, this.optionGroups);\r\n\r\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\r\n    // center of the overlay panel rather than the top.\r\n    const /** @type {?} */ scrollBuffer = panelHeight / 2;\r\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\r\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\r\n\r\n    this._checkOverlayWithinViewport(maxScroll);\r\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\r\rAttempts to center the selected option in the panel. If the option is\rtoo high or too low in the panel to be scrolled to the center, it clamps the\rscroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\r\n                          maxScroll: number): number {\r\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n    const /** @type {?} */ optionOffsetFromScrollTop = itemHeight * selectedIndex;\r\n    const /** @type {?} */ halfOptionHeight = itemHeight / 2;\r\n\r\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\r\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\r\n    // the center of the overlay panel. Half the option height must be re-added to the\r\n    // scrollTop so the option is centered based on its middle, not its top edge.\r\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\r\n    return clampValue(0, optimalScrollPosition, maxScroll);\r\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string | null {\r\n    // If an ariaLabelledby value has been set, the select should not overwrite the\r\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\r\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\r\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\rThis must be adjusted to align the selected option text over the trigger text when\rthe panel opens. Will change based on LTR or RTL text direction. Note that the offset\rcan't be calculated until the panel has been attached, because we need to know the\rcontent width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\r\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\r\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\r\n    const /** @type {?} */ isRtl = this._isRtl();\r\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\r\n                                         SELECT_PANEL_PADDING_X * 2;\r\n    let /** @type {?} */ offsetX: number;\r\n\r\n    // Adjust the offset, depending on the option padding.\r\n    if (this.multiple) {\r\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\r\n    } else {\r\n      let /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\r\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\r\n    }\r\n\r\n    // Invert the offset in LTR.\r\n    if (!isRtl) {\r\n      offsetX *= -1;\r\n    }\r\n\r\n    // Determine how much the select overflows on each side.\r\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\r\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\r\n                          + (isRtl ? 0 : paddingWidth);\r\n\r\n    // If the element overflows on either side, reduce the offset to allow it to fit.\r\n    if (leftOverflow > 0) {\r\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n    } else if (rightOverflow > 0) {\r\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n    }\r\n\r\n    // Set the offset directly in order to avoid having to go through change detection and\r\n    // potentially triggering \"changed after it was checked\" errors.\r\n    this.overlayDir.offsetX = offsetX;\r\n    this.overlayDir.overlayRef.updatePosition();\r\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\rtop start corner of the trigger. It has to be adjusted in order for the\rselected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\r\n                                  maxScroll: number): number {\r\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n    const /** @type {?} */ optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n    const /** @type {?} */ maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\r\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\r\n\r\n    if (this._scrollTop === 0) {\r\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\r\n    } else if (this._scrollTop === maxScroll) {\r\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\r\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\r\n\r\n      // The first item is partially out of the viewport. Therefore we need to calculate what\r\n      // portion of it is shown in the viewport and account for it in our offset.\r\n      let /** @type {?} */ partialItemHeight =\r\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\r\n\r\n      // Because the panel height is longer than the height of the options alone,\r\n      // there is always extra padding at the top or bottom of the panel. When\r\n      // scrolled to the very bottom, this padding is at the top of the panel and\r\n      // must be added to the offset.\r\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\r\n    } else {\r\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\r\n      // its offset will be the scroll buffer minus the half height that was added to\r\n      // center it.\r\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\r\n    }\r\n\r\n    // The final offset is the option's offset from the top, adjusted for the height\r\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\r\n    // direction up the page.\r\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\r\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\rIf it will not fit, tries to adjust the scroll position and the associated\ry-offset so the panel can open fully on-screen. If it still won't fit,\rsets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\r\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\r\n\r\n    const /** @type {?} */ topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\r\n    const /** @type {?} */ bottomSpaceAvailable =\r\n        viewportRect.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\r\n\r\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\r\n    const /** @type {?} */ totalPanelHeight =\r\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\r\n\r\n    if (panelHeightBottom > bottomSpaceAvailable) {\r\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\r\n    } else if (panelHeightTop > topSpaceAvailable) {\r\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\r\n    } else {\r\n      this._transformOrigin = this._getOriginBasedOnOption();\r\n    }\r\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\r\n    // Browsers ignore fractional scroll offsets, so we need to round.\r\n    const /** @type {?} */ distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\r\n\r\n    // Scrolls the panel up by the distance it was extending past the boundary, then\r\n    // adjusts the offset by that amount to move the panel up into the viewport.\r\n    this._scrollTop -= distanceBelowViewport;\r\n    this._offsetY -= distanceBelowViewport;\r\n    this._transformOrigin = this._getOriginBasedOnOption();\r\n\r\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\r\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\r\n    // effect.\r\n    if (this._scrollTop <= 0) {\r\n      this._scrollTop = 0;\r\n      this._offsetY = 0;\r\n      this._transformOrigin = `50% bottom 0px`;\r\n    }\r\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\r\n                           maxScroll: number) {\r\n    // Browsers ignore fractional scroll offsets, so we need to round.\r\n    const /** @type {?} */ distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\r\n\r\n    // Scrolls the panel down by the distance it was extending past the boundary, then\r\n    // adjusts the offset by that amount to move the panel down into the viewport.\r\n    this._scrollTop += distanceAboveViewport;\r\n    this._offsetY += distanceAboveViewport;\r\n    this._transformOrigin = this._getOriginBasedOnOption();\r\n\r\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\r\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\r\n    // to take effect.\r\n    if (this._scrollTop >= maxScroll) {\r\n      this._scrollTop = maxScroll;\r\n      this._offsetY = 0;\r\n      this._transformOrigin = `50% top 0px`;\r\n      return;\r\n    }\r\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\r\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n    const /** @type {?} */ optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n    const /** @type {?} */ originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\r\n    return `50% ${originY}px 0px`;\r\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\r\n    if (this._multiple) {\r\n      event.preventDefault();\r\n      this.open();\r\n    } else {\r\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\r\n\r\n      // Cycle though the select options even when the select is closed,\r\n      // matching the behavior of the native select element.\r\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\r\n      // however the key manager only supports up/down at the moment.\r\n      this._keyManager.onKeydown(event);\r\n\r\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\r\n\r\n      if (currentActiveItem !== prevActiveItem) {\r\n        this._clearSelection();\r\n        this._setSelectionByValue(currentActiveItem.value, true);\r\n        this._propagateChanges();\r\n      }\r\n    }\r\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\r\n    return this.options.length + this.optionGroups.length;\r\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @return {?}\n */\nonContainerClick() {\r\n    this.focus();\r\n    this.open();\r\n  }\n/**\n * @return {?}\n */\nget shouldPlaceholderFloat() { return this._panelOpen || !this.empty; }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-select, mat-select',\r\n  templateUrl: 'select.html',\r\n  styleUrls: ['select.css'],\r\n  inputs: ['disabled', 'tabIndex'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'role': 'listbox',\r\n    '[attr.id]': 'id',\r\n    '[attr.tabindex]': 'tabIndex',\r\n    '[attr.aria-label]': '_ariaLabel',\r\n    '[attr.aria-labelledby]': 'ariaLabelledby',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-owns]': '_optionIds',\r\n    '[attr.aria-multiselectable]': 'multiple',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[class.mat-select-disabled]': 'disabled',\r\n    '[class.mat-select-invalid]': 'errorState',\r\n    '[class.mat-select-required]': 'required',\r\n    'class': 'mat-select',\r\n    '(keydown)': '_handleClosedKeydown($event)',\r\n    '(focus)': '_onFocus()',\r\n    '(blur)': '_onBlur()',\r\n  },\r\n  animations: [\r\n    transformPanel,\r\n    fadeInContent\r\n  ],\r\n  providers: [{provide: MdFormFieldControl, useExisting: MdSelect}],\r\n  exportAs: 'mdSelect, matSelect',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MD_SELECT_SCROLL_STRATEGY, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'customTrigger': [{ type: ContentChild, args: [MdSelectTrigger, ] },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'value': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMdSelect.prototype._compareWith;\n/**\n * Unique id for this input.\n * @type {?}\n */\nMdSelect.prototype._uid;\n/**\n * The last measured value for the trigger's client bounding rect.\n * @type {?}\n */\nMdSelect.prototype._triggerRect;\n/**\n * The aria-describedby attribute on the select for improved a11y.\n * @type {?}\n */\nMdSelect.prototype._ariaDescribedby;\n/**\n * The cached font-size of the trigger element.\n * @type {?}\n */\nMdSelect.prototype._triggerFontSize;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n * @type {?}\n */\nMdSelect.prototype._scrollStrategy;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\rThis must be adjusted to align the selected option text over the trigger text.\rwhen the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\ris aligned with with the top \"start\" of the origin by default (overlapping\rthe trigger completely). If the panel cannot fit below the trigger, it\rwill fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Stream that emits whenever the state of the select changes such that the wrapping `MdFormField`\rneeds to run change detection.\n * @type {?}\n */\nMdSelect.prototype.stateChanges;\n/**\n * Whether the select is focused.\n * @type {?}\n */\nMdSelect.prototype.focused;\n/**\n * A name for this control that can be used by `md-form-field`.\n * @type {?}\n */\nMdSelect.prototype.controlType;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMdSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMdSelect.prototype.panelClass;\n/**\n * User-supplied override of the trigger element.\n * @type {?}\n */\nMdSelect.prototype.customTrigger;\n/** @type {?} */\nMdSelect.prototype._value;\n/** @type {?} */\nMdSelect.prototype._disableRipple;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/** @type {?} */\nMdSelect.prototype._id;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\rto facilitate the two-way binding for the `value` input.\r\\@docs-private\n * @type {?}\n */\nMdSelect.prototype.valueChange;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._ngZone;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._parentForm;\n/** @type {?} */\nMdSelect.prototype._parentFormGroup;\n/** @type {?} */\nMdSelect.prototype.ngControl;\n/** @type {?} */\nMdSelect.prototype._scrollStrategyFactory;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\r\n  return Math.min(Math.max(min, n), max);\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\rafter initialization.\r\\@docs-private\n * @return {?}\n */\nexport function getMdSelectDynamicMultipleError(): Error {\r\n  return Error('Cannot change `multiple` mode of select after initialization.');\r\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\rin `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\rresetting the value.\r\\@docs-private\n * @return {?}\n */\nexport function getMdSelectNonArrayValueError(): Error {\r\n  return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\r\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\rused to determine if a value corresponds to an option. Note that whether the function\ractually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nexport function getMdSelectNonFunctionValueError(): Error {\r\n  return Error('Cannot assign a non-function value to `compareWith`.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  animate,\r\n  AnimationTriggerMetadata,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n} from '@angular/animations';\n/**\n * This animation transforms the select's overlay panel on and off the page.\r\rWhen the panel is attached to the DOM, it expands its width by the amount of padding, scales it\rup to 100% on the Y axis, fades in its border, and translates slightly up and to the\rside to ensure the option text correctly overlaps the trigger text.\r\rWhen the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\r\n  state('showing', style({\r\n    opacity: 1,\r\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\r\n    transform: 'scaleY(1)'\r\n  })),\r\n  state('showing-multiple', style({\r\n    opacity: 1,\r\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\r\n    transform: 'scaleY(1)'\r\n  })),\r\n  transition('void => *', [\r\n    style({\r\n      opacity: 0,\r\n      minWidth: '100%',\r\n      transform: 'scaleY(0)'\r\n    }),\r\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\r\n  ]),\r\n  transition('* => void', [\r\n    animate('250ms 100ms linear', style({opacity: 0}))\r\n  ])\r\n]);\n/**\n * This animation fades in the background color and text content of the\rselect's options. It is time delayed to occur 100ms after the overlay\rpanel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\r\n  state('showing', style({opacity: 1})),\r\n  transition('void => showing', [\r\n    style({opacity: 0}),\r\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\r\n  ])\r\n]);\r\n"],"names":[],"mappings":"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"}