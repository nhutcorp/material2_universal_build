{"version":3,"file":"chips.es5.js","sources":["../../../src/lib/chips/index.ts","../../../src/lib/chips/chips-module.ts","../../../src/lib/chips/chip-input.ts","../../../src/lib/chips/chip-list.ts","../../../src/lib/chips/chip.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdChipsModule,MdChipListChange,MdChipList,MdChipEvent,MdChipSelectionChange,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdChipRemove,MdChipInputEvent,MdChipInput,MatBasicChip,MatChip,MatChipBase,MatChipEvent,MatChipInput,MatChipInputEvent,MatChipListChange,MatChipList,MatChipRemove,MatChipsModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdChipList} from './chip-list';\r\nimport {MdBasicChip, MdChip, MdChipRemove} from './chip';\r\nimport {MdChipInput} from './chip-input';\nexport class MdChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [],\r\n  exports: [MdChipList, MdChip, MdChipInput, MdChipRemove, MdChipRemove, MdBasicChip],\r\n  declarations: [MdChipList, MdChip, MdChipInput, MdChipRemove,  MdChipRemove, MdBasicChip]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ENTER} from '@angular/cdk/keycodes';\r\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\r\nimport {MdChipList} from './chip-list';\r\n\r\n\r\nexport interface MdChipInputEvent {\r\n  input: HTMLInputElement;\r\n  value: string;\r\n}\n/**\n * Directive that adds chip-specific behaviors to an input element inside <md-form-field>.\rMay be placed inside or outside of an <md-chip-list>.\n */\nexport class MdChipInput {\r\n  focused: boolean = false;\r\n  _chipList: MdChipList;\n/**\n * Register input for chip list\n * @param {?} value\n * @return {?}\n */\nset chipList(value: MdChipList) {\r\n    if (value) {\r\n      this._chipList = value;\r\n      this._chipList.registerInput(this);\r\n    }\r\n  }\n/**\n * Whether or not the chipEnd event will be emitted when the input is blurred.\n * @return {?}\n */\nget addOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\r\n  _addOnBlur: boolean = false;\r\n\r\n  /**\r\n   * The list of key codes that will trigger a chipEnd event.\r\n   *\r\n   * Defaults to `[ENTER]`.\r\n   */\r\n  // TODO(tinayuangao): Support Set here\r\n   separatorKeyCodes: number[] = [ENTER];\n/**\n * Emitted when a chip is to be added.\n */\nchipEnd = new EventEmitter<MdChipInputEvent>();\r\n\r\n   _matChipInputTokenEnd = this.chipEnd;\n/**\n * @param {?} value\n * @return {?}\n */\nset matChipList(value: MdChipList) { this.chipList = value; }\n/**\n * @return {?}\n */\nget matAddOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset matAddOnBlur(value) { this.addOnBlur = value; }\n/**\n * @return {?}\n */\nget matSeparatorKeyCodes() { return this.separatorKeyCodes; }\n/**\n * @param {?} v\n * @return {?}\n */\nset matSeparatorKeyCodes(v: number[]) { this.separatorKeyCodes = v; }\r\n\r\n   placeholder: string = '';\n/**\n * @return {?}\n */\nget empty(): boolean {\r\n    let /** @type {?} */ value: string | null = this._inputElement.value;\r\n    return value == null || value === '';\r\n  }\n/**\n * The native input element to which this directive is attached.\n */\nprotected _inputElement: HTMLInputElement;\n/**\n * @param {?} _elementRef\n */\nconstructor(protected _elementRef: ElementRef) {\r\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\r\n  }\n/**\n * Utility method to make host definition/tests more clear.\n * @param {?=} event\n * @return {?}\n */\n_keydown(event?: KeyboardEvent) {\r\n    this._emitChipEnd(event);\r\n  }\n/**\n * Checks to see if the blur should emit the (chipEnd) event.\n * @return {?}\n */\n_blur() {\r\n    if (this.addOnBlur) {\r\n      this._emitChipEnd();\r\n    }\r\n    this.focused = false;\r\n    // Blur the chip list if it is not focused\r\n    if (!this._chipList.focused) {\r\n      this._chipList._blur();\r\n    }\r\n    this._chipList.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\n_focus() {\r\n    this.focused = true;\r\n    this._chipList.stateChanges.next();\r\n  }\n/**\n * Checks to see if the (chipEnd) event needs to be emitted.\n * @param {?=} event\n * @return {?}\n */\n_emitChipEnd(event?: KeyboardEvent) {\r\n    if (!this._inputElement.value && !!event) {\r\n      this._chipList._keydown(event);\r\n    }\r\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\r\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\r\n\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\n/**\n * @return {?}\n */\nfocus() { this._inputElement.focus(); }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'input[mdChipInputFor], input[matChipInputFor]',\r\n  host: {\r\n    'class': 'mat-chip-input mat-input-element',\r\n    '(keydown)': '_keydown($event)',\r\n    '(blur)': '_blur()',\r\n    '(focus)': '_focus()',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'chipList': [{ type: Input, args: ['mdChipInputFor', ] },],\n'addOnBlur': [{ type: Input, args: ['mdChipInputAddOnBlur', ] },],\n'separatorKeyCodes': [{ type: Input, args: ['mdChipInputSeparatorKeyCodes', ] },],\n'chipEnd': [{ type: Output, args: ['mdChipInputTokenEnd', ] },],\n'_matChipInputTokenEnd': [{ type: Output, args: ['matChipInputTokenEnd', ] },],\n'matChipList': [{ type: Input, args: ['matChipInputFor', ] },],\n'matAddOnBlur': [{ type: Input, args: ['matChipInputAddOnBlur', ] },],\n'matSeparatorKeyCodes': [{ type: Input, args: ['matChipInputSeparatorKeyCodes', ] },],\n'placeholder': [{ type: Input },],\n};\n}\n\nfunction MdChipInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipInput.ctorParameters;\n/** @type {?} */\nMdChipInput.propDecorators;\n/** @type {?} */\nMdChipInput.prototype.focused;\n/** @type {?} */\nMdChipInput.prototype._chipList;\n/** @type {?} */\nMdChipInput.prototype._addOnBlur;\n/** @type {?} */\nMdChipInput.prototype.separatorKeyCodes;\n/**\n * Emitted when a chip is to be added.\n * @type {?}\n */\nMdChipInput.prototype.chipEnd;\n/** @type {?} */\nMdChipInput.prototype._matChipInputTokenEnd;\n/** @type {?} */\nMdChipInput.prototype.placeholder;\n/**\n * The native input element to which this directive is attached.\n * @type {?}\n */\nMdChipInput.prototype._inputElement;\n/** @type {?} */\nMdChipInput.prototype._elementRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport {BACKSPACE, DELETE, LEFT_ARROW, RIGHT_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\r\nimport {startWith} from '@angular/cdk/rxjs';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  Renderer2,\r\n  Self,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {MdFormFieldControl} from '@angular/material/form-field';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {MdChip, MdChipEvent, MdChipSelectionChange} from './chip';\r\nimport {MdChipInput} from './chip-input';\r\n\r\n// Increasing integer for generating unique ids for chip-list components.\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nexport class MdChipListChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdChipList,\npublic value: any) { }\r\n}\n\nfunction MdChipListChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipListChange.prototype.source;\n/** @type {?} */\nMdChipListChange.prototype.value;\n}\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nexport class MdChipList implements MdFormFieldControl<any>, ControlValueAccessor,\r\n    AfterContentInit, OnInit, OnDestroy {\r\n  readonly controlType = 'mat-chip-list';\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\rneeds to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n */\nprotected _lastDestroyedIndex: number|null = null;\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprotected _chipSet: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the chip list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to focus changes in the chips.\n */\nprivate _chipFocusSubscription: Subscription|null;\n/**\n * Subscription to blur changes in the chips.\n */\nprivate _chipBlurSubscription: Subscription|null;\n/**\n * Subscription to selection changes in chips.\n */\nprivate _chipSelectionSubscription: Subscription|null;\n/**\n * Subscription to remove changes in chips.\n */\nprivate _chipRemoveSubscription: Subscription|null;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * The chip input to add more chips\n */\nprotected _chipInput: MdChipInput;\n/**\n * The aria-describedby attribute on the chip list for improved a11y.\n */\nprotected _ariaDescribedby: string;\n/**\n * Id of the chip list\n */\nprotected _id: string;\n/**\n * Uid of the chip list\n */\nprotected _uid: string = `md-chip-list-${nextUniqueId++}`;\n/**\n * Whether this is required\n */\nprotected _required: boolean = false;\n/**\n * Whether this is disabled\n */\nprotected _disabled: boolean = false;\r\n\r\n  protected _value: any;\n/**\n * Placeholder for the chip list. Alternatively, placeholder can be set on MdChipInput\n */\nprotected _placeholder: string;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * User defined tab index.\rWhen it is not null, use user defined tab index. Otherwise use _tabIndex\n */\n_userTabIndex: number | null = null;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MdChip>;\n/**\n * Function when touched\n */\n_onTouched = () => {};\n/**\n * Function when changed\n */\n_onChange: (value: any) => void = () => {};\r\n\r\n  _selectionModel: SelectionModel<MdChip>;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * The array of selected chips inside chip list.\n * @return {?}\n */\nget selected(): MdChip[] | MdChip {\r\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n  }\n/**\n * Whether the user should be allowed to select multiple chips.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\ris a value from an option. The second is a value from the selection. A boolean\rshould be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    this._compareWith = fn;\r\n    if (this._selectionModel) {\r\n      // A different comparator means the selection could change.\r\n      this._initializeSelection();\r\n    }\r\n  }\n/**\n * Required for FormFieldControl\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\r\n    this.writeValue(newValue);\r\n    this._value = newValue;\r\n  }\n/**\n * Required for FormFieldControl. The ID of the chip list\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {\r\n    this._id = value;\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nget id() { return this._id || this._uid; }\n/**\n * Required for FormFieldControl. Whether the chip list is required.\n * @param {?} value\n * @return {?}\n */\nset required(value: any) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nget required() {\r\n    return this._required;\r\n  }\n/**\n * For FormFieldControl. Use chip input's placholder if there's a chip input\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\r\n    this._placeholder = value;\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nget placeholder() {\r\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\r\n  }\n/**\n * Whether any chips or the mdChipInput inside of this chip-list has focus.\n * @return {?}\n */\nget focused() {\r\n    return this.chips.some(chip => chip._hasFocus) ||\r\n      (this._chipInput && this._chipInput.focused);\r\n  }\n/**\n * Whether this chip-list contains no chips and no mdChipInput.\n * @return {?}\n */\nget empty(): boolean {\r\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\r\n  }\n/**\n * @return {?}\n */\nget shouldPlaceholderFloat(): boolean {\r\n    return this.empty;\r\n  }\n/**\n * Whether this chip-list is disabled.\n * @return {?}\n */\nget disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the chip list is in an error state.\n * @return {?}\n */\nget errorState(): boolean {\r\n    const /** @type {?} */ isInvalid = this.ngControl && this.ngControl.invalid;\r\n    const /** @type {?} */ isTouched = this.ngControl && this.ngControl.touched;\r\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\r\n      (this._parentForm && this._parentForm.submitted);\r\n    return !!(isInvalid && (isTouched || isSubmitted));\r\n  }\n/**\n * Orientation of the chip list.\n */\nariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\rits selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\r\n    this._userTabIndex = value;\r\n    this._tabIndex = value;\r\n  }\n/**\n * Combined stream of all of the child chips' selection change events.\n * @return {?}\n */\nget chipSelectionChanges(): Observable<MdChipSelectionChange> {\r\n    return merge(...this.chips.map(chip => chip.selectionChange));\r\n  }\n/**\n * Combined stream of all of the child chips' focus change events.\n * @return {?}\n */\nget chipFocusChanges(): Observable<MdChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onFocus));\r\n  }\n/**\n * Combined stream of all of the child chips' blur change events.\n * @return {?}\n */\nget chipBlurChanges(): Observable<MdChipEvent> {\r\n    return merge(...this.chips.map(chip => chip._onBlur));\r\n  }\n/**\n * Combined stream of all of the child chips' remove change events.\n * @return {?}\n */\nget chipRemoveChanges(): Observable<MdChipEvent> {\r\n    return merge(...this.chips.map(chip => chip.destroy));\r\n  }\n/**\n * Event emitted when the selected chip list value has been changed by the user.\n */\nchange: EventEmitter<MdChipListChange> = new EventEmitter<MdChipListChange>();\n/**\n * Event that emits whenever the raw value of the chip-list changes. This is here primarily\rto facilitate the two-way binding for the `value` input.\r\\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nconstructor(protected _renderer: Renderer2,\r\n              protected _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic ngControl: NgControl) {\r\n    if (this.ngControl) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\r\n\r\n    this._keyManager = new FocusKeyManager<MdChip>(this.chips).withWrap();\r\n\r\n    // Prevents the chip list from capturing focus and redirecting\r\n    // it back to the first chip when the user tabs out.\r\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\r\n      this._tabIndex = -1;\r\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\r\n    });\r\n\r\n    // When the list changes, re-subscribe\r\n    this._changeSubscription = startWith.call(this.chips.changes, null).subscribe(() => {\r\n      this._resetChips();\r\n\r\n      // Reset chips selected/deselected status\r\n      this._initializeSelection();\r\n\r\n      // Check to see if we need to update our tab index\r\n      this._updateTabIndex();\r\n\r\n      // Check to see if we have a destroyed chip and need to refocus\r\n      this._updateFocusForDestroyedChips();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    this._selectionModel = new SelectionModel<MdChip>(this.multiple, undefined, false);\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\r\n    this._tabOutSubscription.unsubscribe();\r\n\r\n    if (this._changeSubscription) {\r\n      this._changeSubscription.unsubscribe();\r\n    }\r\n    this._dropSubscriptions();\r\n  }\n/**\n * Associates an HTML input element with this chip list.\n * @param {?} inputElement\n * @return {?}\n */\nregisterInput(inputElement: MdChipInput) {\r\n    this._chipInput = inputElement;\r\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\r\n    if (this.chips) {\r\n      this._setSelectionByValue(value, false);\r\n    }\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\r\n    this.disabled = disabled;\r\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nonContainerClick() {\r\n    this.focus();\r\n  }\n/**\n * Focuses the the first non-disabled chip in this chip list, or the associated input when there\rare no eligible chips.\n * @return {?}\n */\nfocus() {\r\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\r\n    // Focus on first element if there's no chipInput inside chip-list\r\n    if (this._chipInput && this._chipInput.focused) {\r\n      // do nothing\r\n    } else if (this.chips.length > 0) {\r\n      this._keyManager.setFirstItemActive();\r\n      this.stateChanges.next();\r\n    } else {\r\n      this._focusInput();\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Attempt to focus an input if we have one.\n * @return {?}\n */\n_focusInput() {\r\n    if (this._chipInput) {\r\n      this._chipInput.focus();\r\n    }\r\n  }\n/**\n * Pass events to the keyboard manager. Available here for tests.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\r\n    let /** @type {?} */ code = event.keyCode;\r\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\r\n    let /** @type {?} */ isInputEmpty = this._isInputEmpty(target);\r\n    let /** @type {?} */ isRtl = this._dir && this._dir.value == 'rtl';\r\n\r\n    let /** @type {?} */ isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\r\n    let /** @type {?} */ isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\r\n    let /** @type {?} */ isBackKey = (code === BACKSPACE || code == DELETE || code == UP_ARROW || isPrevKey);\r\n    // If they are on an empty input and hit backspace/delete/left arrow, focus the last chip\r\n    if (isInputEmpty && isBackKey) {\r\n      this._keyManager.setLastItemActive();\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\r\n    // up/down keys)\r\n    if (target && target.classList.contains('mat-chip')) {\r\n      if (isPrevKey) {\r\n        this._keyManager.setPreviousItemActive();\r\n        event.preventDefault();\r\n      } else if (isNextKey) {\r\n        this._keyManager.setNextItemActive();\r\n        event.preventDefault();\r\n      } else {\r\n        this._keyManager.onKeydown(event);\r\n      }\r\n    }\r\n    this.stateChanges.next();\r\n  }\n/**\n * Check the tab index as you should not be allowed to focus an empty list.\n * @return {?}\n */\nprotected _updateTabIndex(): void {\r\n    // If we have 0 chips, we should not allow keyboard focus\r\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\r\n  }\n/**\n * Update key manager's active item when chip is deleted.\rIf the deleted chip is the last chip in chip list, focus the new last chip.\rOtherwise focus the next chip in the list.\rSave `_lastDestroyedIndex` so we can set the correct focus.\n * @param {?} chip\n * @return {?}\n */\nprotected _updateKeyManager(chip: MdChip) {\r\n    let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\r\n    if (this._isValidIndex(chipIndex)) {\r\n      if (chip._hasFocus) {\r\n        // Check whether the chip is not the last item\r\n        if (chipIndex < this.chips.length - 1) {\r\n          this._keyManager.setActiveItem(chipIndex);\r\n        } else if (chipIndex - 1 >= 0) {\r\n          this._keyManager.setActiveItem(chipIndex - 1);\r\n        }\r\n      }\r\n      if (this._keyManager.activeItemIndex === chipIndex) {\r\n        this._lastDestroyedIndex = chipIndex;\r\n      }\r\n    }\r\n  }\n/**\n * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\rone.\n * @return {?}\n */\nprotected _updateFocusForDestroyedChips() {\r\n    let /** @type {?} */ chipsArray = this.chips;\r\n\r\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\r\n      // Check whether the destroyed chip was the last item\r\n      const /** @type {?} */ newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\r\n      this._keyManager.setActiveItem(newFocusIndex);\r\n      let /** @type {?} */ focusChip = this._keyManager.activeItem;\r\n      // Focus the chip\r\n      if (focusChip) {\r\n        focusChip.focus();\r\n      }\r\n    } else if (chipsArray.length === 0) {\r\n      this._focusInput();\r\n    }\r\n\r\n    // Reset our destroyed index\r\n    this._lastDestroyedIndex = null;\r\n  }\n/**\n * Utility to ensure all indexes are valid.\r\r\\@param index The index to be checked.\r\\@returns True if the index is valid for our list of chips.\n * @param {?} index\n * @return {?}\n */\nprivate _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.chips.length;\r\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate _isInputEmpty(element: HTMLElement): boolean {\r\n    if (element && element.nodeName.toLowerCase() === 'input') {\r\n      let /** @type {?} */ input = /** @type {?} */(( element as HTMLInputElement));\r\n\r\n      return !input.value;\r\n    }\r\n\r\n    return false;\r\n  }\n/**\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\n_setSelectionByValue(value: any, isUserInput: boolean = true) {\r\n    this._clearSelection();\r\n    this.chips.forEach(chip => chip.deselect());\r\n\r\n    if (Array.isArray(value)) {\r\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\r\n      this._sortValues();\r\n    } else {\r\n      const /** @type {?} */ correspondingChip = this._selectValue(value, isUserInput);\r\n\r\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n      // mode, because we don't know what chip the user interacted with last.\r\n      if (correspondingChip) {\r\n        this._keyManager.setActiveItem(this.chips.toArray().indexOf(correspondingChip));\r\n      }\r\n    }\r\n  }\n/**\n * Finds and selects the chip based on its value.\r\\@returns Chip that has the corresponding value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _selectValue(value: any, isUserInput: boolean = true): MdChip | undefined {\r\n\r\n    const /** @type {?} */ correspondingChip = this.chips.find(chip => {\r\n      return chip.value != null && this._compareWith(chip.value,  value);\r\n    });\r\n\r\n    if (correspondingChip) {\r\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\r\n      this._selectionModel.select(correspondingChip);\r\n    }\r\n\r\n    return correspondingChip;\r\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\r\n    // Defer setting the value in order to avoid the \"Expression\r\n    // has changed after it was checked\" errors from Angular.\r\n    Promise.resolve().then(() => {\r\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\r\n      this.stateChanges.next();\r\n    });\r\n  }\n/**\n * Deselects every chip in the list.\r\\@param skip Chip that should not be deselected.\n * @param {?=} skip\n * @return {?}\n */\nprivate _clearSelection(skip?: MdChip): void {\r\n    this._selectionModel.clear();\r\n    this.chips.forEach(chip => {\r\n      if (chip !== skip) {\r\n        chip.deselect();\r\n      }\r\n    });\r\n    this.stateChanges.next();\r\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\rorder that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\r\n    if (this._multiple) {\r\n      this._selectionModel.clear();\r\n\r\n      this.chips.forEach(chip => {\r\n        if (chip.selected) {\r\n          this._selectionModel.select(chip);\r\n        }\r\n      });\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\r\n    let /** @type {?} */ valueToEmit: any = null;\r\n\r\n    if (Array.isArray(this.selected)) {\r\n      valueToEmit = this.selected.map(chip => chip.value);\r\n    } else {\r\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\r\n    }\r\n    this._value = valueToEmit;\r\n    this.change.emit(new MdChipListChange(this, valueToEmit));\r\n    this.valueChange.emit(valueToEmit);\r\n    this._onChange(valueToEmit);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\n/**\n * When blurred, mark the field as touched when focus moved outside the chip list.\n * @return {?}\n */\n_blur() {\r\n    if (!this.disabled) {\r\n      if (this._chipInput) {\r\n        // If there's a chip input, we should check whether the focus moved to chip input.\r\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\r\n        // to chip input, do nothing.\r\n        // Timeout is needed to wait for the focus() event trigger on chip input.\r\n        setTimeout(() => {\r\n          if (!this.focused) {\r\n            this._markAsTouched();\r\n          }\r\n        });\r\n      } else {\r\n        // If there's no chip input, then mark the field as touched.\r\n        this._markAsTouched();\r\n      }\r\n    }\r\n  }\n/**\n * Mark the field as touched\n * @return {?}\n */\n_markAsTouched() {\r\n    this._onTouched();\r\n    this._changeDetectorRef.markForCheck();\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nprivate _resetChips() {\r\n    this._dropSubscriptions();\r\n    this._listenToChipsFocus();\r\n    this._listenToChipsSelection();\r\n    this._listenToChipsRemoved();\r\n  }\n/**\n * @return {?}\n */\nprivate _dropSubscriptions() {\r\n    if (this._chipFocusSubscription) {\r\n      this._chipFocusSubscription.unsubscribe();\r\n      this._chipFocusSubscription = null;\r\n    }\r\n\r\n    if (this._chipBlurSubscription) {\r\n      this._chipBlurSubscription.unsubscribe();\r\n      this._chipBlurSubscription = null;\r\n    }\r\n\r\n    if (this._chipSelectionSubscription) {\r\n      this._chipSelectionSubscription.unsubscribe();\r\n      this._chipSelectionSubscription = null;\r\n    }\r\n  }\n/**\n * Listens to user-generated selection events on each chip.\n * @return {?}\n */\nprivate _listenToChipsSelection(): void {\r\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\r\n      event.source.selected\r\n        ? this._selectionModel.select(event.source)\r\n        : this._selectionModel.deselect(event.source);\r\n\r\n      // For single selection chip list, make sure the deselected value is unselected.\r\n      if (!this.multiple) {\r\n        this.chips.forEach(chip => {\r\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\r\n            chip.deselect();\r\n          }\r\n        });\r\n      }\r\n\r\n      if (event.isUserInput) {\r\n        this._propagateChanges();\r\n      }\r\n    });\r\n  }\n/**\n * Listens to user-generated selection events on each chip.\n * @return {?}\n */\nprivate _listenToChipsFocus(): void {\r\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\r\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(event.chip);\r\n\r\n      if (this._isValidIndex(chipIndex)) {\r\n        this._keyManager.updateActiveItemIndex(chipIndex);\r\n      }\r\n      this.stateChanges.next();\r\n    });\r\n\r\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\r\n      this._blur();\r\n      this.stateChanges.next();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nprivate _listenToChipsRemoved(): void {\r\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\r\n      this._updateKeyManager(event.chip);\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-chip-list, mat-chip-list',\r\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\r\n  exportAs: 'mdChipList, matChipList',\r\n  host: {\r\n    '[attr.tabindex]': '_tabIndex',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-required]': 'required.toString()',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '[attr.aria-multiselectable]': 'multiple',\r\n    '[class.mat-chip-list-disabled]': 'disabled',\r\n    '[class.mat-chip-list-invalid]': 'errorState',\r\n    '[class.mat-chip-list-required]': 'required',\r\n    'role': 'listbox',\r\n    '[attr.aria-orientation]': 'ariaOrientation',\r\n    'class': 'mat-chip-list',\r\n    '(focus)': 'focus()',\r\n    '(blur)': '_blur()',\r\n    '(keydown)': '_keydown($event)'\r\n  },\r\n  providers: [{provide: MdFormFieldControl, useExisting: MdChipList}],\r\n  styleUrls: ['chips.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'value': [{ type: Input },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'disabled': [{ type: Input },],\n'ariaOrientation': [{ type: Input, args: ['aria-orientation', ] },],\n'selectable': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n'chips': [{ type: ContentChildren, args: [MdChip, ] },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/** @type {?} */\nMdChipList.prototype.controlType;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\rneeds to run change detection.\n * @type {?}\n */\nMdChipList.prototype.stateChanges;\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n * @type {?}\n */\nMdChipList.prototype._lastDestroyedIndex;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._chipSet;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabOutSubscription;\n/**\n * Subscription to changes in the chip list.\n * @type {?}\n */\nMdChipList.prototype._changeSubscription;\n/**\n * Subscription to focus changes in the chips.\n * @type {?}\n */\nMdChipList.prototype._chipFocusSubscription;\n/**\n * Subscription to blur changes in the chips.\n * @type {?}\n */\nMdChipList.prototype._chipBlurSubscription;\n/**\n * Subscription to selection changes in chips.\n * @type {?}\n */\nMdChipList.prototype._chipSelectionSubscription;\n/**\n * Subscription to remove changes in chips.\n * @type {?}\n */\nMdChipList.prototype._chipRemoveSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdChipList.prototype._multiple;\n/**\n * The chip input to add more chips\n * @type {?}\n */\nMdChipList.prototype._chipInput;\n/**\n * The aria-describedby attribute on the chip list for improved a11y.\n * @type {?}\n */\nMdChipList.prototype._ariaDescribedby;\n/**\n * Id of the chip list\n * @type {?}\n */\nMdChipList.prototype._id;\n/**\n * Uid of the chip list\n * @type {?}\n */\nMdChipList.prototype._uid;\n/**\n * Whether this is required\n * @type {?}\n */\nMdChipList.prototype._required;\n/**\n * Whether this is disabled\n * @type {?}\n */\nMdChipList.prototype._disabled;\n/** @type {?} */\nMdChipList.prototype._value;\n/**\n * Placeholder for the chip list. Alternatively, placeholder can be set on MdChipInput\n * @type {?}\n */\nMdChipList.prototype._placeholder;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n/**\n * User defined tab index.\rWhen it is not null, use user defined tab index. Otherwise use _tabIndex\n * @type {?}\n */\nMdChipList.prototype._userTabIndex;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * Function when touched\n * @type {?}\n */\nMdChipList.prototype._onTouched;\n/**\n * Function when changed\n * @type {?}\n */\nMdChipList.prototype._onChange;\n/** @type {?} */\nMdChipList.prototype._selectionModel;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMdChipList.prototype._compareWith;\n/**\n * Orientation of the chip list.\n * @type {?}\n */\nMdChipList.prototype.ariaOrientation;\n/**\n * Event emitted when the selected chip list value has been changed by the user.\n * @type {?}\n */\nMdChipList.prototype.change;\n/**\n * Event that emits whenever the raw value of the chip-list changes. This is here primarily\rto facilitate the two-way binding for the `value` input.\r\\@docs-private\n * @type {?}\n */\nMdChipList.prototype.valueChange;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/** @type {?} */\nMdChipList.prototype._renderer;\n/** @type {?} */\nMdChipList.prototype._elementRef;\n/** @type {?} */\nMdChipList.prototype._changeDetectorRef;\n/** @type {?} */\nMdChipList.prototype._dir;\n/** @type {?} */\nMdChipList.prototype._parentForm;\n/** @type {?} */\nMdChipList.prototype._parentFormGroup;\n/** @type {?} */\nMdChipList.prototype.ngControl;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {FocusableOption} from '@angular/cdk/a11y';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n\r\nexport interface MdChipEvent {\r\n  chip: MdChip;\r\n}\n/**\n * Event object emitted by MdChip when selected or deselected.\n */\nexport class MdChipSelectionChange {\n/**\n * @param {?} source\n * @param {?} selected\n * @param {?=} isUserInput\n */\nconstructor(public source: MdChip,\npublic selected: boolean,\npublic isUserInput = false) { }\r\n}\n\nfunction MdChipSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipSelectionChange.prototype.source;\n/** @type {?} */\nMdChipSelectionChange.prototype.selected;\n/** @type {?} */\nMdChipSelectionChange.prototype.isUserInput;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {\r\n  }\r\n}\n\nfunction MdChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipBase.prototype._renderer;\n/** @type {?} */\nMdChipBase.prototype._elementRef;\n}\n\r\n\r\nexport const /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\r\\@docs-private\n */\nexport class MdBasicChip {\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]`,\r\n  host: {'class': 'mat-basic-chip'},\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip extends _MdChipMixinBase implements FocusableOption, OnDestroy, CanColor,\r\n    CanDisable {\r\n\r\n  protected _value: any;\r\n\r\n  protected _selected: boolean = false;\r\n\r\n  protected _selectable: boolean = true;\r\n\r\n  protected _removable: boolean = true;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean {\r\n    return this._selected;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\r\n    this._selected = coerceBooleanProperty(value);\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: value\r\n    });\r\n  }\n/**\n * The value of the chip. Defaults to the content inside <md-chip> tags.\n * @return {?}\n */\nget value(): any {\r\n    return this._value != undefined\r\n      ? this._value\r\n      : this._elementRef.nativeElement.textContent;\r\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\r\n    this._value = newValue;\r\n  }\n/**\n * Whether or not the chips are selectable. When a chip is not selectable,\rchanges to it's selected state are always ignored.\n * @return {?}\n */\nget selectable(): boolean {\r\n    return this._selectable;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\r\n    this._selectable = coerceBooleanProperty(value);\r\n  }\n/**\n * Determines whether or not the chip displays the remove styling and emits (remove) events.\n * @return {?}\n */\nget removable(): boolean {\r\n    return this._removable;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset removable(value: boolean) {\r\n    this._removable = coerceBooleanProperty(value);\r\n  }\n/**\n * Emits when the chip is focused.\n */\n_onFocus = new Subject<MdChipEvent>();\n/**\n * Emits when the chip is blured.\n */\n_onBlur = new Subject<MdChipEvent>();\n/**\n * Emitted when the chip is selected or deselected.\n */\nselectionChange = new EventEmitter<MdChipSelectionChange>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroyed = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\r\\@deprecated Use 'destroyed' instead.\n */\ndestroy = this.destroyed;\n/**\n * Emitted when a chip is to be removed.\n */\nremoved = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when a chip is to be removed.\r\\@deprecated Use `removed` instead.\n */\nonRemove = this.removed;\n/**\n * @return {?}\n */\nget ariaSelected(): string | null {\r\n    return this.selectable ? this.selected.toString() : null;\r\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n */\nconstructor(renderer: Renderer2,\npublic _elementRef: ElementRef) {\r\n    super(renderer, _elementRef);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\r\n    this.destroyed.emit({chip: this});\r\n  }\n/**\n * Selects the chip.\n * @return {?}\n */\nselect(): void {\r\n    this._selected = true;\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: true\r\n    });\r\n  }\n/**\n * Deselects the chip.\n * @return {?}\n */\ndeselect(): void {\r\n    this._selected = false;\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: false,\r\n      selected: false\r\n    });\r\n  }\n/**\n * Select this chip and emit selected event\n * @return {?}\n */\nselectViaInteraction(): void {\r\n    this._selected = true;\r\n    // Emit select event when selected changes.\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput: true,\r\n      selected: true\r\n    });\r\n  }\n/**\n * Toggles the current selected state of this chip.\n * @param {?=} isUserInput\n * @return {?}\n */\ntoggleSelected(isUserInput: boolean = false): boolean {\r\n    this._selected = !this.selected;\r\n\r\n    this.selectionChange.emit({\r\n      source: this,\r\n      isUserInput,\r\n      selected: this._selected\r\n    });\r\n\r\n    return this.selected;\r\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n    this._onFocus.next({chip: this});\r\n  }\n/**\n * Allows for programmatic removal of the chip. Called by the MdChipList when the DELETE or\rBACKSPACE keys are pressed.\r\rInforms any listeners of the removal request. Does not remove the chip from the DOM.\n * @return {?}\n */\nremove(): void {\r\n    if (this.removable) {\r\n      this.removed.emit({chip: this});\r\n    }\r\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\r\n    // Check disabled\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    this.focus();\r\n  }\n/**\n * Handle custom key presses.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    switch (event.keyCode) {\r\n      case DELETE:\r\n      case BACKSPACE:\r\n        // If we are removable, remove the focused chip\r\n        this.remove();\r\n        // Always prevent so page navigation does not occur\r\n        event.preventDefault();\r\n        break;\r\n      case SPACE:\r\n        // If we are selectable, toggle the focused chip\r\n        if (this.selectable) {\r\n          this.toggleSelected(true);\r\n        }\r\n\r\n        // Always prevent space from scrolling the page since the list has focus\r\n        event.preventDefault();\r\n        break;\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_blur(): void {\r\n    this._hasFocus = false;\r\n    this._onBlur.next({chip: this});\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\r\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\r\n  inputs: ['color', 'disabled'],\r\n  exportAs: 'mdChip, matChip',\r\n  host: {\r\n    'class': 'mat-chip',\r\n    'tabindex': '-1',\r\n    'role': 'option',\r\n    '[class.mat-chip-selected]': 'selected',\r\n    '[attr.disabled]': 'disabled || null',\r\n    '[attr.aria-disabled]': 'disabled.toString()',\r\n    '[attr.aria-selected]': 'ariaSelected',\r\n    '(click)': '_handleClick($event)',\r\n    '(keydown)': '_handleKeydown($event)',\r\n    '(focus)': '_hasFocus = true',\r\n    '(blur)': '_blur()',\r\n  },\r\n\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selected': [{ type: Input },],\n'value': [{ type: Input },],\n'selectable': [{ type: Input },],\n'removable': [{ type: Input },],\n'selectionChange': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'destroy': [{ type: Output },],\n'removed': [{ type: Output },],\n'onRemove': [{ type: Output, args: ['remove', ] },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/** @type {?} */\nMdChip.prototype._value;\n/** @type {?} */\nMdChip.prototype._selected;\n/** @type {?} */\nMdChip.prototype._selectable;\n/** @type {?} */\nMdChip.prototype._removable;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMdChip.prototype._hasFocus;\n/**\n * Emits when the chip is focused.\n * @type {?}\n */\nMdChip.prototype._onFocus;\n/**\n * Emits when the chip is blured.\n * @type {?}\n */\nMdChip.prototype._onBlur;\n/**\n * Emitted when the chip is selected or deselected.\n * @type {?}\n */\nMdChip.prototype.selectionChange;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroyed;\n/**\n * Emitted when the chip is destroyed.\r\\@deprecated Use 'destroyed' instead.\n * @type {?}\n */\nMdChip.prototype.destroy;\n/**\n * Emitted when a chip is to be removed.\n * @type {?}\n */\nMdChip.prototype.removed;\n/**\n * Emitted when a chip is to be removed.\r\\@deprecated Use `removed` instead.\n * @type {?}\n */\nMdChip.prototype.onRemove;\n/** @type {?} */\nMdChip.prototype._elementRef;\n}\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\ravailable at https://material.io/icons/#ic_cancel.\r\rExample:\r\r    <md-chip>\r      <md-icon mdChipRemove>cancel</md-icon>\r    </md-chip>\r\rYou *may* use a custom icon, but you may need to override the `md-chip-remove` positioning styles\rto properly center the icon within the chip.\n */\nexport class MdChipRemove {\n/**\n * @param {?} _parentChip\n */\nconstructor(protected _parentChip: MdChip) {\r\n  }\n/**\n * Calls the parent chip's public `remove()` method if applicable.\n * @return {?}\n */\n_handleClick(): void {\r\n    if (this._parentChip.removable) {\r\n      this._parentChip.remove();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdChipRemove], [matChipRemove]',\r\n  host: {\r\n    'class': 'mat-chip-remove',\r\n    '(click)': '_handleClick($event)',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdChip, },\n];\n}\n\nfunction MdChipRemove_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipRemove.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipRemove.ctorParameters;\n/** @type {?} */\nMdChipRemove.prototype._parentChip;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}