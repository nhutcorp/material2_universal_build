{"version":3,"file":"radio.es5.js","sources":["../../../src/lib/radio/index.ts","../../../src/lib/radio/radio-module.ts","../../../src/lib/radio/radio.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton,MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MatRadioButton,MatRadioButtonBase,MatRadioChange,MatRadioGroup,MatRadioGroupBase,MatRadioModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {VIEWPORT_RULER_PROVIDER} from '@angular/cdk/overlay';\r\nimport {\r\n  MdRippleModule,\r\n  MdCommonModule,\r\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\r\n} from '@angular/material/core';\r\nimport {MdRadioGroup, MdRadioButton} from './radio';\r\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdRadioModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CommonModule, MdRippleModule, MdCommonModule, A11yModule],\r\n  exports: [MdRadioGroup, MdRadioButton, MdCommonModule],\r\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER],\r\n  declarations: [MdRadioGroup, MdRadioButton],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n  forwardRef,\r\n  ViewChild,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n} from '@angular/core';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\nimport {\r\n  RippleRef,\r\n  UniqueSelectionDispatcher,\r\n  MdRipple, MATERIAL_COMPATIBILITY_MODE,\r\n} from '@angular/material/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {mixinDisabled, CanDisable} from '@angular/material/core';\r\nimport {CanColor, mixinColor} from '@angular/material/core';\r\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\r\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\r\n\r\n// Increasing integer for generating unique ids for radio components.\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\rallows it to support [(ngModel)] and ngControl.\r\\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdRadioGroup),\r\n  multi: true\r\n};\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton | null;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\r\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioGroupBase { }\r\nexport const /** @type {?} */ _MdRadioGroupMixinBase = mixinDisabled(MdRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup extends _MdRadioGroupMixinBase\r\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\ra corresponding radio button with a matching value. If there is *not* such a corresponding\rradio button, this value persists to be applied in case a new radio button is added with a\rmatching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${nextUniqueId++}`;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton | null = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nprivate _labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio group is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Whether the radio group is required.\n */\nprivate _required: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\r\\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\rChange events are only emitted when the value changes due to user interaction with\ra radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton>;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\r\n    this._name = value;\r\n    this._updateRadioButtonNames();\r\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\r\\@deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\r\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\r\n    // label relative to the checkbox. As such, they are inverted.\r\n    return this.labelPosition == 'after' ? 'start' : 'end';\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\r\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\r\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @return {?}\n */\nget labelPosition() {\r\n    return this._labelPosition;\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset labelPosition(v) {\r\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\r\n    this._markRadiosForCheck();\r\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\r\n    if (this._value != newValue) {\r\n      // Set this before proceeding to ensure no circular loop occurs with selection.\r\n      this._value = newValue;\r\n\r\n      this._updateSelectedRadioFromValue();\r\n      this._checkSelectedRadioButton();\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\r\n    if (this._selected && !this._selected.checked) {\r\n      this._selected.checked = true;\r\n    }\r\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton | null) {\r\n    this._selected = selected;\r\n    this.value = selected ? selected.value : null;\r\n    this._checkSelectedRadioButton();\r\n  }\n/**\n * Whether the radio group is disabled\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._markRadiosForCheck();\r\n  }\n/**\n * Whether the radio group is required\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n    this._markRadiosForCheck();\r\n  }\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\r\n    super();\r\n  }\n/**\n * Initialize properties once content children are available.\rThis allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\r\n    // Mark this component as initialized in AfterContentInit because the initial value can\r\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\r\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\r\n    this._isInitialized = true;\r\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\rradio buttons upon their blur.\n * @return {?}\n */\n_touch() {\r\n    if (this.onTouched) {\r\n      this.onTouched();\r\n    }\r\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\r\n    if (this._radios) {\r\n      this._radios.forEach(radio => {\r\n        radio.name = this.name;\r\n      });\r\n    }\r\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\r\n    // If the value already matches the selected radio, do nothing.\r\n    const /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\r\n\r\n    if (this._radios != null && !isAlreadySelected) {\r\n      this._selected = null;\r\n      this._radios.forEach(radio => {\r\n        radio.checked = this.value == radio.value;\r\n        if (radio.checked) {\r\n          this._selected = radio;\r\n        }\r\n      });\r\n    }\r\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\r\n    if (this._isInitialized) {\r\n      const /** @type {?} */ event = new MdRadioChange();\r\n      event.source = this._selected;\r\n      event.value = this._value;\r\n      this.change.emit(event);\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_markRadiosForCheck() {\r\n    if (this._radios) {\r\n      this._radios.forEach(radio => radio._markForCheck());\r\n    }\r\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\r\\@param value\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\r\n    this.value = value;\r\n    this._changeDetector.markForCheck();\r\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\rImplemented as part of ControlValueAccessor.\r\\@param fn Callback to be registered.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\rImplemented as part of ControlValueAccessor.\r\\@param fn Callback to be registered.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\r\\@param isDisabled Whether the control should be disabled.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n    this._changeDetector.markForCheck();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'md-radio-group, mat-radio-group',\r\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\r\n  host: {\r\n    'role': 'radiogroup',\r\n    'class': 'mat-radio-group',\r\n  },\r\n  inputs: ['disabled'],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\ra corresponding radio button with a matching value. If there is *not* such a corresponding\rradio button, this value persists to be applied in case a new radio button is added with a\rmatching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype._labelPosition;\n/**\n * Whether the radio group is disabled.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * Whether the radio group is required.\n * @type {?}\n */\nMdRadioGroup.prototype._required;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\r\\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\rChange events are only emitted when the value changes due to user interaction with\ra radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/** @type {?} */\nMdRadioGroup.prototype._changeDetector;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdRadioButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButtonBase.prototype._renderer;\n/** @type {?} */\nMdRadioButtonBase.prototype._elementRef;\n}\n\r\n// As per Material design specifications the selection control radio should use the accent color\r\n// palette by default. https://material.io/guidelines/components/selection-controls.html\r\nexport const /** @type {?} */ _MdRadioButtonMixinBase = mixinColor(mixinDisableRipple(MdRadioButtonBase), 'accent');\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton extends _MdRadioButtonMixinBase\r\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\nprivate _uniqueId: string = `md-radio-${++nextUniqueId}`;\n/**\n * The unique ID for the radio button.\n */\nid: string = this._uniqueId;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\r\n    return this._checked;\r\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\r\n    if (this._checked != newCheckedState) {\r\n      this._checked = newCheckedState;\r\n\r\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\r\n        this.radioGroup.selected = this;\r\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\r\n        // When unchecking the selected radio button, update the selected radio\r\n        // property on the group.\r\n        this.radioGroup.selected = null;\r\n      }\r\n\r\n      if (newCheckedState) {\r\n        // Notify all radio buttons with the same name to un-check.\r\n        this._radioDispatcher.notify(this.id, this.name);\r\n      }\r\n      this._changeDetector.markForCheck();\r\n    }\r\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\r\n    return this._value;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\r\n    if (this._value != value) {\r\n      this._value = value;\r\n      if (this.radioGroup != null) {\r\n        if (!this.checked) {\r\n          // Update checked when the value changed to match the radio group's value\r\n          this.checked = this.radioGroup.value == value;\r\n        }\r\n        if (this.checked) {\r\n          this.radioGroup.selected = this;\r\n        }\r\n      }\r\n    }\r\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\r\\@deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\r\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\r\n    // label relative to the checkbox. As such, they are inverted.\r\n    return this.labelPosition == 'after' ? 'start' : 'end';\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\r\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\r\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\r\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\r\n    this._labelPosition = value;\r\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\r\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\n/**\n * Whether the radio button is required.\n * @return {?}\n */\nget required(): boolean {\r\n    return this._required || (this.radioGroup && this.radioGroup.required);\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\r\n    this._required = coerceBooleanProperty(value);\r\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\rChange events are only emitted when the value changes due to user interaction with\rthe radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Whether this radio is required.\n */\nprivate _required: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Unregister function for _radioDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _changeDetector\n * @param {?} _focusMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\r\n              elementRef: ElementRef,\r\n              renderer: Renderer2,\nprivate _changeDetector: ChangeDetectorRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\r\n    super(renderer, elementRef);\r\n\r\n    // Assertions. Ideally these should be stripped out by the compiler.\r\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\r\n    this.radioGroup = radioGroup;\r\n\r\n    this._removeUniqueSelectionListener =\r\n      _radioDispatcher.listen((id: string, name: string) => {\r\n        if (id != this.id && name == this.name) {\r\n          this.checked = false;\r\n        }\r\n      });\r\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\r\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\r\n  }\n/**\n * Marks the radio button as needing checking for change detection.\rThis method is exposed because the parent radio group will directly\rupdate bound properties of the radio button.\n * @return {?}\n */\n_markForCheck() {\r\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\r\n    // update radio button's status\r\n    this._changeDetector.markForCheck();\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    if (this.radioGroup) {\r\n      // If the radio is inside a radio group, determine if it should be checked\r\n      this.checked = this.radioGroup.value === this._value;\r\n      // Copy name from parent radio group\r\n      this.name = this.radioGroup.name;\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\r\n    this._focusMonitor\r\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\r\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\r\n    this._removeUniqueSelectionListener();\r\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\r\n    const /** @type {?} */ event = new MdRadioChange();\r\n    event.source = this;\r\n    event.value = this._value;\r\n    this.change.emit(event);\r\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `radio-button` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\rClicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the `change` output.\r\n    event.stopPropagation();\r\n\r\n    const /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\r\n    this.checked = true;\r\n    this._emitChangeEvent();\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\r\n      this.radioGroup._touch();\r\n      if (groupValueChanged) {\r\n        this.radioGroup._emitChangeEvent();\r\n      }\r\n    }\r\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\r\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\r\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\r\n    } else if (!focusOrigin) {\r\n      if (this.radioGroup) {\r\n        this.radioGroup._touch();\r\n      }\r\n\r\n      if (this._focusRipple) {\r\n        this._focusRipple.fadeOut();\r\n        this._focusRipple = null;\r\n      }\r\n    }\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-radio-button, mat-radio-button',\r\n  templateUrl: 'radio.html',\r\n  styleUrls: ['radio.css'],\r\n  inputs: ['color', 'disableRipple'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  host: {\r\n    'class': 'mat-radio-button',\r\n    '[class.mat-radio-checked]': 'checked',\r\n    '[class.mat-radio-disabled]': 'disabled',\r\n    '[attr.id]': 'id',\r\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\r\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\r\n    // the focus to the native element.\r\n    '(focus)': '_inputElement.nativeElement.focus()',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: FocusMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/** @type {?} */\nMdRadioButton.prototype._uniqueId;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\rChange events are only emitted when the value changes due to user interaction with\rthe radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Whether this radio is required.\n * @type {?}\n */\nMdRadioButton.prototype._required;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * Unregister function for _radioDispatcher *\n * @type {?}\n */\nMdRadioButton.prototype._removeUniqueSelectionListener;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._changeDetector;\n/** @type {?} */\nMdRadioButton.prototype._focusMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}