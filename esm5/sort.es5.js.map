{"version":3,"file":"sort.es5.js","sources":["../../../src/lib/sort/index.ts","../../../src/lib/sort/sort-module.ts","../../../src/lib/sort/sort-header.ts","../../../src/lib/sort/sort-header-intl.ts","../../../src/lib/sort/sort.ts","../../../src/lib/sort/sort-errors.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSortModule,SortDirection,MdSortHeader,MdSortHeaderIntl,MdSortable,Sort,MdSort,MatSort,MatSortable,MatSortHeader,MatSortHeaderIntl,MatSortModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {MdSortHeader} from './sort-header';\r\nimport {MdSort} from './sort';\r\nimport {MdSortHeaderIntl} from './sort-header-intl';\r\nimport {CommonModule} from '@angular/common';\nexport class MdSortModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CommonModule],\r\n  exports: [MdSort, MdSortHeader],\r\n  declarations: [MdSort, MdSortHeader],\r\n  providers: [MdSortHeaderIntl]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  Optional,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  trigger,\r\n  state,\r\n  style,\r\n  animate,\r\n  transition\r\n} from '@angular/animations';\r\nimport {CdkColumnDef} from '@angular/cdk/table';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {merge} from 'rxjs/observable/merge';\r\nimport {MdSort, MdSortable} from './sort';\r\nimport {MdSortHeaderIntl} from './sort-header-intl';\r\nimport {getMdSortHeaderNotContainedWithinMdSortError} from './sort-errors';\r\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\r\n\r\nconst /** @type {?} */ SORT_ANIMATION_TRANSITION =\r\n    AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\rarrow to display the current sort direction.\r\rMust be provided with an id and contained within a parent MdSort directive.\r\rIf used on header cells in a CdkTable, it will automatically default its id from its containing\rcolumn definition.\n */\nexport class MdSortHeader implements MdSortable {\nprivate _rerenderSubscription: Subscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\rthe column's name.\n */\nid: string;\n/**\n * Sets the position of the arrow that displays when sorted.\n */\narrowPosition: 'before' | 'after' = 'after';\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n */\nstart: 'asc' | 'desc';\n/**\n * Overrides the disable clear value of the containing MdSort for this MdSortable.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _id() { return this.id; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _id(v: string) { this.id = v; }\n/**\n * @param {?} _intl\n * @param {?} changeDetectorRef\n * @param {?} _sort\n * @param {?} _cdkColumnDef\n */\nconstructor(public _intl: MdSortHeaderIntl,\r\n              changeDetectorRef: ChangeDetectorRef,\npublic _sort: MdSort,\npublic _cdkColumnDef: CdkColumnDef) {\r\n    if (!_sort) {\r\n      throw getMdSortHeaderNotContainedWithinMdSortError();\r\n    }\r\n\r\n    this._rerenderSubscription = merge(_sort.sortChange, _intl.changes).subscribe(() => {\r\n      changeDetectorRef.markForCheck();\r\n    });\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    if (!this.id && this._cdkColumnDef) {\r\n      this.id = this._cdkColumnDef.name;\r\n    }\r\n\r\n    this._sort.register(this);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._sort.deregister(this);\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\n/**\n * Whether this MdSortHeader is currently sorted in either ascending or descending order.\n * @return {?}\n */\n_isSorted() {\r\n    return this._sort.active == this.id && this._sort.direction;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: '[md-sort-header], [mat-sort-header]',\r\n  templateUrl: 'sort-header.html',\r\n  styleUrls: ['sort-header.css'],\r\n  host: {\r\n    '(click)': '_sort.sort(this)',\r\n    '[class.mat-sort-header-sorted]': '_isSorted()',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('indicator', [\r\n      state('asc', style({transform: 'translateY(0px)'})),\r\n      // 10px is the height of the sort indicator, minus the width of the pointers\r\n      state('desc', style({transform: 'translateY(10px)'})),\r\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\r\n    ]),\r\n    trigger('leftPointer', [\r\n      state('asc', style({transform: 'rotate(-45deg)'})),\r\n      state('desc', style({transform: 'rotate(45deg)'})),\r\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\r\n    ]),\r\n    trigger('rightPointer', [\r\n      state('asc', style({transform: 'rotate(45deg)'})),\r\n      state('desc', style({transform: 'rotate(-45deg)'})),\r\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\r\n    ])\r\n  ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSortHeaderIntl, },\n{type: ChangeDetectorRef, },\n{type: MdSort, decorators: [{ type: Optional }, ]},\n{type: CdkColumnDef, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input, args: ['md-sort-header', ] },],\n'arrowPosition': [{ type: Input },],\n'start': [{ type: Input, args: ['start', ] },],\n'disableClear': [{ type: Input },],\n'_id': [{ type: Input, args: ['mat-sort-header', ] },],\n};\n}\n\nfunction MdSortHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeader.ctorParameters;\n/** @type {?} */\nMdSortHeader.propDecorators;\n/** @type {?} */\nMdSortHeader.prototype._rerenderSubscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\rthe column's name.\n * @type {?}\n */\nMdSortHeader.prototype.id;\n/**\n * Sets the position of the arrow that displays when sorted.\n * @type {?}\n */\nMdSortHeader.prototype.arrowPosition;\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n * @type {?}\n */\nMdSortHeader.prototype.start;\n/** @type {?} */\nMdSortHeader.prototype._disableClear;\n/** @type {?} */\nMdSortHeader.prototype._intl;\n/** @type {?} */\nMdSortHeader.prototype._sort;\n/** @type {?} */\nMdSortHeader.prototype._cdkColumnDef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {SortDirection} from './sort-direction';\n/**\n * To modify the labels and text displayed, create a new instance of MdSortHeaderIntl and\rinclude it in a custom provider.\n */\nexport class MdSortHeaderIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\rcomponents if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * ARIA label for the sorting button.\n */\nsortButtonLabel = (id: string) => {\r\n    return `Change sorting for ${id}`;\r\n  }\n/**\n * A label to describe the current sort (visible only to screenreaders).\n */\nsortDescriptionLabel = (id: string, direction: SortDirection) => {\r\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortHeaderIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeaderIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeaderIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\rcomponents if the labels have changed after initialization.\n * @type {?}\n */\nMdSortHeaderIntl.prototype.changes;\n/**\n * ARIA label for the sorting button.\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortButtonLabel;\n/**\n * A label to describe the current sort (visible only to screenreaders).\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortDescriptionLabel;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, EventEmitter, Input, Output} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {SortDirection} from './sort-direction';\r\nimport {getMdSortDuplicateMdSortableIdError, getMdSortHeaderMissingIdError} from './sort-errors';\r\n\r\nexport interface MdSortable {\r\n  id: string;\r\n  start: 'asc' | 'desc';\r\n  disableClear: boolean;\r\n}\r\n\r\nexport interface Sort {\r\n  active: string;\r\n  direction: SortDirection;\r\n}\n/**\n * Container for MdSortables to manage the sort state and provide default sort parameters.\n */\nexport class MdSort {\n/**\n * Collection of all registered sortables that this directive manages.\n */\nsortables = new Map<string, MdSortable>();\n/**\n * The id of the most recently sorted MdSortable.\n */\nactive: string;\n/**\n * The direction to set when an MdSortable is initially sorted.\rMay be overriden by the MdSortable's sort start.\n */\nstart: 'asc' | 'desc' = 'asc';\n/**\n * The sort direction of the currently active MdSortable.\n */\ndirection: SortDirection = '';\n/**\n * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\rMay be overriden by the MdSortable's disable clear input.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _matSortActive() { return this.active; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortActive(v) { this.active = v; }\n/**\n * @return {?}\n */\nget _matSortStart() { return this.start; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortStart(v) { this.start = v; }\n/**\n * @return {?}\n */\nget _matSortDirection() { return this.direction; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortDirection(v) { this.direction = v; }\n/**\n * @return {?}\n */\nget _matSortDisableClear() { return this.disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortDisableClear(v) { this.disableClear = v; }\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n */\nreadonly sortChange = new EventEmitter<Sort>();\n/**\n * @return {?}\n */\nget _matSortChange(): EventEmitter<Sort> { return this.sortChange; }\n/**\n * Register function to be used by the contained MdSortables. Adds the MdSortable to the\rcollection of MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nregister(sortable: MdSortable) {\r\n    if (!sortable.id) {\r\n      throw getMdSortHeaderMissingIdError();\r\n    }\r\n\r\n    if (this.sortables.has(sortable.id)) {\r\n      throw getMdSortDuplicateMdSortableIdError(sortable.id);\r\n    }\r\n    this.sortables.set(sortable.id, sortable);\r\n  }\n/**\n * Unregister function to be used by the contained MdSortables. Removes the MdSortable from the\rcollection of contained MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nderegister(sortable: MdSortable) {\r\n    this.sortables.delete(sortable.id);\r\n  }\n/**\n * Sets the active sort id and determines the new sort direction.\n * @param {?} sortable\n * @return {?}\n */\nsort(sortable: MdSortable) {\r\n    if (this.active != sortable.id) {\r\n      this.active = sortable.id;\r\n      this.direction = sortable.start ? sortable.start : this.start;\r\n    } else {\r\n      this.direction = this.getNextSortDirection(sortable);\r\n    }\r\n\r\n    this.sortChange.next({active: this.active, direction: this.direction});\r\n  }\n/**\n * Returns the next sort direction of the active sortable, checking for potential overrides.\n * @param {?} sortable\n * @return {?}\n */\ngetNextSortDirection(sortable: MdSortable): SortDirection {\r\n    if (!sortable) { return ''; }\r\n\r\n    // Get the sort direction cycle with the potential sortable overrides.\r\n    const /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\r\n    let /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\r\n\r\n    // Get and return the next direction in the cycle\r\n    let /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\r\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\r\n    return sortDirectionCycle[nextDirectionIndex];\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdSort], [matSort]',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input, args: ['mdSortActive', ] },],\n'start': [{ type: Input, args: ['mdSortStart', ] },],\n'direction': [{ type: Input, args: ['mdSortDirection', ] },],\n'disableClear': [{ type: Input, args: ['mdSortDisableClear', ] },],\n'_matSortActive': [{ type: Input, args: ['matSortActive', ] },],\n'_matSortStart': [{ type: Input, args: ['matSortStart', ] },],\n'_matSortDirection': [{ type: Input, args: ['matSortDirection', ] },],\n'_matSortDisableClear': [{ type: Input, args: ['matSortDisableClear', ] },],\n'sortChange': [{ type: Output, args: ['mdSortChange', ] },],\n'_matSortChange': [{ type: Output, args: ['matSortChange', ] },],\n};\n}\n\nfunction MdSort_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSort.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSort.ctorParameters;\n/** @type {?} */\nMdSort.propDecorators;\n/**\n * Collection of all registered sortables that this directive manages.\n * @type {?}\n */\nMdSort.prototype.sortables;\n/**\n * The id of the most recently sorted MdSortable.\n * @type {?}\n */\nMdSort.prototype.active;\n/**\n * The direction to set when an MdSortable is initially sorted.\rMay be overriden by the MdSortable's sort start.\n * @type {?}\n */\nMdSort.prototype.start;\n/**\n * The sort direction of the currently active MdSortable.\n * @type {?}\n */\nMdSort.prototype.direction;\n/** @type {?} */\nMdSort.prototype._disableClear;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n * @type {?}\n */\nMdSort.prototype.sortChange;\n}\n\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\r\n                               disableClear: boolean): SortDirection[] {\r\n  let /** @type {?} */ sortOrder: SortDirection[] = ['asc', 'desc'];\r\n  if (start == 'desc') { sortOrder.reverse(); }\r\n  if (!disableClear) { sortOrder.push(''); }\r\n\r\n  return sortOrder;\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nexport function getMdSortDuplicateMdSortableIdError(id: string): Error {\r\n  return Error(`Cannot have two MdSortables with the same id (${id}).`);\r\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderNotContainedWithinMdSortError(): Error {\r\n  return Error(`MdSortHeader must be placed within a parent element with the MdSort directive.`);\r\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderMissingIdError(): Error {\r\n  return Error(`MdSortHeader must be provided with a unique id.`);\r\n}\r\n"],"names":[],"mappings":"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"}