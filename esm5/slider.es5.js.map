{"version":3,"file":"slider.es5.js","sources":["../../../src/lib/slider/index.ts","../../../src/lib/slider/slider-module.ts","../../../src/lib/slider/slider.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,MAT_SLIDER_VALUE_ACCESSOR,MatSlider,MatSliderBase,MatSliderChange,MatSliderModule} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {GestureConfig, MdCommonModule} from '@angular/material/core';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {MdSlider} from './slider';\nexport class MdSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [CommonModule, MdCommonModule, BidiModule, A11yModule],\r\n  exports: [MdSlider, MdCommonModule],\r\n  declarations: [MdSlider],\r\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  Renderer2,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  CanColor,\r\n  CanDisable,\r\n  HammerInput,\r\n  mixinColor,\r\n  mixinDisabled,\r\n} from '@angular/material/core';\r\nimport {FocusOrigin, FocusMonitor} from '@angular/cdk/a11y';\r\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\rthe default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\rThis allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdSlider),\r\n  multi: true\r\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number | null;\r\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSliderBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\r\n}\n\nfunction MdSliderBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderBase.prototype._renderer;\n/** @type {?} */\nMdSliderBase.prototype._elementRef;\n}\n\r\nexport const /** @type {?} */ _MdSliderMixinBase = mixinColor(mixinDisabled(MdSliderBase), 'accent');\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\rbehavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\r\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) {\r\n    this._invert = coerceBooleanProperty(value);\r\n  }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() { return this._max; }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\r\n    this._max = coerceNumberProperty(v, this._max);\r\n    this._percent = this._calculatePercentage(this._value);\r\n\r\n    // Since this also modifies the percentage, we need to let the change detection know.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() { return this._min; }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\r\n    this._min = coerceNumberProperty(v, this._min);\r\n\r\n    // If the value wasn't explicitly set by the user, set it to the min.\r\n    if (this._value === null) {\r\n      this.value = this._min;\r\n    }\r\n    this._percent = this._calculatePercentage(this._value);\r\n\r\n    // Since this also modifies the percentage, we need to let the change detection know.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\r\n    this._step = coerceNumberProperty(v, this._step);\r\n\r\n    if (this._step % 1 !== 0) {\r\n      this._roundLabelTo = /** @type {?} */(( this._step.toString().split('.').pop())).length;\r\n    }\r\n\r\n    // Since this could modify the label, we need to notify the change detection.\r\n    this._changeDetectorRef.markForCheck();\r\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\rEx: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\r\n    if (value === 'auto') {\r\n      this._tickInterval = 'auto';\r\n    } else if (typeof value === 'number' || typeof value === 'string') {\r\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\r\n    } else {\r\n      this._tickInterval = 0;\r\n    }\r\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\r\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\r\n    if (this._value === null) {\r\n      this.value = this._min;\r\n    }\r\n    return this._value;\r\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number | null) {\r\n    if (v !== this._value) {\r\n      this._value = coerceNumberProperty(v, this._value || 0);\r\n      this._percent = this._calculatePercentage(this._value);\r\n\r\n      // Since this also modifies the percentage, we need to let the change detection know.\r\n      this._changeDetectorRef.markForCheck();\r\n    }\r\n  }\nprivate _value: number | null = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) {\r\n    this._vertical = coerceBooleanProperty(value);\r\n  }\nprivate _vertical = false;\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string | number {\r\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\r\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\r\n    // every change detection cycle.\r\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\r\n      return this.value.toFixed(this._roundLabelTo);\r\n    }\r\n\r\n    return this.value || 0;\r\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\rUsed to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\rUsed to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\r(i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\r\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\r\n    // top. However from a y-axis standpoint this is inverted.\r\n    return this.vertical ? !this.invert : this.invert;\r\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\r\n    return this.percent === 0;\r\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\relements.\n * @return {?}\n */\nget _thumbGap() {\r\n    if (this.disabled) {\r\n      return DISABLED_THUMB_GAP;\r\n    }\r\n    if (this._isMinValue && !this.thumbLabel) {\r\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\r\n    }\r\n    return 0;\r\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\r\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\r\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\r\n    return {\r\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\r\n    };\r\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\r\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\r\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\r\n    return {\r\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\r\n    };\r\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\r\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\r\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\r\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\r\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\r\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\r\n    return {\r\n      'transform': `translate${axis}(${sign}${offset}%)`\r\n    };\r\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\r\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\r\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\r\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\r\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\r\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\r\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\r\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\r\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\r\n    let /** @type {?} */ styles: { [key: string]: string } = {\r\n      'backgroundSize': backgroundSize,\r\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\r\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\r\n    };\r\n\r\n    if (this._isMinValue && this._thumbGap) {\r\n      let /** @type {?} */ side = this.vertical ?\r\n          (this._invertAxis ? 'Bottom' : 'Top') :\r\n          (this._invertAxis ? 'Right' : 'Left');\r\n      styles[`padding${side}`] = `${this._thumbGap}px`;\r\n    }\r\n\r\n    return styles;\r\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\r\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\r\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\r\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\r\n    let /** @type {?} */ invertOffset =\r\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\r\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\r\n    return {\r\n      'transform': `translate${axis}(-${offset}%)`\r\n    };\r\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect | null = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * Subscription to the Directionality change EventEmitter.\n */\nprivate _dirChangeSubscription = Subscription.EMPTY;\n/**\n * The value of the slider when the slide start event fires.\n */\nprivate _valueOnSlideStart: number | null;\n/**\n * Reference to the inner slider wrapper element.\n */\nprivate _sliderWrapper: ElementRef;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\rfrom the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\r\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\r\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\r\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\r\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\r\n              elementRef: ElementRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\r\n    super(renderer, elementRef);\r\n  }\n/**\n * @return {?}\n */\nngOnInit() {\r\n    this._focusMonitor\r\n        .monitor(this._elementRef.nativeElement, this._renderer, true)\r\n        .subscribe((origin: FocusOrigin) => {\r\n          this._isActive = !!origin && origin !== 'keyboard';\r\n          this._changeDetectorRef.detectChanges();\r\n        });\r\n    if (this._dir) {\r\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n      });\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n    this._dirChangeSubscription.unsubscribe();\r\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\r\n    // ticks and determine where on the slider click and slide events happen.\r\n    this._sliderDimensions = this._getSliderDimensions();\r\n    this._updateTickIntervalPercent();\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    let /** @type {?} */ oldValue = this.value;\r\n    this._isSliding = false;\r\n    this._focusHostElement();\r\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\r\n\r\n    /* Emit a change and input event if the value changed. */\r\n    if (oldValue != this.value) {\r\n      this._emitInputEvent();\r\n      this._emitChangeEvent();\r\n    }\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\r\n    // state, call the slide start handler manually.\r\n    if (!this._isSliding) {\r\n      this._onSlideStart(null);\r\n    }\r\n\r\n    // Prevent the slide from selecting anything else.\r\n    event.preventDefault();\r\n\r\n    let /** @type {?} */ oldValue = this.value;\r\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\r\n\r\n    // Native range elements always emit `input` events when the value changed while sliding.\r\n    if (oldValue != this.value) {\r\n      this._emitInputEvent();\r\n    }\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput | null) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // Simulate mouseenter in case this is a mobile device.\r\n    this._onMouseenter();\r\n\r\n    this._isSliding = true;\r\n    this._focusHostElement();\r\n    this._valueOnSlideStart = this.value;\r\n\r\n    if (event) {\r\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\r\n      event.preventDefault();\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\r\n    this._isSliding = false;\r\n\r\n    if (this._valueOnSlideStart != this.value) {\r\n      this._emitChangeEvent();\r\n    }\r\n    this._valueOnSlideStart = null;\r\n  }\n/**\n * @return {?}\n */\n_onFocus() {\r\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\r\n    // ticks and determine where on the slider click and slide events happen.\r\n    this._sliderDimensions = this._getSliderDimensions();\r\n    this._updateTickIntervalPercent();\r\n  }\n/**\n * @return {?}\n */\n_onBlur() {\r\n    this.onTouched();\r\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\r\n    if (this.disabled) { return; }\r\n\r\n    let /** @type {?} */ oldValue = this.value;\r\n\r\n    switch (event.keyCode) {\r\n      case PAGE_UP:\r\n        this._increment(10);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._increment(-10);\r\n        break;\r\n      case END:\r\n        this.value = this.max;\r\n        break;\r\n      case HOME:\r\n        this.value = this.min;\r\n        break;\r\n      case LEFT_ARROW:\r\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\r\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\r\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\r\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\r\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\r\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\r\n        // sighted users, therefore we do not swap the meaning.\r\n        this._increment(this._direction == 'rtl' ? 1 : -1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._increment(1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\r\n        this._increment(this._direction == 'rtl' ? -1 : 1);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._increment(-1);\r\n        break;\r\n      default:\r\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\r\n        // it.\r\n        return;\r\n    }\r\n\r\n    if (oldValue != this.value) {\r\n      this._emitInputEvent();\r\n      this._emitChangeEvent();\r\n    }\r\n\r\n    this._isSliding = true;\r\n    event.preventDefault();\r\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\r\n    this._isSliding = false;\r\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\r\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\r\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\r\n    if (!this._sliderDimensions) {\r\n      return;\r\n    }\r\n\r\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\r\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\r\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\r\n\r\n    // The exact value is calculated from the event and used to find the closest snap value.\r\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\r\n    if (this._invertMouseCoords) {\r\n      percent = 1 - percent;\r\n    }\r\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\r\n\r\n    // This calculation finds the closest step by finding the closest whole number divisible by the\r\n    // step relative to the min.\r\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\r\n    // The value needs to snap to the min and max.\r\n    this.value = this._clamp(closestValue, this.min, this.max);\r\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitChangeEvent() {\r\n    this._controlValueAccessorChangeFn(this.value);\r\n    this.change.emit(this._createChangeEvent());\r\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\r\n    this.input.emit(this._createChangeEvent());\r\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\r\n    if (!this.tickInterval || !this._sliderDimensions) {\r\n      return;\r\n    }\r\n\r\n    if (this.tickInterval == 'auto') {\r\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\r\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\r\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\r\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\r\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\r\n    } else {\r\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\r\n    }\r\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\r\n    let /** @type {?} */ event = new MdSliderChange();\r\n\r\n    event.source = this;\r\n    event.value = value;\r\n\r\n    return event;\r\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number | null) {\r\n    return ((value || 0) - this.min) / (this.max - this.min);\r\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\r\n    return this.min + percentage * (this.max - this.min);\r\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\r\n    return Math.max(min, Math.min(value, max));\r\n  }\n/**\n * Get the bounding client rect of the slider track element.\rThe track is used rather than the native element to ignore the extra space that the thumb can\rtake up.\n * @return {?}\n */\nprivate _getSliderDimensions() {\r\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\r\n  }\n/**\n * Focuses the native element.\rCurrently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\nprivate _focusHostElement() {\r\n    this._elementRef.nativeElement.focus();\r\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\r\\@param value\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\r\n    this.value = value;\r\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\rImplemented as part of ControlValueAccessor.\r\\@param fn Callback to be registered.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\rImplemented as part of ControlValueAccessor.\r\\@param fn Callback to be registered.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\n/**\n * Sets whether the component should be disabled.\rImplemented as part of ControlValueAccessor.\r\\@param isDisabled\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'md-slider, mat-slider',\r\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\r\n  host: {\r\n    '(focus)': '_onFocus()',\r\n    '(blur)': '_onBlur()',\r\n    '(click)': '_onClick($event)',\r\n    '(keydown)': '_onKeydown($event)',\r\n    '(keyup)': '_onKeyup()',\r\n    '(mouseenter)': '_onMouseenter()',\r\n    '(slide)': '_onSlide($event)',\r\n    '(slideend)': '_onSlideEnd()',\r\n    '(slidestart)': '_onSlideStart($event)',\r\n    'class': 'mat-slider',\r\n    'role': 'slider',\r\n    'tabindex': '0',\r\n    '[attr.aria-disabled]': 'disabled',\r\n    '[attr.aria-valuemax]': 'max',\r\n    '[attr.aria-valuemin]': 'min',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\r\n    '[class.mat-slider-disabled]': 'disabled',\r\n    '[class.mat-slider-has-ticks]': 'tickInterval',\r\n    '[class.mat-slider-horizontal]': '!vertical',\r\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\r\n    '[class.mat-slider-sliding]': '_isSliding',\r\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\r\n    '[class.mat-slider-vertical]': 'vertical',\r\n    '[class.mat-slider-min-value]': '_isMinValue',\r\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\r\n  },\r\n  templateUrl: 'slider.html',\r\n  styleUrls: ['slider.css'],\r\n  inputs: ['disabled', 'color'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n'_sliderWrapper': [{ type: ViewChild, args: ['sliderWrapper', ] },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\rUsed to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\rUsed to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/**\n * Subscription to the Directionality change EventEmitter.\n * @type {?}\n */\nMdSlider.prototype._dirChangeSubscription;\n/**\n * The value of the slider when the slide start event fires.\n * @type {?}\n */\nMdSlider.prototype._valueOnSlideStart;\n/**\n * Reference to the inner slider wrapper element.\n * @type {?}\n */\nMdSlider.prototype._sliderWrapper;\n/** @type {?} */\nMdSlider.prototype._focusMonitor;\n/** @type {?} */\nMdSlider.prototype._changeDetectorRef;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}