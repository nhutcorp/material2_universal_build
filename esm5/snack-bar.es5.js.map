{"version":3,"file":"snack-bar.es5.js","sources":["../../../src/lib/snack-bar/index.ts","../../../src/lib/snack-bar/snack-bar-module.ts","../../../src/lib/snack-bar/snack-bar.ts","../../../src/lib/snack-bar/snack-bar-container.ts","../../../src/lib/snack-bar/simple-snack-bar.ts","../../../src/lib/snack-bar/snack-bar-config.ts","../../../src/lib/snack-bar/snack-bar-ref.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MD_SNACK_BAR_DATA,MdSnackBarHorizontalPosition,MdSnackBarVerticalPosition,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar,MAT_SNACK_BAR_DATA,MatSnackBar,MatSnackBarConfig,MatSnackBarContainer,MatSnackBarModule,MatSnackBarRef} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\r\nimport {MdCommonModule} from '@angular/material/core';\r\nimport {MdSnackBar} from './snack-bar';\r\nimport {MdSnackBarContainer} from './snack-bar-container';\r\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MdSnackBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [\r\n    OverlayModule,\r\n    PortalModule,\r\n    CommonModule,\r\n    MdCommonModule,\r\n  ],\r\n  exports: [MdSnackBarContainer, MdCommonModule],\r\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\r\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\r\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\r\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\r\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\r\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\r\nimport {extendObject} from '@angular/material/core';\r\nimport {SimpleSnackBar} from './simple-snack-bar';\r\nimport {MD_SNACK_BAR_DATA, MdSnackBarConfig} from './snack-bar-config';\r\nimport {MdSnackBarContainer} from './snack-bar-container';\r\nimport {MdSnackBarRef} from './snack-bar-ref';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\rIf there is a parent snack-bar service, all operations should delegate to that parent\rvia `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any> | null = null;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> | null {\r\n    const /** @type {?} */ parent = this._parentSnackBar;\r\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\r\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any> | null) {\r\n    if (this._parentSnackBar) {\r\n      this._parentSnackBar._openedSnackBarRef = value;\r\n    } else {\r\n      this._snackBarRefAtThisLevel = value;\r\n    }\r\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _injector\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _injector: Injector,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\rcurrently opened snack bars.\r\r\\@param component Component to be instantiated.\r\\@param config Extra configuration for the snack bar.\n * @template T\n * @param {?} component\n * @param {?=} config\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\r\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\r\n    const /** @type {?} */ snackBarRef = this._attach(component, _config);\r\n\r\n    // When the snackbar is dismissed, clear the reference to it.\r\n    snackBarRef.afterDismissed().subscribe(() => {\r\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\r\n      if (this._openedSnackBarRef == snackBarRef) {\r\n        this._openedSnackBarRef = null;\r\n      }\r\n    });\r\n\r\n    if (this._openedSnackBarRef) {\r\n      // If a snack bar is already in view, dismiss it and enter the\r\n      // new snack bar after exit animation is complete.\r\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\r\n        snackBarRef.containerInstance.enter();\r\n      });\r\n      this._openedSnackBarRef.dismiss();\r\n    } else {\r\n      // If no snack bar is in view, enter the new snack bar.\r\n      snackBarRef.containerInstance.enter();\r\n    }\r\n\r\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\r\n    if (_config.duration && _config.duration > 0) {\r\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter( /** @type {?} */(( /** @type {?} */((_config)).duration))));\r\n    }\r\n\r\n    if (_config.announcementMessage) {\r\n      this._live.announce(_config.announcementMessage, _config.politeness);\r\n    }\r\n\r\n    this._openedSnackBarRef = snackBarRef;\r\n    return this._openedSnackBarRef;\r\n  }\n/**\n * Opens a snackbar with a message and an optional action.\r\\@param message The message to show in the snackbar.\r\\@param action The label for the snackbar action.\r\\@param config Additional configuration options for the snackbar.\n * @param {?} message\n * @param {?=} action\n * @param {?=} config\n * @return {?}\n */\nopen(message: string, action = '', config?: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar> {\r\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\r\n\r\n    // Since the user doesn't have access to the component, we can\r\n    // override the data to pass in our own message and action.\r\n    _config.data = {message, action};\r\n    _config.announcementMessage = message;\r\n\r\n    return this.openFromComponent(SimpleSnackBar, _config);\r\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\r\n    if (this._openedSnackBarRef) {\r\n      this._openedSnackBarRef.dismiss();\r\n    }\r\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\r\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\r\n    const /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\r\n    const /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\r\n    containerRef.instance.snackBarConfig = config;\r\n    return containerRef.instance;\r\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} config\n * @return {?}\n */\nprivate _attach<T>(component: ComponentType<T>, config: MdSnackBarConfig): MdSnackBarRef<T> {\r\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\r\n    const /** @type {?} */ container = this._attachSnackBarContainer(overlayRef, config);\r\n    const /** @type {?} */ snackBarRef = new MdSnackBarRef<T>(container, overlayRef);\r\n    const /** @type {?} */ injector = this._createInjector(config, snackBarRef);\r\n    const /** @type {?} */ portal = new ComponentPortal(component, undefined, injector);\r\n    const /** @type {?} */ contentRef = container.attachComponentPortal(portal);\r\n\r\n    // We can't pass this via the injector, because the injector is created earlier.\r\n    snackBarRef.instance = contentRef.instance;\r\n\r\n    return snackBarRef;\r\n  }\n/**\n * Creates a new overlay and places it in the correct location.\r\\@param config The user-specified snack bar config.\n * @param {?} config\n * @return {?}\n */\nprivate _createOverlay(config: MdSnackBarConfig): OverlayRef {\r\n    const /** @type {?} */ state = new OverlayConfig();\r\n    state.direction = config.direction;\r\n\r\n    let /** @type {?} */ positionStrategy = this._overlay.position().global();\r\n    // Set horizontal position.\r\n    const /** @type {?} */ isRtl = config.direction === 'rtl';\r\n    const /** @type {?} */ isLeft = (\r\n      config.horizontalPosition === 'left' ||\r\n      (config.horizontalPosition === 'start' && !isRtl) ||\r\n      (config.horizontalPosition === 'end' && isRtl));\r\n    const /** @type {?} */ isRight = !isLeft && config.horizontalPosition !== 'center';\r\n    if (isLeft) {\r\n      positionStrategy.left('0');\r\n    } else if (isRight) {\r\n      positionStrategy.right('0');\r\n    } else {\r\n      positionStrategy.centerHorizontally();\r\n    }\r\n    // Set horizontal position.\r\n    if (config.verticalPosition === 'top') {\r\n      positionStrategy.top('0');\r\n    } else {\r\n      positionStrategy.bottom('0');\r\n    }\r\n\r\n    state.positionStrategy = positionStrategy;\r\n    return this._overlay.create(state);\r\n  }\n/**\n * Creates an injector to be used inside of a snack bar component.\r\\@param config Config that was used to create the snack bar.\r\\@param snackBarRef Reference to the snack bar.\n * @template T\n * @param {?} config\n * @param {?} snackBarRef\n * @return {?}\n */\nprivate _createInjector<T>(\r\n      config: MdSnackBarConfig,\r\n      snackBarRef: MdSnackBarRef<T>): PortalInjector {\r\n\r\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n    const /** @type {?} */ injectionTokens = new WeakMap();\r\n\r\n    injectionTokens.set(MdSnackBarRef, snackBarRef);\r\n    injectionTokens.set(MD_SNACK_BAR_DATA, config.data);\r\n\r\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: Injector, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\rIf there is a parent snack-bar service, all operations should delegate to that parent\rvia `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._injector;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\r\\@param config The configuration to which the defaults will be applied.\r\\@returns The new configuration object with defaults applied.\n * @param {?=} config\n * @return {?}\n */\nfunction _applyConfigDefaults(config?: MdSnackBarConfig): MdSnackBarConfig {\r\n  return extendObject(new MdSnackBarConfig(), config);\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Component,\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  ViewChild,\r\n  NgZone,\r\n  OnDestroy,\r\n  Renderer2,\r\n  ElementRef,\r\n  ChangeDetectionStrategy,\r\n  ViewEncapsulation,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {\r\n  trigger,\r\n  state,\r\n  style,\r\n  transition,\r\n  animate,\r\n  AnimationEvent,\r\n} from '@angular/animations';\r\nimport {\r\n  BasePortalHost,\r\n  ComponentPortal,\r\n  PortalHostDirective,\r\n} from '@angular/cdk/portal';\r\nimport {first} from '@angular/cdk/rxjs';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdSnackBarConfig} from './snack-bar-config';\r\n\r\n\r\nexport type SnackBarState = 'visible' | 'hidden' | 'void';\r\n\r\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\r\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\r\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\r\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\r\\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * Whether the component has been destroyed.\n */\nprivate _destroyed = false;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\n_onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\n_onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nprivate _animationState: SnackBarState;\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef) {\r\n    super();\r\n  }\n/**\n * Gets the current animation state both combining one of the possibilities from\rSnackBarState and the vertical location.\n * @return {?}\n */\ngetAnimationState(): string {\r\n    return `${this._animationState}-${this.snackBarConfig.verticalPosition}`;\r\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\r\n    if (this._portalHost.hasAttached()) {\r\n      throw Error('Attempting to attach snack bar content after content is already attached');\r\n    }\r\n\r\n    if (this.snackBarConfig.extraClasses) {\r\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\r\n      // to pass in an array or a space-separated list.\r\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\r\n        this._renderer.addClass(this._elementRef.nativeElement, cssClass);\r\n      }\r\n    }\r\n\r\n    if (this.snackBarConfig.horizontalPosition === 'center') {\r\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-snack-bar-center');\r\n    }\r\n\r\n    if (this.snackBarConfig.verticalPosition === 'top') {\r\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-snack-bar-top');\r\n    }\r\n\r\n    return this._portalHost.attachComponentPortal(portal);\r\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @return {?}\n */\nattachTemplatePortal(): EmbeddedViewRef<any> {\r\n    throw Error('Not yet implemented');\r\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\r\n    if (event.toState === 'void' || event.toState.startsWith('hidden')) {\r\n      this._completeExit();\r\n    }\r\n\r\n    if (event.toState.startsWith('visible')) {\r\n      // Note: we shouldn't use `this` inside the zone callback,\r\n      // because it can cause a memory leak.\r\n      const /** @type {?} */ onEnter = this._onEnter;\r\n\r\n      this._ngZone.run(() => {\r\n        onEnter.next();\r\n        onEnter.complete();\r\n      });\r\n    }\r\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\r\n    if (!this._destroyed) {\r\n      this._animationState = 'visible';\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\r\n    this._animationState = 'hidden';\r\n    return this._onExit;\r\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\r\n    this._destroyed = true;\r\n    this._completeExit();\r\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\rerrors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\r\n    first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\r\n      this._onExit.next();\r\n      this._onExit.complete();\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'snack-bar-container',\r\n  templateUrl: 'snack-bar-container.html',\r\n  styleUrls: ['snack-bar-container.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  host: {\r\n    'role': 'alert',\r\n    'class': 'mat-snack-bar-container',\r\n    '[@state]': 'getAnimationState()',\r\n    '(@state.done)': 'onAnimationEnd($event)'\r\n  },\r\n  animations: [\r\n    trigger('state', [\r\n      // Animation from top.\r\n      state('visible-top', style({transform: 'translateY(0%)'})),\r\n      state('hidden-top', style({transform: 'translateY(-100%)'})),\r\n      transition('visible-top => hidden-top', animate(HIDE_ANIMATION)),\r\n      transition('void => visible-top', animate(SHOW_ANIMATION)),\r\n      // Animation from bottom.\r\n      state('visible-bottom', style({transform: 'translateY(0%)'})),\r\n      state('hidden-bottom', style({transform: 'translateY(100%)'})),\r\n      transition('visible-bottom => hidden-bottom', animate(HIDE_ANIMATION)),\r\n      transition('void => visible-bottom',\r\n        animate(SHOW_ANIMATION)),\r\n    ])\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * Whether the component has been destroyed.\n * @type {?}\n */\nMdSnackBarContainer.prototype._destroyed;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype._onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype._onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype._animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n/** @type {?} */\nMdSnackBarContainer.prototype._changeDetectorRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\r\nimport {MdSnackBarRef} from './snack-bar-ref';\r\nimport {MD_SNACK_BAR_DATA} from './snack-bar-config';\n/**\n * A component used to open as the default snack bar, matching material spec.\rThis should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * Data that was injected into the snack bar.\n */\ndata: { message: string, action: string };\n/**\n * @param {?} snackBarRef\n * @param {?} data\n */\nconstructor(\npublic snackBarRef: MdSnackBarRef<SimpleSnackBar>,\r\n     data: any) {\r\n    this.data = data;\r\n  }\n/**\n * Performs the action on the snack bar.\n * @return {?}\n */\naction(): void {\r\n    this.snackBarRef.closeWithAction();\r\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean {\r\n    return !!this.data.action;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  moduleId: module.id,\r\n  selector: 'simple-snack-bar',\r\n  templateUrl: 'simple-snack-bar.html',\r\n  styleUrls: ['simple-snack-bar.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'class': 'mat-simple-snackbar',\r\n  }\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSnackBarRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_SNACK_BAR_DATA, ] }, ]},\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * Data that was injected into the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.data;\n/** @type {?} */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\r\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\r\nimport {Direction} from '@angular/cdk/bidi';\r\n\r\nexport const /** @type {?} */ MD_SNACK_BAR_DATA = new InjectionToken<any>('MdSnackBarData');\r\n\r\n/** Possible values for horizontalPosition on MdSnackBarConfig. */\r\nexport type MdSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\r\n\r\n/** Possible values for verticalPosition on MdSnackBarConfig. */\r\nexport type MdSnackBarVerticalPosition = 'top' | 'bottom';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MdSnackBarConfig {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n */\npoliteness?: AriaLivePoliteness = 'assertive';\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n */\nannouncementMessage?: string = '';\n/**\n * The view container to place the overlay for the snack bar into.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n */\nduration?: number = 0;\n/**\n * Extra CSS classes to be added to the snack bar container.\n */\nextraClasses?: string[];\n/**\n * Text layout direction for the snack bar.\n */\ndirection?: Direction = 'ltr';\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * The horizontal position to place the snack bar.\n */\nhorizontalPosition?: MdSnackBarHorizontalPosition = 'center';\n/**\n * The vertical position to place the snack bar.\n */\nverticalPosition?: MdSnackBarVerticalPosition = 'bottom';\r\n}\n\nfunction MdSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMdSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n * @type {?}\n */\nMdSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMdSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMdSnackBarConfig.prototype.extraClasses;\n/**\n * Text layout direction for the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.direction;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdSnackBarConfig.prototype.data;\n/**\n * The horizontal position to place the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.horizontalPosition;\n/**\n * The vertical position to place the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.verticalPosition;\n}\n\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {OverlayRef} from '@angular/cdk/overlay';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\n/**\n * The instance of the component making up the content of the snack bar.\n */\ninstance: T;\n/**\n * The instance of the component making up the content of the snack bar.\r\\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction = new Subject<void>();\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\rdismissed before the duration passes.\n */\nprivate _durationTimeoutId: number;\n/**\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\r\n    this.containerInstance = containerInstance;\r\n    // Dismiss snackbar on action.\r\n    this.onAction().subscribe(() => this.dismiss());\r\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\r\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\r\n    if (!this._afterClosed.closed) {\r\n      this.containerInstance.exit();\r\n    }\r\n    clearTimeout(this._durationTimeoutId);\r\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\ncloseWithAction(): void {\r\n    if (!this._onAction.closed) {\r\n      this._onAction.next();\r\n      this._onAction.complete();\r\n    }\r\n  }\n/**\n * Dismisses the snack bar after some duration\n * @param {?} duration\n * @return {?}\n */\n_dismissAfter(duration: number): void {\r\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\r\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\r\n    if (!this._afterOpened.closed) {\r\n      this._afterOpened.next();\r\n      this._afterOpened.complete();\r\n    }\r\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\r\n    this._overlayRef.dispose();\r\n    this._afterClosed.next();\r\n    this._afterClosed.complete();\r\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\r\n    return this._afterClosed.asObservable();\r\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\r\n    return this.containerInstance._onEnter;\r\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\r\n    return this._onAction.asObservable();\r\n  }\r\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nMdSnackBarRef.prototype.instance;\n/**\n * The instance of the component making up the content of the snack bar.\r\\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\rdismissed before the duration passes.\n * @type {?}\n */\nMdSnackBarRef.prototype._durationTimeoutId;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\r\n"],"names":["state"],"mappings":"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"}