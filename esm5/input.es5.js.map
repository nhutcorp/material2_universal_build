{"version":3,"file":"input.es5.js","sources":["../../../src/lib/input/index.ts","../../../src/lib/input/input-module.ts","../../../src/lib/input/input.ts","../../../src/lib/input/input-errors.ts","../../../src/lib/input/autosize.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdInputModule,MdTextareaAutosize,MdInput,getMdInputUnsupportedTypeError,MatInput,MatInputModule,MatTextareaAutosize} from './public_api';\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {MdFormFieldModule} from '@angular/material/form-field';\r\nimport {MdTextareaAutosize} from './autosize';\r\nimport {MdInput} from './input';\nexport class MdInputModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  declarations: [\r\n    MdInput,\r\n    MdTextareaAutosize,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MdFormFieldModule,\r\n    PlatformModule,\r\n  ],\r\n  exports: [\r\n    // We re-export the `MdFormFieldModule` since `MdInput` will almost always be used together with\r\n    // `MdFormField`.\r\n    MdFormFieldModule,\r\n    MdInput,\r\n    MdTextareaAutosize,\r\n  ],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Renderer2,\r\n  Self,\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\r\nimport {Platform, getSupportedInputTypes} from '@angular/cdk/platform';\r\nimport {getMdInputUnsupportedTypeError} from './input-errors';\r\nimport {\r\n  defaultErrorStateMatcher,\r\n  ErrorOptions,\r\n  ErrorStateMatcher,\r\n  MD_ERROR_GLOBAL_OPTIONS\r\n} from '@angular/material/core';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdFormFieldControl} from '@angular/material/form-field';\r\n\r\n// Invalid input type. Using one of these will throw an MdInputUnsupportedTypeError.\r\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\r\n  'button',\r\n  'checkbox',\r\n  'color',\r\n  'file',\r\n  'hidden',\r\n  'image',\r\n  'radio',\r\n  'range',\r\n  'reset',\r\n  'submit'\r\n];\r\n\r\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Directive that allows a native input to work inside a `MdFormField`.\n */\nexport class MdInput implements MdFormFieldControl<any>, OnChanges, OnDestroy, DoCheck {\n/**\n * Variables used as cache for getters and setters.\n */\nprotected _type = 'text';\r\n  protected _disabled = false;\r\n  protected _required = false;\r\n  protected _id: string;\r\n  protected _uid = `md-input-${nextUniqueId++}`;\r\n  protected _errorOptions: ErrorOptions;\r\n  protected _previousNativeValue = this.value;\n/**\n * Whether the input is focused.\n */\nfocused = false;\n/**\n * Whether the input is in an error state.\n */\nerrorState = false;\n/**\n * The aria-describedby attribute on the input for improved a11y.\n */\n_ariaDescribedby: string;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\rneeds to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * A name for this control that can be used by `md-form-field`.\n */\ncontrolType = 'mat-input';\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) { this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n */\nplaceholder: string = '';\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\r\n    this._type = value || 'text';\r\n    this._validateType();\r\n\r\n    // When using Angular inputs, developers are no longer able to set the properties on the native\r\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\r\n    // with the native property. Textarea elements don't support the type property or attribute.\r\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\r\n      this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\r\n    }\r\n  }\n/**\n * A function used to control when error messages are shown.\n */\nerrorStateMatcher: ErrorStateMatcher;\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) {\r\n    if (value !== this.value) {\r\n      this._elementRef.nativeElement.value = value;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n\r\n  protected _neverEmptyInputTypes = [\r\n    'date',\r\n    'datetime',\r\n    'datetime-local',\r\n    'month',\r\n    'time',\r\n    'week'\r\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} ngControl\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} errorOptions\n */\nconstructor(protected _elementRef: ElementRef,\r\n              protected _renderer: Renderer2,\r\n              protected _platform: Platform,\npublic ngControl: NgControl,\r\n               protected _parentForm: NgForm,\r\n               protected _parentFormGroup: FormGroupDirective,\r\n                errorOptions: ErrorOptions) {\r\n\r\n    // Force setter to be called in case id was not specified.\r\n    this.id = this.id;\r\n    this._errorOptions = errorOptions ? errorOptions : {};\r\n    this.errorStateMatcher = this._errorOptions.errorStateMatcher || defaultErrorStateMatcher;\r\n\r\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\r\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\r\n    // exists on iOS, we only bother to install the listener on iOS.\r\n    if (_platform.IOS) {\r\n      _renderer.listen(_elementRef.nativeElement, 'keyup', (event: Event) => {\r\n        let el = event.target as HTMLInputElement;\r\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\r\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\r\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\r\n          // `0, 0` seems to completely fix it.\r\n          el.setSelectionRange(1, 1);\r\n          el.setSelectionRange(0, 0);\r\n        }\r\n      });\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngOnChanges() {\r\n    this.stateChanges.next();\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this.stateChanges.complete();\r\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\r\n    if (this.ngControl) {\r\n      // We need to re-evaluate this on every change detection cycle, because there are some\r\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\r\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\r\n      this._updateErrorState();\r\n    } else {\r\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\r\n      // changes to the native `value` property in order to update the floating label.\r\n      this._dirtyCheckNativeValue();\r\n    }\r\n  }\n/**\n * @return {?}\n */\nfocus() { this._elementRef.nativeElement.focus(); }\n/**\n * Callback for the cases where the focused state of the input changes.\n * @param {?} isFocused\n * @return {?}\n */\n_focusChanged(isFocused: boolean) {\r\n    if (isFocused !== this.focused) {\r\n      this.focused = isFocused;\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * @return {?}\n */\n_onInput() {\r\n    // This is a noop function and is used to let Angular know whenever the value changes.\r\n    // Angular will run a new change detection each time the `input` event has been dispatched.\r\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\r\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\r\n    // value changes and will not disappear.\r\n    // Listening to the input event wouldn't be necessary when the input is using the\r\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\r\n  }\n/**\n * Re-evaluates the error state. This is only relevant with \\@angular/forms.\n * @return {?}\n */\nprotected _updateErrorState() {\r\n    const /** @type {?} */ oldState = this.errorState;\r\n    const /** @type {?} */ ngControl = this.ngControl;\r\n    const /** @type {?} */ parent = this._parentFormGroup || this._parentForm;\r\n    const /** @type {?} */ newState = ngControl && this.errorStateMatcher( /** @type {?} */((ngControl.control as FormControl)), parent);\r\n\r\n    if (newState !== oldState) {\r\n      this.errorState = newState;\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Does some manual dirty checking on the native input `value` property.\n * @return {?}\n */\nprotected _dirtyCheckNativeValue() {\r\n    const /** @type {?} */ newValue = this.value;\r\n\r\n    if (this._previousNativeValue !== newValue) {\r\n      this._previousNativeValue = newValue;\r\n      this.stateChanges.next();\r\n    }\r\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprotected _validateType() {\r\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\r\n      throw getMdInputUnsupportedTypeError(this._type);\r\n    }\r\n  }\n/**\n * Checks whether the input type is one of the types that are never empty.\n * @return {?}\n */\nprotected _isNeverEmpty() {\r\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\r\n  }\n/**\n * Checks whether the input is invalid based on the native validation.\n * @return {?}\n */\nprotected _isBadInput() {\r\n    // The `validity` property won't be present on platform-server.\r\n    // let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\r\n    // return validity && validity.badInput;\r\n    return false;\r\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprotected _isTextarea() {\r\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\r\n\r\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\r\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\r\n    // DOM closer.\r\n    let /** @type {?} */ nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\r\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\r\n  }\n/**\n * @return {?}\n */\nget empty(): boolean {\r\n    return !this._isNeverEmpty() &&\r\n        (this.value == null || this.value === '') &&\r\n        // Check if the input contains bad input. If so, we know that it only appears empty because\r\n        // the value failed to parse. From the user's perspective it is not empty.\r\n        // TODO(mmalerba): Add e2e test for bad input case.\r\n        !this._isBadInput();\r\n  }\n/**\n * @return {?}\n */\nget shouldPlaceholderFloat(): boolean { return this.focused || !this.empty; }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @return {?}\n */\nonContainerClick() { this.focus(); }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\r\n  host: {\r\n    'class': 'mat-input-element mat-form-field-autofill-control',\r\n    // Native input properties that are overwritten by Angular inputs need to be synced with\r\n    // the native input element. Otherwise property bindings for those don't work.\r\n    '[attr.id]': 'id',\r\n    '[placeholder]': 'placeholder',\r\n    '[disabled]': 'disabled',\r\n    '[required]': 'required',\r\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n    '[attr.aria-invalid]': 'errorState',\r\n    '(blur)': '_focusChanged(false)',\r\n    '(focus)': '_focusChanged(true)',\r\n    '(input)': '_onInput()',\r\n  },\r\n  providers: [{provide: MdFormFieldControl, useExisting: MdInput}],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'errorStateMatcher': [{ type: Input },],\n'value': [{ type: Input },],\n};\n}\n\nfunction MdInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInput.ctorParameters;\n/** @type {?} */\nMdInput.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInput.prototype._type;\n/** @type {?} */\nMdInput.prototype._disabled;\n/** @type {?} */\nMdInput.prototype._required;\n/** @type {?} */\nMdInput.prototype._id;\n/** @type {?} */\nMdInput.prototype._uid;\n/** @type {?} */\nMdInput.prototype._errorOptions;\n/** @type {?} */\nMdInput.prototype._previousNativeValue;\n/**\n * Whether the input is focused.\n * @type {?}\n */\nMdInput.prototype.focused;\n/**\n * Whether the input is in an error state.\n * @type {?}\n */\nMdInput.prototype.errorState;\n/**\n * The aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInput.prototype._ariaDescribedby;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\rneeds to run change detection.\n * @type {?}\n */\nMdInput.prototype.stateChanges;\n/**\n * A name for this control that can be used by `md-form-field`.\n * @type {?}\n */\nMdInput.prototype.controlType;\n/**\n * Placeholder attribute of the element.\n * @type {?}\n */\nMdInput.prototype.placeholder;\n/**\n * A function used to control when error messages are shown.\n * @type {?}\n */\nMdInput.prototype.errorStateMatcher;\n/** @type {?} */\nMdInput.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInput.prototype._elementRef;\n/** @type {?} */\nMdInput.prototype._renderer;\n/** @type {?} */\nMdInput.prototype._platform;\n/** @type {?} */\nMdInput.prototype.ngControl;\n/** @type {?} */\nMdInput.prototype._parentForm;\n/** @type {?} */\nMdInput.prototype._parentFormGroup;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMdInputUnsupportedTypeError(type: string): Error {\r\n  return Error(`Input type \"${type}\" isn't supported by mdInput.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\nimport {Directive, ElementRef, Input, AfterViewInit, DoCheck} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit, DoCheck {\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n */\nprivate _previousValue: string;\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\r\n    this._minRows = value;\r\n    this._setMinHeight();\r\n  }\n/**\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\r\n    this._maxRows = value;\r\n    this._setMaxHeight();\r\n  }\n/**\n * @return {?}\n */\nget _matAutosizeMinRows() { return this.minRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMinRows(v) { this.minRows = v; }\n/**\n * @return {?}\n */\nget _matAutosizeMaxRows() { return this.maxRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMaxRows(v) { this.maxRows = v; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n * @param {?} _platform\n */\nconstructor(private _elementRef: ElementRef,\nprivate _platform: Platform) {}\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\r\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\r\n        `${this.minRows * this._cachedLineHeight}px` : null;\r\n\r\n    if (minHeight)  {\r\n      this._setTextareaStyle('minHeight', minHeight);\r\n    }\r\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\r\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\r\n        `${this.maxRows * this._cachedLineHeight}px` : null;\r\n\r\n    if (maxHeight) {\r\n      this._setTextareaStyle('maxHeight', maxHeight);\r\n    }\r\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\r\n    if (this._platform.isBrowser) {\r\n      this._cacheTextareaLineHeight();\r\n      this.resizeToFitContent();\r\n    }\r\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\r\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\r\n    textarea.style[property] = value;\r\n  }\n/**\n * Cache the height of a single-row textarea.\r\rWe need to know how large a single \"row\" of a textarea is in order to apply minRows and\rmaxRows. For the initial version, we will assume that the height of a single line in the\rtextarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\r\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\r\n\r\n    // Use a clone element because we have to override some styles.\r\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\r\n    textareaClone.rows = 1;\r\n\r\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\r\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\r\n    // would affect the height.\r\n    textareaClone.style.position = 'absolute';\r\n    textareaClone.style.visibility = 'hidden';\r\n    textareaClone.style.border = 'none';\r\n    textareaClone.style.padding = '0';\r\n    textareaClone.style.height = '';\r\n    textareaClone.style.minHeight = '';\r\n    textareaClone.style.maxHeight = '';\r\n\r\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\r\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\r\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\r\n    // to hidden. This ensures that there is no invalid calculation of the line height.\r\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\r\n    textareaClone.style.overflow = 'hidden'; /** @type {?} */((\r\n\r\n    textarea.parentNode)).appendChild(textareaClone);\r\n    this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */((\r\n    textarea.parentNode)).removeChild(textareaClone);\r\n\r\n    // Min and max heights have to be re-calculated if the cached line height changes\r\n    this._setMinHeight();\r\n    this._setMaxHeight();\r\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\r\n    this.resizeToFitContent();\r\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\r\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\r\n    const /** @type {?} */ value = textarea.value;\r\n\r\n    // Only resize of the value changed since these calculations can be expensive.\r\n    if (value === this._previousValue) {\r\n      return;\r\n    }\r\n\r\n    // Reset the textarea height to auto in order to shrink back to its default size.\r\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\r\n    textarea.style.height = 'auto';\r\n    textarea.style.overflow = 'hidden';\r\n\r\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\r\n    textarea.style.height = `${textarea.scrollHeight}px`;\r\n    textarea.style.overflow = '';\r\n\r\n    this._previousValue = value;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: `textarea[md-autosize], textarea[mdTextareaAutosize],\r\n             textarea[mat-autosize], textarea[matTextareaAutosize]`,\r\n  exportAs: 'mdTextareaAutosize, matTextareaAutosize',\r\n  host: {\r\n    // Textarea elements that have the directive applied should have a single row by default.\r\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\r\n    'rows': '1',\r\n  },\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Platform, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input, args: ['mdAutosizeMinRows', ] },],\n'maxRows': [{ type: Input, args: ['mdAutosizeMaxRows', ] },],\n'_matAutosizeMinRows': [{ type: Input, args: ['matAutosizeMinRows', ] },],\n'_matAutosizeMaxRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n * @type {?}\n */\nMdTextareaAutosize.prototype._previousValue;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n/** @type {?} */\nMdTextareaAutosize.prototype._platform;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}